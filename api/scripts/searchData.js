pages = [{"l":"index.html","n":"docs","t":"docs","d":"","k":"static"},
{"l":"spire.html","n":"spire","t":"package spire","d":"spire","k":"package"},
{"l":"spire.html","n":"ClassTag","t":"type ClassTag[A] = ClassTag[A]","d":"spire","k":"type"},
{"l":"spire.html","n":"ClassTag","t":"val ClassTag: ClassTag","d":"spire","k":"val"},
{"l":"spire.html","n":"NotGiven","t":"type NotGiven[A] = NotGiven[A]","d":"spire","k":"type"},
{"l":"spire.html","n":"sp","t":"type sp = specialized","d":"spire","k":"type"},
{"l":"spire.html","n":"tailrec","t":"type tailrec = tailrec","d":"spire","k":"type"},
{"l":"spire/BuildInfo$.html","n":"BuildInfo","t":"object BuildInfo","d":"spire/BuildInfo$","k":"object"},
{"l":"spire/BuildInfo$.html","n":"scalaVersion","t":"val scalaVersion: String","d":"spire/BuildInfo$","k":"val"},
{"l":"spire/BuildInfo$.html","n":"toString","t":"val toString: String","d":"spire/BuildInfo$","k":"val"},
{"l":"spire/BuildInfo$.html","n":"version","t":"val version: String","d":"spire/BuildInfo$","k":"val"},
{"l":"spire/Platform$.html","n":"Platform","t":"object Platform","d":"spire/Platform$","k":"object"},
{"l":"spire/Platform$.html","n":"TrieMap","t":"def TrieMap[K, V](): TrieMap[K, V]","d":"spire/Platform$","k":"def"},
{"l":"spire/Platform$.html","n":"TrieMap","t":"type TrieMap[K, V] = TrieMap[K, V]","d":"spire/Platform$","k":"type"},
{"l":"spire/compat$.html","n":"compat","t":"object compat extends CompatPriority3","d":"spire/compat$","k":"object"},
{"l":"spire/implicits$.html","n":"implicits","t":"object implicits extends AnyInstances with AllSyntax","d":"spire/implicits$","k":"object"},
{"l":"spire/algebra.html","n":"spire.algebra","t":"package spire.algebra","d":"spire/algebra","k":"package"},
{"l":"spire/algebra.html","n":"AbGroup","t":"type AbGroup[A] = CommutativeGroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AbGroup","t":"val AbGroup: CommutativeGroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"AdditiveAbGroup","t":"type AdditiveAbGroup[A] = AdditiveCommutativeGroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AdditiveAbGroup","t":"val AdditiveAbGroup: AdditiveCommutativeGroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"AdditiveCMonoid","t":"type AdditiveCMonoid[A] = AdditiveCommutativeMonoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AdditiveCMonoid","t":"val AdditiveCMonoid: AdditiveCommutativeMonoid","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"AdditiveCSemigroup","t":"type AdditiveCSemigroup[A] = AdditiveCommutativeSemigroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AdditiveCSemigroup","t":"val AdditiveCSemigroup: AdditiveCommutativeSemigroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"AdditiveGroup","t":"type AdditiveGroup[A] = AdditiveGroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AdditiveGroup","t":"val AdditiveGroup: AdditiveGroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"AdditiveMonoid","t":"type AdditiveMonoid[A] = AdditiveMonoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AdditiveMonoid","t":"val AdditiveMonoid: AdditiveMonoid","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"AdditiveSemigroup","t":"type AdditiveSemigroup[A] = AdditiveSemigroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"AdditiveSemigroup","t":"val AdditiveSemigroup: AdditiveSemigroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Bool","t":"type Bool[A] = Bool[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Bool","t":"val Bool: Bool","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"CMonoid","t":"type CMonoid[A] = CommutativeMonoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"CMonoid","t":"val CMonoid: CommutativeMonoid","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"CRig","t":"type CRig[A] = CommutativeRig[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"CRig","t":"val CRig: CommutativeRig","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"CRing","t":"type CRing[A] = CommutativeRing[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"CRing","t":"val CRing: CommutativeRing","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"CRng","t":"type CRng[A] = CommutativeRng[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"CRng","t":"val CRng: CommutativeRng","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"CSemigroup","t":"type CSemigroup[A] = CommutativeSemigroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"CSemigroup","t":"val CSemigroup: CommutativeSemigroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"CSemiring","t":"type CSemiring[A] = CommutativeSemiring[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"CSemiring","t":"val CSemiring: CommutativeSemiring","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"DivisionRing","t":"type DivisionRing[A] = DivisionRing[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"DivisionRing","t":"val DivisionRing: DivisionRing","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Eq","t":"type Eq[A] = Eq[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Eq","t":"val Eq: Eq","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"EuclideanRing","t":"type EuclideanRing[A] = EuclideanRing[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"EuclideanRing","t":"val EuclideanRing: EuclideanRing","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Field","t":"type Field[A] = Field[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Field","t":"val Field: Field","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"GCDRing","t":"type GCDRing[A] = GCDRing[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"GCDRing","t":"val GCDRing: GCDRing","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Group","t":"type Group[A] = Group[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Group","t":"val Group: Group","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Monoid","t":"type Monoid[A] = Monoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Monoid","t":"val Monoid: Monoid","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"MultiplicativeAbGroup","t":"type MultiplicativeAbGroup[A] = MultiplicativeCommutativeGroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"MultiplicativeAbGroup","t":"val MultiplicativeAbGroup: MultiplicativeCommutativeGroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"MultiplicativeCMonoid","t":"type MultiplicativeCMonoid[A] = MultiplicativeCommutativeMonoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"MultiplicativeCMonoid","t":"val MultiplicativeCMonoid: MultiplicativeCommutativeMonoid","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"MultiplicativeCSemigroup","t":"type MultiplicativeCSemigroup[A] = MultiplicativeCommutativeSemigroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"MultiplicativeCSemigroup","t":"val MultiplicativeCSemigroup: MultiplicativeCommutativeSemigroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"MultiplicativeGroup","t":"type MultiplicativeGroup[A] = MultiplicativeGroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"MultiplicativeGroup","t":"val MultiplicativeGroup: MultiplicativeGroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"MultiplicativeMonoid","t":"type MultiplicativeMonoid[A] = MultiplicativeMonoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"MultiplicativeMonoid","t":"val MultiplicativeMonoid: MultiplicativeMonoid","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"MultiplicativeSemigroup","t":"type MultiplicativeSemigroup[A] = MultiplicativeSemigroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"MultiplicativeSemigroup","t":"val MultiplicativeSemigroup: MultiplicativeSemigroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Order","t":"type Order[A] = Order[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Order","t":"val Order: Order","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"PartialOrder","t":"type PartialOrder[A] = PartialOrder[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"PartialOrder","t":"val PartialOrder: PartialOrder","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Rig","t":"type Rig[A] = Rig[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Rig","t":"val Rig: Rig","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Ring","t":"type Ring[A] = Ring[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Ring","t":"val Ring: Ring","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Rng","t":"type Rng[A] = Rng[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Rng","t":"val Rng: Rng","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Semigroup","t":"type Semigroup[A] = Semigroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Semigroup","t":"val Semigroup: Semigroup","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Semiring","t":"type Semiring[A] = Semiring[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Semiring","t":"val Semiring: Semiring","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Sign","t":"type Sign = Sign","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Sign","t":"val Sign: Sign","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"Signed","t":"type Signed[A] = Signed[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"Signed","t":"val Signed: Signed","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"SignedAdditiveAbGroup","t":"type SignedAdditiveAbGroup[A] = forAdditiveCommutativeGroup[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"SignedAdditiveCMonoid","t":"type SignedAdditiveCMonoid[A] = forAdditiveCommutativeMonoid[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"TruncatedDivision","t":"type TruncatedDivision[A] = TruncatedDivision[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra.html","n":"TruncatedDivision","t":"val TruncatedDivision: TruncatedDivision","d":"spire/algebra","k":"val"},
{"l":"spire/algebra.html","n":"TruncatedDivisionCRing","t":"type TruncatedDivisionCRing[A] = forCommutativeRing[A]","d":"spire/algebra","k":"type"},
{"l":"spire/algebra/Action.html","n":"Action","t":"trait Action[@specialized(Int) P, G] extends LeftAction[P, G] with RightAction[P, G]","d":"spire/algebra/Action","k":"trait"},
{"l":"spire/algebra/Action$.html","n":"Action","t":"object Action","d":"spire/algebra/Action$","k":"object"},
{"l":"spire/algebra/Action$.html","n":"additive","t":"def additive[P, G](G: AdditiveAction[P, G]): Action[P, G]","d":"spire/algebra/Action$","k":"def"},
{"l":"spire/algebra/Action$.html","n":"apply","t":"def apply[P, G](G: Action[P, G]): Action[P, G]","d":"spire/algebra/Action$","k":"def"},
{"l":"spire/algebra/Action$.html","n":"multiplicative","t":"def multiplicative[P, G](G: MultiplicativeAction[P, G]): Action[P, G]","d":"spire/algebra/Action$","k":"def"},
{"l":"spire/algebra/Additive$.html","n":"Additive","t":"object Additive","d":"spire/algebra/Additive$","k":"object"},
{"l":"spire/algebra/Additive$.html","n":"apply","t":"def apply[A](s: Semigroup[A]): AdditiveSemigroup[A]","d":"spire/algebra/Additive$","k":"def"},
{"l":"spire/algebra/Additive$.html","n":"apply","t":"def apply[A](s: CommutativeSemigroup[A]): AdditiveCommutativeSemigroup[A]","d":"spire/algebra/Additive$","k":"def"},
{"l":"spire/algebra/Additive$.html","n":"apply","t":"def apply[A](m: Monoid[A]): AdditiveMonoid[A]","d":"spire/algebra/Additive$","k":"def"},
{"l":"spire/algebra/Additive$.html","n":"apply","t":"def apply[A](m: CommutativeMonoid[A]): AdditiveCommutativeMonoid[A]","d":"spire/algebra/Additive$","k":"def"},
{"l":"spire/algebra/Additive$.html","n":"apply","t":"def apply[A](g: Group[A]): AdditiveGroup[A]","d":"spire/algebra/Additive$","k":"def"},
{"l":"spire/algebra/Additive$.html","n":"apply","t":"def apply[A](g: CommutativeGroup[A]): AdditiveCommutativeGroup[A]","d":"spire/algebra/Additive$","k":"def"},
{"l":"spire/algebra/AdditiveAction.html","n":"AdditiveAction","t":"trait AdditiveAction[@specialized(Int) P, G]","d":"spire/algebra/AdditiveAction","k":"trait"},
{"l":"spire/algebra/AdditiveAction.html","n":"additive","t":"def additive: Action[P, G]","d":"spire/algebra/AdditiveAction","k":"def"},
{"l":"spire/algebra/AdditiveAction.html","n":"gplusl","t":"def gplusl(g: G, p: P): P","d":"spire/algebra/AdditiveAction","k":"def"},
{"l":"spire/algebra/AdditiveAction.html","n":"gplusr","t":"def gplusr(p: P, g: G): P","d":"spire/algebra/AdditiveAction","k":"def"},
{"l":"spire/algebra/AdditiveTorsor.html","n":"AdditiveTorsor","t":"trait AdditiveTorsor[V, @specialized(Int, Long, Float, Double) R] extends AdditiveAction[V, R]","d":"spire/algebra/AdditiveTorsor","k":"trait"},
{"l":"spire/algebra/AdditiveTorsor.html","n":"fixOrigin","t":"def fixOrigin(id: V): AdditiveCommutativeGroup[V]","d":"spire/algebra/AdditiveTorsor","k":"def"},
{"l":"spire/algebra/AdditiveTorsor.html","n":"pminus","t":"def pminus(v: V, w: V): R","d":"spire/algebra/AdditiveTorsor","k":"def"},
{"l":"spire/algebra/AdditiveTorsor.html","n":"scalar","t":"def scalar: AdditiveCommutativeGroup[R]","d":"spire/algebra/AdditiveTorsor","k":"def"},
{"l":"spire/algebra/AdditiveTorsor$.html","n":"AdditiveTorsor","t":"object AdditiveTorsor","d":"spire/algebra/AdditiveTorsor$","k":"object"},
{"l":"spire/algebra/AdditiveTorsor$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: AdditiveTorsor[V, R]): AdditiveTorsor[V, R]","d":"spire/algebra/AdditiveTorsor$","k":"def"},
{"l":"spire/algebra/CModule.html","n":"CModule","t":"trait CModule[V, @specialized(Int, Long, Float, Double) R] extends LeftModule[V, R] with RightModule[V, R]","d":"spire/algebra/CModule","k":"trait"},
{"l":"spire/algebra/CModule.html","n":"scalar","t":"def scalar: CommutativeRing[R]","d":"spire/algebra/CModule","k":"def"},
{"l":"spire/algebra/CModule$.html","n":"CModule","t":"object CModule","d":"spire/algebra/CModule$","k":"object"},
{"l":"spire/algebra/CModule$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: CModule[V, R]): CModule[V, R]","d":"spire/algebra/CModule$","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"CoordinateSpace","t":"trait CoordinateSpace[V, @specialized(Float, Double) F] extends InnerProductSpace[V, F]","d":"spire/algebra/CoordinateSpace","k":"trait"},
{"l":"spire/algebra/CoordinateSpace.html","n":"_x","t":"def _x(v: V): F","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"_y","t":"def _y(v: V): F","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"_z","t":"def _z(v: V): F","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"axis","t":"def axis(i: Int): V","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"basis","t":"def basis: Vector[V]","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"coord","t":"def coord(v: V, i: Int): F","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"dimensions","t":"def dimensions: Int","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace.html","n":"dot","t":"def dot(v: V, w: V): F","d":"spire/algebra/CoordinateSpace","k":"def"},
{"l":"spire/algebra/CoordinateSpace$.html","n":"CoordinateSpace","t":"object CoordinateSpace","d":"spire/algebra/CoordinateSpace$","k":"object"},
{"l":"spire/algebra/CoordinateSpace$.html","n":"apply","t":"def apply[V, @specialized(Float, Double) F](implicit V: CoordinateSpace[V, F]): CoordinateSpace[V, F]","d":"spire/algebra/CoordinateSpace$","k":"def"},
{"l":"spire/algebra/CoordinateSpace$.html","n":"array","t":"def array[@specialized(Float, Double) A : ClassTag](dimensions: Int): CoordinateSpace[Array[A], A]","d":"spire/algebra/CoordinateSpace$","k":"def"},
{"l":"spire/algebra/CoordinateSpace$.html","n":"seq","t":"def seq[A : Field, CC <: (SeqOps)](dimensions: Int)(implicit evidence$1: Field[A], cbf0: Factory[A, CC[A]]): SeqCoordinateSpace[A, CC[A]]","d":"spire/algebra/CoordinateSpace$","k":"def"},
{"l":"spire/algebra/FieldAssociativeAlgebra.html","n":"FieldAssociativeAlgebra","t":"trait FieldAssociativeAlgebra[V, @specialized(Float, Double) F] extends RingAssociativeAlgebra[V, F] with VectorSpace[V, F]","d":"spire/algebra/FieldAssociativeAlgebra","k":"trait"},
{"l":"spire/algebra/FieldAssociativeAlgebra$.html","n":"FieldAssociativeAlgebra","t":"object FieldAssociativeAlgebra","d":"spire/algebra/FieldAssociativeAlgebra$","k":"object"},
{"l":"spire/algebra/FieldAssociativeAlgebra$.html","n":"apply","t":"def apply[V, @specialized R](implicit V: FieldAssociativeAlgebra[V, R]): FieldAssociativeAlgebra[V, R]","d":"spire/algebra/FieldAssociativeAlgebra$","k":"def"},
{"l":"spire/algebra/InnerProductSpace.html","n":"InnerProductSpace","t":"trait InnerProductSpace[V, @specialized(Int, Long, Float, Double) F] extends VectorSpace[V, F]","d":"spire/algebra/InnerProductSpace","k":"trait"},
{"l":"spire/algebra/InnerProductSpace.html","n":"dot","t":"def dot(v: V, w: V): F","d":"spire/algebra/InnerProductSpace","k":"def"},
{"l":"spire/algebra/InnerProductSpace.html","n":"normed","t":"def normed(implicit ev: NRoot[F]): NormedVectorSpace[V, F]","d":"spire/algebra/InnerProductSpace","k":"def"},
{"l":"spire/algebra/InnerProductSpace$.html","n":"InnerProductSpace","t":"object InnerProductSpace","d":"spire/algebra/InnerProductSpace$","k":"object"},
{"l":"spire/algebra/InnerProductSpace$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: InnerProductSpace[V, R]): InnerProductSpace[V, R]","d":"spire/algebra/InnerProductSpace$","k":"def"},
{"l":"spire/algebra/Involution.html","n":"Involution","t":"trait Involution[@specialized(Int, Long, Float, Double) A]","d":"spire/algebra/Involution","k":"trait"},
{"l":"spire/algebra/Involution.html","n":"adjoint","t":"def adjoint(a: A): A","d":"spire/algebra/Involution","k":"def"},
{"l":"spire/algebra/Involution$.html","n":"Involution","t":"object Involution","d":"spire/algebra/Involution$","k":"object"},
{"l":"spire/algebra/Involution$.html","n":"apply","t":"def apply[A](implicit ev: Involution[A]): Involution[A]","d":"spire/algebra/Involution$","k":"def"},
{"l":"spire/algebra/Involution$.html","n":"fromIsReal","t":"def fromIsReal[@specialized(Int, Long, Float, Double) A : IsReal]: Involution[A]","d":"spire/algebra/Involution$","k":"def"},
{"l":"spire/algebra/Involution$.html","n":"selfAdjoint","t":"def selfAdjoint[@specialized(Int, Long, Float, Double) A]: Involution[A]","d":"spire/algebra/Involution$","k":"def"},
{"l":"spire/algebra/Involution$$SelfAdjoint.html","n":"SelfAdjoint","t":"class SelfAdjoint[@specialized(Int, Long, Float, Double) A] extends Involution[A]","d":"spire/algebra/Involution$$SelfAdjoint","k":"class"},
{"l":"spire/algebra/Involution$$SelfAdjoint.html","n":"adjoint","t":"def adjoint(a: A): A","d":"spire/algebra/Involution$$SelfAdjoint","k":"def"},
{"l":"spire/algebra/IsAlgebraic.html","n":"IsAlgebraic","t":"trait IsAlgebraic[@specialized A] extends IsReal[A]","d":"spire/algebra/IsAlgebraic","k":"trait"},
{"l":"spire/algebra/IsAlgebraic.html","n":"toAlgebraic","t":"def toAlgebraic(a: A): Algebraic","d":"spire/algebra/IsAlgebraic","k":"def"},
{"l":"spire/algebra/IsAlgebraic.html","n":"toReal","t":"def toReal(a: A): Real","d":"spire/algebra/IsAlgebraic","k":"def"},
{"l":"spire/algebra/IsAlgebraic$.html","n":"IsAlgebraic","t":"object IsAlgebraic","d":"spire/algebra/IsAlgebraic$","k":"object"},
{"l":"spire/algebra/IsAlgebraic$.html","n":"apply","t":"def apply[@specialized A](implicit A: IsAlgebraic[A]): IsAlgebraic[A]","d":"spire/algebra/IsAlgebraic$","k":"def"},
{"l":"spire/algebra/IsIntegral.html","n":"IsIntegral","t":"trait IsIntegral[A] extends IsRational[A]","d":"spire/algebra/IsIntegral","k":"trait"},
{"l":"spire/algebra/IsIntegral.html","n":"ceil","t":"def ceil(a: A): A","d":"spire/algebra/IsIntegral","k":"def"},
{"l":"spire/algebra/IsIntegral.html","n":"floor","t":"def floor(a: A): A","d":"spire/algebra/IsIntegral","k":"def"},
{"l":"spire/algebra/IsIntegral.html","n":"isWhole","t":"def isWhole(a: A): Boolean","d":"spire/algebra/IsIntegral","k":"def"},
{"l":"spire/algebra/IsIntegral.html","n":"round","t":"def round(a: A): A","d":"spire/algebra/IsIntegral","k":"def"},
{"l":"spire/algebra/IsIntegral.html","n":"toBigInt","t":"def toBigInt(a: A): BigInt","d":"spire/algebra/IsIntegral","k":"def"},
{"l":"spire/algebra/IsIntegral.html","n":"toRational","t":"def toRational(a: A): Rational","d":"spire/algebra/IsIntegral","k":"def"},
{"l":"spire/algebra/IsIntegral$.html","n":"IsIntegral","t":"object IsIntegral","d":"spire/algebra/IsIntegral$","k":"object"},
{"l":"spire/algebra/IsIntegral$.html","n":"apply","t":"def apply[A](implicit A: IsIntegral[A]): IsIntegral[A]","d":"spire/algebra/IsIntegral$","k":"def"},
{"l":"spire/algebra/IsRational.html","n":"IsRational","t":"trait IsRational[A] extends IsAlgebraic[A]","d":"spire/algebra/IsRational","k":"trait"},
{"l":"spire/algebra/IsRational.html","n":"toAlgebraic","t":"def toAlgebraic(a: A): Algebraic","d":"spire/algebra/IsRational","k":"def"},
{"l":"spire/algebra/IsRational.html","n":"toRational","t":"def toRational(a: A): Rational","d":"spire/algebra/IsRational","k":"def"},
{"l":"spire/algebra/IsRational$.html","n":"IsRational","t":"object IsRational","d":"spire/algebra/IsRational$","k":"object"},
{"l":"spire/algebra/IsRational$.html","n":"apply","t":"def apply[A](implicit A: IsRational[A]): IsRational[A]","d":"spire/algebra/IsRational$","k":"def"},
{"l":"spire/algebra/IsReal.html","n":"IsReal","t":"trait IsReal[@specialized A] extends Order[A] with Signed[A]","d":"spire/algebra/IsReal","k":"trait"},
{"l":"spire/algebra/IsReal.html","n":"ceil","t":"def ceil(a: A): A","d":"spire/algebra/IsReal","k":"def"},
{"l":"spire/algebra/IsReal.html","n":"floor","t":"def floor(a: A): A","d":"spire/algebra/IsReal","k":"def"},
{"l":"spire/algebra/IsReal.html","n":"isWhole","t":"def isWhole(a: A): Boolean","d":"spire/algebra/IsReal","k":"def"},
{"l":"spire/algebra/IsReal.html","n":"round","t":"def round(a: A): A","d":"spire/algebra/IsReal","k":"def"},
{"l":"spire/algebra/IsReal.html","n":"toDouble","t":"def toDouble(a: A): Double","d":"spire/algebra/IsReal","k":"def"},
{"l":"spire/algebra/IsReal.html","n":"toReal","t":"def toReal(a: A): Real","d":"spire/algebra/IsReal","k":"def"},
{"l":"spire/algebra/IsReal$.html","n":"IsReal","t":"object IsReal","d":"spire/algebra/IsReal$","k":"object"},
{"l":"spire/algebra/IsReal$.html","n":"apply","t":"def apply[@specialized A](implicit A: IsReal[A]): IsReal[A]","d":"spire/algebra/IsReal$","k":"def"},
{"l":"spire/algebra/LeftAction.html","n":"LeftAction","t":"trait LeftAction[@specialized(Int) P, G]","d":"spire/algebra/LeftAction","k":"trait"},
{"l":"spire/algebra/LeftAction.html","n":"actl","t":"def actl(g: G, p: P): P","d":"spire/algebra/LeftAction","k":"def"},
{"l":"spire/algebra/LeftAction$.html","n":"LeftAction","t":"object LeftAction","d":"spire/algebra/LeftAction$","k":"object"},
{"l":"spire/algebra/LeftAction$.html","n":"apply","t":"def apply[P, G](G: LeftAction[P, G]): LeftAction[P, G]","d":"spire/algebra/LeftAction$","k":"def"},
{"l":"spire/algebra/LeftModule.html","n":"LeftModule","t":"trait LeftModule[V, @specialized(Int, Long, Float, Double) R] extends AdditiveCommutativeGroup[V]","d":"spire/algebra/LeftModule","k":"trait"},
{"l":"spire/algebra/LeftModule.html","n":"scalar","t":"def scalar: Ring[R]","d":"spire/algebra/LeftModule","k":"def"},
{"l":"spire/algebra/LeftModule.html","n":"timesl","t":"def timesl(r: R, v: V): V","d":"spire/algebra/LeftModule","k":"def"},
{"l":"spire/algebra/LeftModule$.html","n":"LeftModule","t":"object LeftModule","d":"spire/algebra/LeftModule$","k":"object"},
{"l":"spire/algebra/LeftModule$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: LeftModule[V, R]): LeftModule[V, R]","d":"spire/algebra/LeftModule$","k":"def"},
{"l":"spire/algebra/MetricSpace.html","n":"MetricSpace","t":"trait MetricSpace[V, @specialized(Int, Long, Float, Double) R]","d":"spire/algebra/MetricSpace","k":"trait"},
{"l":"spire/algebra/MetricSpace.html","n":"distance","t":"def distance(v: V, w: V): R","d":"spire/algebra/MetricSpace","k":"def"},
{"l":"spire/algebra/MetricSpace$.html","n":"MetricSpace","t":"object MetricSpace extends MetricSpace0","d":"spire/algebra/MetricSpace$","k":"object"},
{"l":"spire/algebra/MetricSpace$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: MetricSpace[V, R]): MetricSpace[V, R]","d":"spire/algebra/MetricSpace$","k":"def"},
{"l":"spire/algebra/MetricSpace$.html","n":"closeTo","t":"def closeTo[V, @specialized(Int, Long, Float, Double) R](x: V, y: V, tolerance: Double)(implicit R: IsReal[R], metric: MetricSpace[V, R]): Boolean","d":"spire/algebra/MetricSpace$","k":"def"},
{"l":"spire/algebra/MetricSpace$.html","n":"distance","t":"def distance[V, @specialized(Int, Long, Float, Double) R](v: V, w: V)(implicit metric: MetricSpace[V, R]): R","d":"spire/algebra/MetricSpace$","k":"def"},
{"l":"spire/algebra/Multiplicative$.html","n":"Multiplicative","t":"object Multiplicative","d":"spire/algebra/Multiplicative$","k":"object"},
{"l":"spire/algebra/Multiplicative$.html","n":"apply","t":"def apply[A](s: Semigroup[A]): MultiplicativeSemigroup[A]","d":"spire/algebra/Multiplicative$","k":"def"},
{"l":"spire/algebra/Multiplicative$.html","n":"apply","t":"def apply[A](s: CommutativeSemigroup[A]): MultiplicativeCommutativeSemigroup[A]","d":"spire/algebra/Multiplicative$","k":"def"},
{"l":"spire/algebra/Multiplicative$.html","n":"apply","t":"def apply[A](m: Monoid[A]): MultiplicativeMonoid[A]","d":"spire/algebra/Multiplicative$","k":"def"},
{"l":"spire/algebra/Multiplicative$.html","n":"apply","t":"def apply[A](m: CommutativeMonoid[A]): MultiplicativeCommutativeMonoid[A]","d":"spire/algebra/Multiplicative$","k":"def"},
{"l":"spire/algebra/Multiplicative$.html","n":"apply","t":"def apply[A](g: Group[A]): MultiplicativeGroup[A]","d":"spire/algebra/Multiplicative$","k":"def"},
{"l":"spire/algebra/Multiplicative$.html","n":"apply","t":"def apply[A](g: CommutativeGroup[A]): MultiplicativeCommutativeGroup[A]","d":"spire/algebra/Multiplicative$","k":"def"},
{"l":"spire/algebra/MultiplicativeAction.html","n":"MultiplicativeAction","t":"trait MultiplicativeAction[@specialized(Int) P, G]","d":"spire/algebra/MultiplicativeAction","k":"trait"},
{"l":"spire/algebra/MultiplicativeAction.html","n":"gtimesl","t":"def gtimesl(g: G, p: P): P","d":"spire/algebra/MultiplicativeAction","k":"def"},
{"l":"spire/algebra/MultiplicativeAction.html","n":"gtimesr","t":"def gtimesr(p: P, g: G): P","d":"spire/algebra/MultiplicativeAction","k":"def"},
{"l":"spire/algebra/MultiplicativeAction.html","n":"multiplicative","t":"def multiplicative: Action[P, G]","d":"spire/algebra/MultiplicativeAction","k":"def"},
{"l":"spire/algebra/MultiplicativeAction$.html","n":"MultiplicativeAction","t":"object MultiplicativeAction","d":"spire/algebra/MultiplicativeAction$","k":"object"},
{"l":"spire/algebra/MultiplicativeAction$.html","n":"SignAction","t":"def SignAction[A](implicit A: AdditiveGroup[A]): MultiplicativeAction[A, Sign]","d":"spire/algebra/MultiplicativeAction$","k":"def"},
{"l":"spire/algebra/MultiplicativeTorsor.html","n":"MultiplicativeTorsor","t":"trait MultiplicativeTorsor[V, @specialized(Int, Long, Float, Double) R] extends MultiplicativeAction[V, R]","d":"spire/algebra/MultiplicativeTorsor","k":"trait"},
{"l":"spire/algebra/MultiplicativeTorsor.html","n":"fixOrigin","t":"def fixOrigin(id: V): MultiplicativeCommutativeGroup[V]","d":"spire/algebra/MultiplicativeTorsor","k":"def"},
{"l":"spire/algebra/MultiplicativeTorsor.html","n":"pdiv","t":"def pdiv(v: V, w: V): R","d":"spire/algebra/MultiplicativeTorsor","k":"def"},
{"l":"spire/algebra/MultiplicativeTorsor.html","n":"scalar","t":"def scalar: MultiplicativeCommutativeGroup[R]","d":"spire/algebra/MultiplicativeTorsor","k":"def"},
{"l":"spire/algebra/MultiplicativeTorsor$.html","n":"MultiplicativeTorsor","t":"object MultiplicativeTorsor","d":"spire/algebra/MultiplicativeTorsor$","k":"object"},
{"l":"spire/algebra/MultiplicativeTorsor$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: MultiplicativeTorsor[V, R]): MultiplicativeTorsor[V, R]","d":"spire/algebra/MultiplicativeTorsor$","k":"def"},
{"l":"spire/algebra/NRoot.html","n":"NRoot","t":"trait NRoot[@specialized(Double, Float, Int, Long) A]","d":"spire/algebra/NRoot","k":"trait"},
{"l":"spire/algebra/NRoot.html","n":"fpow","t":"def fpow(a: A, b: A): A","d":"spire/algebra/NRoot","k":"def"},
{"l":"spire/algebra/NRoot.html","n":"nroot","t":"def nroot(a: A, n: Int): A","d":"spire/algebra/NRoot","k":"def"},
{"l":"spire/algebra/NRoot.html","n":"sqrt","t":"def sqrt(a: A): A","d":"spire/algebra/NRoot","k":"def"},
{"l":"spire/algebra/NRoot$.html","n":"NRoot","t":"object NRoot","d":"spire/algebra/NRoot$","k":"object"},
{"l":"spire/algebra/NRoot$.html","n":"apply","t":"def apply[@specialized(Int, Long, Float, Double) A](implicit ev: NRoot[A]): NRoot[A]","d":"spire/algebra/NRoot$","k":"def"},
{"l":"spire/algebra/NormedVectorSpace.html","n":"NormedVectorSpace","t":"trait NormedVectorSpace[V, @specialized(Int, Long, Float, Double) F] extends VectorSpace[V, F] with MetricSpace[V, F]","d":"spire/algebra/NormedVectorSpace","k":"trait"},
{"l":"spire/algebra/NormedVectorSpace.html","n":"distance","t":"def distance(v: V, w: V): F","d":"spire/algebra/NormedVectorSpace","k":"def"},
{"l":"spire/algebra/NormedVectorSpace.html","n":"norm","t":"def norm(v: V): F","d":"spire/algebra/NormedVectorSpace","k":"def"},
{"l":"spire/algebra/NormedVectorSpace.html","n":"normalize","t":"def normalize(v: V): V","d":"spire/algebra/NormedVectorSpace","k":"def"},
{"l":"spire/algebra/NormedVectorSpace$.html","n":"NormedVectorSpace","t":"object NormedVectorSpace extends NormedVectorSpace0 with NormedVectorSpaceFunctions","d":"spire/algebra/NormedVectorSpace$","k":"object"},
{"l":"spire/algebra/NormedVectorSpace$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: NormedVectorSpace[V, R]): NormedVectorSpace[V, R]","d":"spire/algebra/NormedVectorSpace$","k":"def"},
{"l":"spire/algebra/RightAction.html","n":"RightAction","t":"trait RightAction[@specialized(Int) P, G]","d":"spire/algebra/RightAction","k":"trait"},
{"l":"spire/algebra/RightAction.html","n":"actr","t":"def actr(p: P, g: G): P","d":"spire/algebra/RightAction","k":"def"},
{"l":"spire/algebra/RightAction$.html","n":"RightAction","t":"object RightAction","d":"spire/algebra/RightAction$","k":"object"},
{"l":"spire/algebra/RightAction$.html","n":"apply","t":"def apply[P, G](G: RightAction[P, G]): RightAction[P, G]","d":"spire/algebra/RightAction$","k":"def"},
{"l":"spire/algebra/RightModule.html","n":"RightModule","t":"trait RightModule[V, @specialized(Int, Long, Float, Double) R] extends AdditiveCommutativeGroup[V]","d":"spire/algebra/RightModule","k":"trait"},
{"l":"spire/algebra/RightModule.html","n":"scalar","t":"def scalar: Ring[R]","d":"spire/algebra/RightModule","k":"def"},
{"l":"spire/algebra/RightModule.html","n":"timesr","t":"def timesr(v: V, r: R): V","d":"spire/algebra/RightModule","k":"def"},
{"l":"spire/algebra/RightModule$.html","n":"RightModule","t":"object RightModule","d":"spire/algebra/RightModule$","k":"object"},
{"l":"spire/algebra/RightModule$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: RightModule[V, R]): RightModule[V, R]","d":"spire/algebra/RightModule$","k":"def"},
{"l":"spire/algebra/RingAssociativeAlgebra.html","n":"RingAssociativeAlgebra","t":"trait RingAssociativeAlgebra[V, @specialized R] extends CModule[V, R] with Ring[V]","d":"spire/algebra/RingAssociativeAlgebra","k":"trait"},
{"l":"spire/algebra/RingAssociativeAlgebra$.html","n":"RingAssociativeAlgebra","t":"object RingAssociativeAlgebra","d":"spire/algebra/RingAssociativeAlgebra$","k":"object"},
{"l":"spire/algebra/RingAssociativeAlgebra$.html","n":"apply","t":"def apply[V, @specialized R](implicit V: RingAssociativeAlgebra[V, R]): RingAssociativeAlgebra[V, R]","d":"spire/algebra/RingAssociativeAlgebra$","k":"def"},
{"l":"spire/algebra/Torsor.html","n":"Torsor","t":"trait Torsor[V, @specialized(Int, Long, Float, Double) R] extends Action[V, R]","d":"spire/algebra/Torsor","k":"trait"},
{"l":"spire/algebra/Torsor.html","n":"diff","t":"def diff(v: V, w: V): R","d":"spire/algebra/Torsor","k":"def"},
{"l":"spire/algebra/Torsor.html","n":"fixOrigin","t":"def fixOrigin(id0: V): CommutativeGroup[V]","d":"spire/algebra/Torsor","k":"def"},
{"l":"spire/algebra/Torsor$.html","n":"Torsor","t":"object Torsor","d":"spire/algebra/Torsor$","k":"object"},
{"l":"spire/algebra/Torsor$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: Torsor[V, R]): Torsor[V, R]","d":"spire/algebra/Torsor$","k":"def"},
{"l":"spire/algebra/Trig.html","n":"Trig","t":"trait Trig[@specialized(Float, Double) A]","d":"spire/algebra/Trig","k":"trait"},
{"l":"spire/algebra/Trig.html","n":"acos","t":"def acos(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"asin","t":"def asin(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"atan","t":"def atan(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"atan2","t":"def atan2(y: A, x: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"cos","t":"def cos(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"cosh","t":"def cosh(x: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"e","t":"def e: A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"exp","t":"def exp(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"expm1","t":"def expm1(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"log","t":"def log(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"log1p","t":"def log1p(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"pi","t":"def pi: A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"sin","t":"def sin(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"sinh","t":"def sinh(x: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"tan","t":"def tan(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"tanh","t":"def tanh(x: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"toDegrees","t":"def toDegrees(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig.html","n":"toRadians","t":"def toRadians(a: A): A","d":"spire/algebra/Trig","k":"def"},
{"l":"spire/algebra/Trig$.html","n":"Trig","t":"object Trig","d":"spire/algebra/Trig$","k":"object"},
{"l":"spire/algebra/Trig$.html","n":"apply","t":"def apply[A](implicit t: Trig[A]): Trig[A]","d":"spire/algebra/Trig$","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain.html","n":"UniqueFactorizationDomain","t":"trait UniqueFactorizationDomain[@specialized(Byte, Short, Int, Long) A]","d":"spire/algebra/UniqueFactorizationDomain","k":"trait"},
{"l":"spire/algebra/UniqueFactorizationDomain.html","n":"factor","t":"def factor(a: A): Decomposition[A]","d":"spire/algebra/UniqueFactorizationDomain","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain.html","n":"isPrime","t":"def isPrime(a: A): Boolean","d":"spire/algebra/UniqueFactorizationDomain","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain$.html","n":"UniqueFactorizationDomain","t":"object UniqueFactorizationDomain","d":"spire/algebra/UniqueFactorizationDomain$","k":"object"},
{"l":"spire/algebra/UniqueFactorizationDomain$.html","n":"apply","t":"def apply[A](implicit ev: UniqueFactorizationDomain[A]): UniqueFactorizationDomain[A]","d":"spire/algebra/UniqueFactorizationDomain$","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain$.html","n":"uniqueFactorizationDomainFromIntegral","t":"def uniqueFactorizationDomainFromIntegral[A](implicit A: Integral[A]): UniqueFactorizationDomain[A]","d":"spire/algebra/UniqueFactorizationDomain$","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain$$Decomposition.html","n":"Decomposition","t":"trait Decomposition[@specialized(Byte, Short, Int, Long) A]","d":"spire/algebra/UniqueFactorizationDomain$$Decomposition","k":"trait"},
{"l":"spire/algebra/UniqueFactorizationDomain$$Decomposition.html","n":"elements","t":"def elements: Iterable[(A, Int)]","d":"spire/algebra/UniqueFactorizationDomain$$Decomposition","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain$$Decomposition.html","n":"unit","t":"def unit: A","d":"spire/algebra/UniqueFactorizationDomain$$Decomposition","k":"def"},
{"l":"spire/algebra/UniqueFactorizationDomain$$WrapDecomposition.html","n":"WrapDecomposition","t":"class WrapDecomposition[A](safeLongFactors: Factors)(implicit evidence$1: CommutativeRing[A]) extends Decomposition[A]","d":"spire/algebra/UniqueFactorizationDomain$$WrapDecomposition","k":"class"},
{"l":"spire/algebra/UniqueFactorizationDomain$$WrapDecomposition.html","n":"unit","t":"def unit: A","d":"spire/algebra/UniqueFactorizationDomain$$WrapDecomposition","k":"def"},
{"l":"spire/algebra/VectorSpace.html","n":"VectorSpace","t":"trait VectorSpace[V, @specialized(Int, Long, Float, Double) F] extends CModule[V, F]","d":"spire/algebra/VectorSpace","k":"trait"},
{"l":"spire/algebra/VectorSpace.html","n":"divr","t":"def divr(v: V, f: F): V","d":"spire/algebra/VectorSpace","k":"def"},
{"l":"spire/algebra/VectorSpace.html","n":"scalar","t":"def scalar: Field[F]","d":"spire/algebra/VectorSpace","k":"def"},
{"l":"spire/algebra/VectorSpace$.html","n":"VectorSpace","t":"object VectorSpace","d":"spire/algebra/VectorSpace$","k":"object"},
{"l":"spire/algebra/VectorSpace$.html","n":"apply","t":"def apply[V, @specialized(Int, Long, Float, Double) R](implicit V: VectorSpace[V, R]): VectorSpace[V, R]","d":"spire/algebra/VectorSpace$","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"ZAlgebra","t":"trait ZAlgebra[V] extends RingAssociativeAlgebra[V, Int] with Ring[V]","d":"spire/algebra/ZAlgebra","k":"trait"},
{"l":"spire/algebra/ZAlgebra.html","n":"negate","t":"def negate(v: V): V","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"one","t":"def one: V","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"plus","t":"def plus(v: V, w: V): V","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"scalar","t":"def scalar: CommutativeRing[Int]","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"times","t":"def times(v: V, w: V): V","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"timesl","t":"def timesl(r: Int, v: V): V","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"vector","t":"def vector: Ring[V]","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra.html","n":"zero","t":"def zero: V","d":"spire/algebra/ZAlgebra","k":"def"},
{"l":"spire/algebra/ZAlgebra$.html","n":"ZAlgebra","t":"object ZAlgebra","d":"spire/algebra/ZAlgebra$","k":"object"},
{"l":"spire/algebra/ZAlgebra$.html","n":"apply","t":"def apply[A](implicit vector0: Ring[A], scalar0: CommutativeRing[Int]): ZAlgebra[A]","d":"spire/algebra/ZAlgebra$","k":"def"},
{"l":"spire/algebra/free.html","n":"spire.algebra.free","t":"package spire.algebra.free","d":"spire/algebra/free","k":"package"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"FreeAbGroup","t":"class FreeAbGroup[A] extends AnyVal","d":"spire/algebra/free/FreeAbGroup","k":"class"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"inverse","t":"def inverse: FreeAbGroup[A]","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"run","t":"def run[B](f: A => B)(implicit B: CommutativeGroup[B]): B","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"runMonoid","t":"def runMonoid[B](f: A => B)(implicit B: CommutativeMonoid[B]): Option[B]","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"runSemigroup","t":"def runSemigroup[B](f: A => B)(implicit B: CommutativeSemigroup[B]): Option[B]","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"split","t":"def split[B](f: A => B)(implicit B: CommutativeMonoid[B]): (B, B)","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"splitSemigroup","t":"def splitSemigroup[B](f: A => B)(implicit B: CommutativeSemigroup[B]): (Option[B], Option[B])","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"terms","t":"val terms: Map[A, Int]","d":"spire/algebra/free/FreeAbGroup","k":"val"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"|+|","t":"def |+|(rhs: FreeAbGroup[A]): FreeAbGroup[A]","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup.html","n":"|-|","t":"def |-|(rhs: FreeAbGroup[A]): FreeAbGroup[A]","d":"spire/algebra/free/FreeAbGroup","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup$.html","n":"FreeAbGroup","t":"object FreeAbGroup","d":"spire/algebra/free/FreeAbGroup$","k":"object"},
{"l":"spire/algebra/free/FreeAbGroup$.html","n":"FreeAbGroupGroup","t":"def FreeAbGroupGroup[A]: CommutativeGroup[FreeAbGroup[A]]","d":"spire/algebra/free/FreeAbGroup$","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup$.html","n":"apply","t":"def apply[A](a: A): FreeAbGroup[A]","d":"spire/algebra/free/FreeAbGroup$","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup$.html","n":"id","t":"def id[A]: FreeAbGroup[A]","d":"spire/algebra/free/FreeAbGroup$","k":"def"},
{"l":"spire/algebra/free/FreeAbGroup$.html","n":"lift","t":"def lift[A](a: A): FreeAbGroup[A]","d":"spire/algebra/free/FreeAbGroup$","k":"def"},
{"l":"spire/algebra/free/FreeGroup.html","n":"FreeGroup","t":"class FreeGroup[A] extends AnyVal","d":"spire/algebra/free/FreeGroup","k":"class"},
{"l":"spire/algebra/free/FreeGroup.html","n":"inverse","t":"def inverse: FreeGroup[A]","d":"spire/algebra/free/FreeGroup","k":"def"},
{"l":"spire/algebra/free/FreeGroup.html","n":"run","t":"def run[B](f: A => B)(implicit B: Group[B]): B","d":"spire/algebra/free/FreeGroup","k":"def"},
{"l":"spire/algebra/free/FreeGroup.html","n":"terms","t":"val terms: Vector[Either[A, A]]","d":"spire/algebra/free/FreeGroup","k":"val"},
{"l":"spire/algebra/free/FreeGroup.html","n":"|+|","t":"def |+|(rhs: FreeGroup[A]): FreeGroup[A]","d":"spire/algebra/free/FreeGroup","k":"def"},
{"l":"spire/algebra/free/FreeGroup.html","n":"|-|","t":"def |-|(rhs: FreeGroup[A]): FreeGroup[A]","d":"spire/algebra/free/FreeGroup","k":"def"},
{"l":"spire/algebra/free/FreeGroup$.html","n":"FreeGroup","t":"object FreeGroup","d":"spire/algebra/free/FreeGroup$","k":"object"},
{"l":"spire/algebra/free/FreeGroup$.html","n":"FreeGroupGroup","t":"def FreeGroupGroup[A]: Group[FreeGroup[A]]","d":"spire/algebra/free/FreeGroup$","k":"def"},
{"l":"spire/algebra/free/FreeGroup$.html","n":"apply","t":"def apply[A](a: A): FreeGroup[A]","d":"spire/algebra/free/FreeGroup$","k":"def"},
{"l":"spire/algebra/free/FreeGroup$.html","n":"id","t":"def id[A]: FreeGroup[A]","d":"spire/algebra/free/FreeGroup$","k":"def"},
{"l":"spire/algebra/free/FreeGroup$.html","n":"lift","t":"def lift[A](a: A): FreeGroup[A]","d":"spire/algebra/free/FreeGroup$","k":"def"},
{"l":"spire/algebra/free/FreeMonoid.html","n":"FreeMonoid","t":"class FreeMonoid[A] extends AnyVal","d":"spire/algebra/free/FreeMonoid","k":"class"},
{"l":"spire/algebra/free/FreeMonoid.html","n":"run","t":"def run[B](f: A => B)(implicit B: Monoid[B]): B","d":"spire/algebra/free/FreeMonoid","k":"def"},
{"l":"spire/algebra/free/FreeMonoid.html","n":"runSemigroup","t":"def runSemigroup[B](f: A => B)(implicit B: Semigroup[B]): Option[B]","d":"spire/algebra/free/FreeMonoid","k":"def"},
{"l":"spire/algebra/free/FreeMonoid.html","n":"terms","t":"val terms: List[A]","d":"spire/algebra/free/FreeMonoid","k":"val"},
{"l":"spire/algebra/free/FreeMonoid.html","n":"|+|","t":"def |+|(rhs: FreeMonoid[A]): FreeMonoid[A]","d":"spire/algebra/free/FreeMonoid","k":"def"},
{"l":"spire/algebra/free/FreeMonoid$.html","n":"FreeMonoid","t":"object FreeMonoid","d":"spire/algebra/free/FreeMonoid$","k":"object"},
{"l":"spire/algebra/free/FreeMonoid$.html","n":"FreeMonoidMonoid","t":"def FreeMonoidMonoid[A]: Monoid[FreeMonoid[A]]","d":"spire/algebra/free/FreeMonoid$","k":"def"},
{"l":"spire/algebra/free/FreeMonoid$.html","n":"apply","t":"def apply[A](a: A): FreeMonoid[A]","d":"spire/algebra/free/FreeMonoid$","k":"def"},
{"l":"spire/algebra/free/FreeMonoid$.html","n":"empty","t":"def empty[A]: FreeMonoid[A]","d":"spire/algebra/free/FreeMonoid$","k":"def"},
{"l":"spire/algebra/free/FreeMonoid$.html","n":"lift","t":"def lift[A](a: A): FreeMonoid[A]","d":"spire/algebra/free/FreeMonoid$","k":"def"},
{"l":"spire/algebra/lattice.html","n":"spire.algebra.lattice","t":"package spire.algebra.lattice","d":"spire/algebra/lattice","k":"package"},
{"l":"spire/algebra/lattice.html","n":"BoundedJoinSemilattice","t":"type BoundedJoinSemilattice[A] = BoundedJoinSemilattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"BoundedJoinSemilattice","t":"val BoundedJoinSemilattice: BoundedJoinSemilattice","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"BoundedLattice","t":"type BoundedLattice[A] = BoundedLattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"BoundedLattice","t":"val BoundedLattice: BoundedLattice","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"BoundedMeetSemilattice","t":"type BoundedMeetSemilattice[A] = BoundedMeetSemilattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"BoundedMeetSemilattice","t":"val BoundedMeetSemilattice: BoundedMeetSemilattice","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"DeMorgan","t":"type DeMorgan[A] = DeMorgan[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"DeMorgan","t":"val DeMorgan: DeMorgan","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"Heyting","t":"type Heyting[A] = Heyting[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"Heyting","t":"val Heyting: Heyting","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"JoinSemilattice","t":"type JoinSemilattice[A] = JoinSemilattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"JoinSemilattice","t":"val JoinSemilattice: JoinSemilattice","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"Lattice","t":"type Lattice[A] = Lattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"Lattice","t":"val Lattice: Lattice","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"Logic","t":"type Logic[A] = Logic[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"Logic","t":"val Logic: Logic","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"MeetSemilattice","t":"type MeetSemilattice[A] = MeetSemilattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/lattice.html","n":"MeetSemilattice","t":"val MeetSemilattice: MeetSemilattice","d":"spire/algebra/lattice","k":"val"},
{"l":"spire/algebra/lattice.html","n":"MinMaxLattice","t":"type MinMaxLattice[A] = MinMaxLattice[A]","d":"spire/algebra/lattice","k":"type"},
{"l":"spire/algebra/partial.html","n":"spire.algebra.partial","t":"package spire.algebra.partial","d":"spire/algebra/partial","k":"package"},
{"l":"spire/algebra/partial/Groupoid.html","n":"Groupoid","t":"trait Groupoid[A] extends Semigroupoid[A]","d":"spire/algebra/partial/Groupoid","k":"trait"},
{"l":"spire/algebra/partial/Groupoid.html","n":"inverse","t":"def inverse(a: A): A","d":"spire/algebra/partial/Groupoid","k":"def"},
{"l":"spire/algebra/partial/Groupoid.html","n":"isId","t":"def isId(a: A)(implicit ev: Eq[A]): Boolean","d":"spire/algebra/partial/Groupoid","k":"def"},
{"l":"spire/algebra/partial/Groupoid.html","n":"leftId","t":"def leftId(a: A): A","d":"spire/algebra/partial/Groupoid","k":"def"},
{"l":"spire/algebra/partial/Groupoid.html","n":"opInverseIsDefined","t":"def opInverseIsDefined(x: A, y: A): Boolean","d":"spire/algebra/partial/Groupoid","k":"def"},
{"l":"spire/algebra/partial/Groupoid.html","n":"partialOpInverse","t":"def partialOpInverse(x: A, y: A): Opt[A]","d":"spire/algebra/partial/Groupoid","k":"def"},
{"l":"spire/algebra/partial/Groupoid.html","n":"rightId","t":"def rightId(a: A): A","d":"spire/algebra/partial/Groupoid","k":"def"},
{"l":"spire/algebra/partial/Groupoid$.html","n":"Groupoid","t":"object Groupoid extends GroupoidLowPriority","d":"spire/algebra/partial/Groupoid$","k":"object"},
{"l":"spire/algebra/partial/Groupoid$.html","n":"apply","t":"def apply[A](implicit g: Groupoid[A]): Groupoid[A]","d":"spire/algebra/partial/Groupoid$","k":"def"},
{"l":"spire/algebra/partial/GroupoidLowPriority.html","n":"GroupoidLowPriority","t":"trait GroupoidLowPriority","d":"spire/algebra/partial/GroupoidLowPriority","k":"trait"},
{"l":"spire/algebra/partial/GroupoidLowPriority.html","n":"fromGroup","t":"def fromGroup[A](implicit group: Group[A]): Groupoid[A]","d":"spire/algebra/partial/GroupoidLowPriority","k":"def"},
{"l":"spire/algebra/partial/LeftPartialAction.html","n":"LeftPartialAction","t":"trait LeftPartialAction[P, G]","d":"spire/algebra/partial/LeftPartialAction","k":"trait"},
{"l":"spire/algebra/partial/LeftPartialAction.html","n":"actlIsDefined","t":"def actlIsDefined(g: G, p: P): Boolean","d":"spire/algebra/partial/LeftPartialAction","k":"def"},
{"l":"spire/algebra/partial/LeftPartialAction.html","n":"partialActl","t":"def partialActl(g: G, p: P): Opt[P]","d":"spire/algebra/partial/LeftPartialAction","k":"def"},
{"l":"spire/algebra/partial/LeftPartialAction$.html","n":"LeftPartialAction","t":"object LeftPartialAction","d":"spire/algebra/partial/LeftPartialAction$","k":"object"},
{"l":"spire/algebra/partial/LeftPartialAction$.html","n":"apply","t":"def apply[P, G](implicit G: LeftPartialAction[P, G]): LeftPartialAction[P, G]","d":"spire/algebra/partial/LeftPartialAction$","k":"def"},
{"l":"spire/algebra/partial/LeftPartialAction$.html","n":"fromLeftAction","t":"def fromLeftAction[P, G](implicit G: LeftAction[P, G]): LeftPartialAction[P, G]","d":"spire/algebra/partial/LeftPartialAction$","k":"def"},
{"l":"spire/algebra/partial/PartialAction.html","n":"PartialAction","t":"trait PartialAction[P, G] extends LeftPartialAction[P, G] with RightPartialAction[P, G]","d":"spire/algebra/partial/PartialAction","k":"trait"},
{"l":"spire/algebra/partial/PartialAction$.html","n":"PartialAction","t":"object PartialAction","d":"spire/algebra/partial/PartialAction$","k":"object"},
{"l":"spire/algebra/partial/PartialAction$.html","n":"apply","t":"def apply[P, G](implicit G: PartialAction[P, G]): PartialAction[P, G]","d":"spire/algebra/partial/PartialAction$","k":"def"},
{"l":"spire/algebra/partial/PartialAction$.html","n":"fromAction","t":"def fromAction[P, G](implicit G: Action[P, G]): PartialAction[P, G]","d":"spire/algebra/partial/PartialAction$","k":"def"},
{"l":"spire/algebra/partial/RightPartialAction.html","n":"RightPartialAction","t":"trait RightPartialAction[P, G]","d":"spire/algebra/partial/RightPartialAction","k":"trait"},
{"l":"spire/algebra/partial/RightPartialAction.html","n":"actrIsDefined","t":"def actrIsDefined(p: P, g: G): Boolean","d":"spire/algebra/partial/RightPartialAction","k":"def"},
{"l":"spire/algebra/partial/RightPartialAction.html","n":"partialActr","t":"def partialActr(p: P, g: G): Opt[P]","d":"spire/algebra/partial/RightPartialAction","k":"def"},
{"l":"spire/algebra/partial/RightPartialAction$.html","n":"RightPartialAction","t":"object RightPartialAction","d":"spire/algebra/partial/RightPartialAction$","k":"object"},
{"l":"spire/algebra/partial/RightPartialAction$.html","n":"apply","t":"def apply[P, G](implicit G: RightPartialAction[P, G]): RightPartialAction[P, G]","d":"spire/algebra/partial/RightPartialAction$","k":"def"},
{"l":"spire/algebra/partial/RightPartialAction$.html","n":"fromRightAction","t":"def fromRightAction[P, G](implicit G: RightAction[P, G]): RightPartialAction[P, G]","d":"spire/algebra/partial/RightPartialAction$","k":"def"},
{"l":"spire/algebra/partial/Semigroupoid.html","n":"Semigroupoid","t":"trait Semigroupoid[A]","d":"spire/algebra/partial/Semigroupoid","k":"trait"},
{"l":"spire/algebra/partial/Semigroupoid.html","n":"opIsDefined","t":"def opIsDefined(x: A, y: A): Boolean","d":"spire/algebra/partial/Semigroupoid","k":"def"},
{"l":"spire/algebra/partial/Semigroupoid.html","n":"partialOp","t":"def partialOp(x: A, y: A): Opt[A]","d":"spire/algebra/partial/Semigroupoid","k":"def"},
{"l":"spire/algebra/partial/Semigroupoid$.html","n":"Semigroupoid","t":"object Semigroupoid extends SemigroupoidLowPriority","d":"spire/algebra/partial/Semigroupoid$","k":"object"},
{"l":"spire/algebra/partial/Semigroupoid$.html","n":"apply","t":"def apply[A](implicit s: Semigroupoid[A]): Semigroupoid[A]","d":"spire/algebra/partial/Semigroupoid$","k":"def"},
{"l":"spire/algebra/partial/SemigroupoidLowPriority.html","n":"SemigroupoidLowPriority","t":"trait SemigroupoidLowPriority","d":"spire/algebra/partial/SemigroupoidLowPriority","k":"trait"},
{"l":"spire/algebra/partial/SemigroupoidLowPriority.html","n":"fromSemigroup","t":"def fromSemigroup[A](implicit semigroup: Semigroup[A]): Semigroupoid[A]","d":"spire/algebra/partial/SemigroupoidLowPriority","k":"def"},
{"l":"spire/laws.html","n":"spire.laws","t":"package spire.laws","d":"spire/laws","k":"package"},
{"l":"spire/laws.html","n":"DeMorganLaws","t":"type DeMorganLaws[A] = DeMorganLaws[A]","d":"spire/laws","k":"type"},
{"l":"spire/laws.html","n":"DeMorganLaws","t":"val DeMorganLaws: DeMorganLaws","d":"spire/laws","k":"val"},
{"l":"spire/laws.html","n":"PredicateFromMonoid","t":"def PredicateFromMonoid[A : Eq](implicit evidence$1: Eq[A], A: AdditiveMonoid[A]): Predicate[A]","d":"spire/laws","k":"def"},
{"l":"spire/laws.html","n":"propertiesToProp","t":"def propertiesToProp(properties: Properties): Prop","d":"spire/laws","k":"def"},
{"l":"spire/laws/ActionLaws$.html","n":"ActionLaws","t":"object ActionLaws","d":"spire/laws/ActionLaws$","k":"object"},
{"l":"spire/laws/ActionLaws$.html","n":"apply","t":"def apply[G : Arbitrary, A : Arbitrary]: ActionLaws[G, A]","d":"spire/laws/ActionLaws$","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"ActionLaws","t":"trait ActionLaws[G, A] extends Laws","d":"spire/laws/ActionLaws","k":"trait"},
{"l":"spire/laws/ActionLaws.html","n":"ArbA","t":"def ArbA: Arbitrary[A]","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"EquA","t":"def EquA: Eq[A]","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"additiveMonoidAction","t":"def additiveMonoidAction(implicit G: AdditiveAction[A, G], G0: AdditiveMonoid[G]): AdditiveProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"groupAction","t":"def groupAction(implicit G: Action[A, G], G0: Group[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"leftMonoidAction","t":"def leftMonoidAction(implicit G: LeftAction[A, G], G0: Monoid[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"leftSemigroupAction","t":"def leftSemigroupAction(implicit G: LeftAction[A, G], G0: Semigroup[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"monoidAction","t":"def monoidAction(implicit G: Action[A, G], G0: Monoid[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"multiplicativeMonoidAction","t":"def multiplicativeMonoidAction(implicit G: MultiplicativeAction[A, G], G0: MultiplicativeMonoid[G]): MultiplicativeProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"rightMonoidAction","t":"def rightMonoidAction(implicit G: RightAction[A, G], G0: Monoid[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"rightSemigroupAction","t":"def rightSemigroupAction(implicit G: RightAction[A, G], G0: Semigroup[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws.html","n":"scalarLaws","t":"val scalarLaws: GroupLaws[G]","d":"spire/laws/ActionLaws","k":"val"},
{"l":"spire/laws/ActionLaws.html","n":"semigroupAction","t":"def semigroupAction(implicit G: Action[A, G], G0: Semigroup[G]): ActionProperties","d":"spire/laws/ActionLaws","k":"def"},
{"l":"spire/laws/ActionLaws$ActionProperties.html","n":"ActionProperties","t":"class ActionProperties(val name: String, val sl: GroupLaws[G] => RuleSet, val parents: Seq[ActionProperties], val props: (String, Prop)*) extends RuleSet","d":"spire/laws/ActionLaws$ActionProperties","k":"class"},
{"l":"spire/laws/ActionLaws$ActionProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/ActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/ActionLaws$ActionProperties.html","n":"name","t":"val name: String","d":"spire/laws/ActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/ActionLaws$ActionProperties.html","n":"parents","t":"val parents: Seq[ActionProperties]","d":"spire/laws/ActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/ActionLaws$ActionProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/ActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/ActionLaws$ActionProperties.html","n":"sl","t":"val sl: GroupLaws[G] => RuleSet","d":"spire/laws/ActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/ActionLaws$AdditiveProperties.html","n":"AdditiveProperties","t":"class AdditiveProperties(val base: ActionProperties, val parent: Option[AdditiveProperties], val props: (String, Prop)*) extends RuleSet with HasOneParent","d":"spire/laws/ActionLaws$AdditiveProperties","k":"class"},
{"l":"spire/laws/ActionLaws$AdditiveProperties.html","n":"base","t":"val base: ActionProperties","d":"spire/laws/ActionLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/ActionLaws$AdditiveProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/ActionLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/ActionLaws$AdditiveProperties.html","n":"name","t":"val name: String","d":"spire/laws/ActionLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/ActionLaws$AdditiveProperties.html","n":"parent","t":"val parent: Option[AdditiveProperties]","d":"spire/laws/ActionLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/ActionLaws$AdditiveProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/ActionLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/ActionLaws$MultiplicativeProperties.html","n":"MultiplicativeProperties","t":"class MultiplicativeProperties(val base: ActionProperties, val parent: Option[MultiplicativeProperties], val props: (String, Prop)*) extends RuleSet with HasOneParent","d":"spire/laws/ActionLaws$MultiplicativeProperties","k":"class"},
{"l":"spire/laws/ActionLaws$MultiplicativeProperties.html","n":"base","t":"val base: ActionProperties","d":"spire/laws/ActionLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/ActionLaws$MultiplicativeProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/ActionLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/ActionLaws$MultiplicativeProperties.html","n":"name","t":"val name: String","d":"spire/laws/ActionLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/ActionLaws$MultiplicativeProperties.html","n":"parent","t":"val parent: Option[MultiplicativeProperties]","d":"spire/laws/ActionLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/ActionLaws$MultiplicativeProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/ActionLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/BaseLaws$.html","n":"BaseLaws","t":"object BaseLaws","d":"spire/laws/BaseLaws$","k":"object"},
{"l":"spire/laws/BaseLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: BaseLaws[A]","d":"spire/laws/BaseLaws$","k":"def"},
{"l":"spire/laws/BaseLaws.html","n":"BaseLaws","t":"trait BaseLaws[A] extends Laws","d":"spire/laws/BaseLaws","k":"trait"},
{"l":"spire/laws/BaseLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/BaseLaws","k":"def"},
{"l":"spire/laws/BaseLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/BaseLaws","k":"def"},
{"l":"spire/laws/BaseLaws.html","n":"metricSpace","t":"def metricSpace[R](implicit MSA: MetricSpace[A, R], SR: Signed[R], OR: Order[R], ASR: AdditiveSemigroup[R]): SimpleRuleSet","d":"spire/laws/BaseLaws","k":"def"},
{"l":"spire/laws/BaseLaws.html","n":"uniqueFactorizationDomain","t":"def uniqueFactorizationDomain(implicit A: UniqueFactorizationDomain[A], RA: CommutativeRing[A]): SimpleRuleSet","d":"spire/laws/BaseLaws","k":"def"},
{"l":"spire/laws/CombinationLaws$.html","n":"CombinationLaws","t":"object CombinationLaws","d":"spire/laws/CombinationLaws$","k":"object"},
{"l":"spire/laws/CombinationLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: CombinationLaws[A]","d":"spire/laws/CombinationLaws$","k":"def"},
{"l":"spire/laws/CombinationLaws.html","n":"CombinationLaws","t":"trait CombinationLaws[A] extends Laws","d":"spire/laws/CombinationLaws","k":"trait"},
{"l":"spire/laws/CombinationLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/CombinationLaws","k":"def"},
{"l":"spire/laws/CombinationLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/CombinationLaws","k":"def"},
{"l":"spire/laws/CombinationLaws.html","n":"signedAdditiveAbGroup","t":"def signedAdditiveAbGroup(implicit orderA: Order[A], signedA: Signed[A], additiveAbGroupA: AdditiveCommutativeGroup[A]): DefaultRuleSet","d":"spire/laws/CombinationLaws","k":"def"},
{"l":"spire/laws/CombinationLaws.html","n":"signedAdditiveCMonoid","t":"def signedAdditiveCMonoid(implicit orderA: Order[A], signedA: Signed[A], additiveCMonoidA: AdditiveCommutativeMonoid[A]): DefaultRuleSet","d":"spire/laws/CombinationLaws","k":"def"},
{"l":"spire/laws/CombinationLaws.html","n":"signedGCDRing","t":"def signedGCDRing(implicit orderA: Order[A], signedA: Signed[A], gcdRingA: GCDRing[A]): DefaultRuleSet","d":"spire/laws/CombinationLaws","k":"def"},
{"l":"spire/laws/GroupLaws$.html","n":"GroupLaws","t":"object GroupLaws","d":"spire/laws/GroupLaws$","k":"object"},
{"l":"spire/laws/GroupLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: GroupLaws[A]","d":"spire/laws/GroupLaws$","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"GroupLaws","t":"trait GroupLaws[A] extends Laws","d":"spire/laws/GroupLaws","k":"trait"},
{"l":"spire/laws/GroupLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"abGroup","t":"def abGroup(implicit A: CommutativeGroup[A]): GroupProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"additiveAbGroup","t":"def additiveAbGroup(implicit A: AdditiveCommutativeGroup[A]): AdditiveProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"additiveCMonoid","t":"def additiveCMonoid(implicit A: AdditiveCommutativeMonoid[A]): AdditiveProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"additiveGroup","t":"def additiveGroup(implicit A: AdditiveGroup[A]): AdditiveProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"additiveMonoid","t":"def additiveMonoid(implicit A: AdditiveMonoid[A]): AdditiveProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"additiveSemigroup","t":"def additiveSemigroup(implicit A: AdditiveSemigroup[A]): AdditiveProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"cMonoid","t":"def cMonoid(implicit A: CommutativeMonoid[A]): GroupProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"group","t":"def group(implicit A: Group[A]): GroupProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"monoid","t":"def monoid(implicit A: Monoid[A]): GroupProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws.html","n":"semigroup","t":"def semigroup(implicit A: Semigroup[A]): GroupProperties","d":"spire/laws/GroupLaws","k":"def"},
{"l":"spire/laws/GroupLaws$AdditiveProperties.html","n":"AdditiveProperties","t":"class AdditiveProperties(val base: GroupProperties, val parent: Option[AdditiveProperties], val props: (String, Prop)*) extends RuleSet with HasOneParent","d":"spire/laws/GroupLaws$AdditiveProperties","k":"class"},
{"l":"spire/laws/GroupLaws$AdditiveProperties.html","n":"base","t":"val base: GroupProperties","d":"spire/laws/GroupLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/GroupLaws$AdditiveProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/GroupLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/GroupLaws$AdditiveProperties.html","n":"name","t":"val name: String","d":"spire/laws/GroupLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/GroupLaws$AdditiveProperties.html","n":"parent","t":"val parent: Option[AdditiveProperties]","d":"spire/laws/GroupLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/GroupLaws$AdditiveProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/GroupLaws$AdditiveProperties","k":"val"},
{"l":"spire/laws/GroupLaws$GroupProperties.html","n":"GroupProperties","t":"class GroupProperties(name: String, parent: Option[GroupProperties], props: (String, Prop)*) extends DefaultRuleSet","d":"spire/laws/GroupLaws$GroupProperties","k":"class"},
{"l":"spire/laws/InvalidTestException.html","n":"InvalidTestException","t":"class InvalidTestException extends Exception","d":"spire/laws/InvalidTestException","k":"class"},
{"l":"spire/laws/InvalidTestException$.html","n":"InvalidTestException","t":"object InvalidTestException","d":"spire/laws/InvalidTestException$","k":"object"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, P](f: A1 => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, P](f: (A1, A2) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, A3, P](f: (A1, A2, A3) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty, a3: Arbitrary[A3], s3: Shrink[A3], pp3: A3 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, A3, A4, P](f: (A1, A2, A3, A4) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty, a3: Arbitrary[A3], s3: Shrink[A3], pp3: A3 => Pretty, a4: Arbitrary[A4], s4: Shrink[A4], pp4: A4 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, A3, A4, A5, P](f: (A1, A2, A3, A4, A5) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty, a3: Arbitrary[A3], s3: Shrink[A3], pp3: A3 => Pretty, a4: Arbitrary[A4], s4: Shrink[A4], pp4: A4 => Pretty, a5: Arbitrary[A5], s5: Shrink[A5], pp5: A5 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, A3, A4, A5, A6, P](f: (A1, A2, A3, A4, A5, A6) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty, a3: Arbitrary[A3], s3: Shrink[A3], pp3: A3 => Pretty, a4: Arbitrary[A4], s4: Shrink[A4], pp4: A4 => Pretty, a5: Arbitrary[A5], s5: Shrink[A5], pp5: A5 => Pretty, a6: Arbitrary[A6], s6: Shrink[A6], pp6: A6 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, A3, A4, A5, A6, A7, P](f: (A1, A2, A3, A4, A5, A6, A7) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty, a3: Arbitrary[A3], s3: Shrink[A3], pp3: A3 => Pretty, a4: Arbitrary[A4], s4: Shrink[A4], pp4: A4 => Pretty, a5: Arbitrary[A5], s5: Shrink[A5], pp5: A5 => Pretty, a6: Arbitrary[A6], s6: Shrink[A6], pp6: A6 => Pretty, a7: Arbitrary[A7], s7: Shrink[A7], pp7: A7 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvalidTestException$.html","n":"forAllSafe","t":"def forAllSafe[A1, A2, A3, A4, A5, A6, A7, A8, P](f: (A1, A2, A3, A4, A5, A6, A7, A8) => P)(implicit p: P => Prop, a1: Arbitrary[A1], s1: Shrink[A1], pp1: A1 => Pretty, a2: Arbitrary[A2], s2: Shrink[A2], pp2: A2 => Pretty, a3: Arbitrary[A3], s3: Shrink[A3], pp3: A3 => Pretty, a4: Arbitrary[A4], s4: Shrink[A4], pp4: A4 => Pretty, a5: Arbitrary[A5], s5: Shrink[A5], pp5: A5 => Pretty, a6: Arbitrary[A6], s6: Shrink[A6], pp6: A6 => Pretty, a7: Arbitrary[A7], s7: Shrink[A7], pp7: A7 => Pretty, a8: Arbitrary[A8], s8: Shrink[A8], pp8: A8 => Pretty): Prop","d":"spire/laws/InvalidTestException$","k":"def"},
{"l":"spire/laws/InvolutionLaws$.html","n":"InvolutionLaws","t":"object InvolutionLaws","d":"spire/laws/InvolutionLaws$","k":"object"},
{"l":"spire/laws/InvolutionLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: InvolutionLaws[A]","d":"spire/laws/InvolutionLaws$","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"InvolutionLaws","t":"trait InvolutionLaws[A] extends Laws","d":"spire/laws/InvolutionLaws","k":"trait"},
{"l":"spire/laws/InvolutionLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"involution","t":"def involution(implicit A: Involution[A]): DefaultRuleSet","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"involutionAlgebra","t":"def involutionAlgebra[R : Arbitrary](implicit evidence$3: Arbitrary[R], A: Involution[A], R: Involution[R], algebra: RingAssociativeAlgebra[A, R]): DefaultRuleSet","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"involutionMultiplicativeMonoid","t":"def involutionMultiplicativeMonoid(implicit A: Involution[A], mm: MultiplicativeMonoid[A]): DefaultRuleSet","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"involutionMultiplicativeSemigroup","t":"def involutionMultiplicativeSemigroup(implicit A: Involution[A], mm: MultiplicativeSemigroup[A]): DefaultRuleSet","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/InvolutionLaws.html","n":"involutionRing","t":"def involutionRing(implicit A: Involution[A], ringA: Ring[A]): DefaultRuleSet","d":"spire/laws/InvolutionLaws","k":"def"},
{"l":"spire/laws/LatticeLaws$.html","n":"LatticeLaws","t":"object LatticeLaws","d":"spire/laws/LatticeLaws$","k":"object"},
{"l":"spire/laws/LatticeLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: LatticeLaws[A]","d":"spire/laws/LatticeLaws$","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"LatticeLaws","t":"trait LatticeLaws[A] extends Laws","d":"spire/laws/LatticeLaws","k":"trait"},
{"l":"spire/laws/LatticeLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"boundedAboveLattice","t":"def boundedAboveLattice(implicit A: Lattice[A] & BoundedMeetSemilattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"boundedBelowLattice","t":"def boundedBelowLattice(implicit A: Lattice[A] & BoundedJoinSemilattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"boundedJoinSemilattice","t":"def boundedJoinSemilattice(implicit A: BoundedJoinSemilattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"boundedLattice","t":"def boundedLattice(implicit A: BoundedLattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"boundedMeetSemilattice","t":"def boundedMeetSemilattice(implicit A: BoundedMeetSemilattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"joinSemilattice","t":"def joinSemilattice(implicit A: JoinSemilattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"lattice","t":"def lattice(implicit A: Lattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws.html","n":"meetSemilattice","t":"def meetSemilattice(implicit A: MeetSemilattice[A]): LatticeProperties","d":"spire/laws/LatticeLaws","k":"def"},
{"l":"spire/laws/LatticeLaws$LatticeProperties.html","n":"LatticeProperties","t":"class LatticeProperties(val name: String, val parents: Seq[LatticeProperties], val props: (String, Prop)*) extends RuleSet","d":"spire/laws/LatticeLaws$LatticeProperties","k":"class"},
{"l":"spire/laws/LatticeLaws$LatticeProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/LatticeLaws$LatticeProperties","k":"val"},
{"l":"spire/laws/LatticeLaws$LatticeProperties.html","n":"name","t":"val name: String","d":"spire/laws/LatticeLaws$LatticeProperties","k":"val"},
{"l":"spire/laws/LatticeLaws$LatticeProperties.html","n":"parents","t":"val parents: Seq[LatticeProperties]","d":"spire/laws/LatticeLaws$LatticeProperties","k":"val"},
{"l":"spire/laws/LatticeLaws$LatticeProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/LatticeLaws$LatticeProperties","k":"val"},
{"l":"spire/laws/LatticePartialOrderLaws$.html","n":"LatticePartialOrderLaws","t":"object LatticePartialOrderLaws","d":"spire/laws/LatticePartialOrderLaws$","k":"object"},
{"l":"spire/laws/LatticePartialOrderLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: LatticePartialOrderLaws[A]","d":"spire/laws/LatticePartialOrderLaws$","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"LatticePartialOrderLaws","t":"trait LatticePartialOrderLaws[A] extends Laws","d":"spire/laws/LatticePartialOrderLaws","k":"trait"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"boundedAboveLatticePartialOrder","t":"def boundedAboveLatticePartialOrder(implicit A: Lattice[A] & BoundedMeetSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"boundedBelowLatticePartialOrder","t":"def boundedBelowLatticePartialOrder(implicit A: Lattice[A] & BoundedJoinSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"boundedJoinSemilatticePartialOrder","t":"def boundedJoinSemilatticePartialOrder(implicit A: BoundedJoinSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"boundedLatticePartialOrder","t":"def boundedLatticePartialOrder(implicit A: BoundedLattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"boundedMeetSemilatticePartialOrder","t":"def boundedMeetSemilatticePartialOrder(implicit A: BoundedMeetSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"joinSemilatticePartialOrder","t":"def joinSemilatticePartialOrder(implicit A: JoinSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"latticePartialOrder","t":"def latticePartialOrder(implicit A: Lattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws.html","n":"meetSemilatticePartialOrder","t":"def meetSemilatticePartialOrder(implicit A: MeetSemilattice[A], P: PartialOrder[A]): LatticePartialOrderProperties","d":"spire/laws/LatticePartialOrderLaws","k":"def"},
{"l":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties.html","n":"LatticePartialOrderProperties","t":"class LatticePartialOrderProperties(val name: String, val parents: Seq[LatticePartialOrderProperties], val bases: Seq[(String, RuleSet)], val props: (String, Prop)*) extends RuleSet","d":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties","k":"class"},
{"l":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties","k":"val"},
{"l":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties.html","n":"name","t":"val name: String","d":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties","k":"val"},
{"l":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties.html","n":"parents","t":"val parents: Seq[LatticePartialOrderProperties]","d":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties","k":"val"},
{"l":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/LatticePartialOrderLaws$LatticePartialOrderProperties","k":"val"},
{"l":"spire/laws/LogicLaws$.html","n":"LogicLaws","t":"object LogicLaws","d":"spire/laws/LogicLaws$","k":"object"},
{"l":"spire/laws/LogicLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: LogicLaws[A]","d":"spire/laws/LogicLaws$","k":"def"},
{"l":"spire/laws/LogicLaws.html","n":"LogicLaws","t":"trait LogicLaws[A] extends Laws","d":"spire/laws/LogicLaws","k":"trait"},
{"l":"spire/laws/LogicLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/LogicLaws","k":"def"},
{"l":"spire/laws/LogicLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/LogicLaws","k":"def"},
{"l":"spire/laws/LogicLaws.html","n":"bool","t":"def bool(implicit A: Bool[A]): DefaultRuleSet","d":"spire/laws/LogicLaws","k":"def"},
{"l":"spire/laws/LogicLaws.html","n":"heyting","t":"def heyting(implicit A: Heyting[A]): DefaultRuleSet","d":"spire/laws/LogicLaws","k":"def"},
{"l":"spire/laws/OrderLaws$.html","n":"OrderLaws","t":"object OrderLaws","d":"spire/laws/OrderLaws$","k":"object"},
{"l":"spire/laws/OrderLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: OrderLaws[A]","d":"spire/laws/OrderLaws$","k":"def"},
{"l":"spire/laws/OrderLaws.html","n":"OrderLaws","t":"trait OrderLaws[A] extends Laws","d":"spire/laws/OrderLaws","k":"trait"},
{"l":"spire/laws/OrderLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/OrderLaws","k":"def"},
{"l":"spire/laws/OrderLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/OrderLaws","k":"def"},
{"l":"spire/laws/OrderLaws.html","n":"order","t":"def order(implicit A: Order[A]): OrderProperties","d":"spire/laws/OrderLaws","k":"def"},
{"l":"spire/laws/OrderLaws.html","n":"partialOrder","t":"def partialOrder(implicit A: PartialOrder[A]): OrderProperties","d":"spire/laws/OrderLaws","k":"def"},
{"l":"spire/laws/OrderLaws.html","n":"signed","t":"def signed(implicit A: Signed[A]): OrderProperties","d":"spire/laws/OrderLaws","k":"def"},
{"l":"spire/laws/OrderLaws.html","n":"truncatedDivision","t":"def truncatedDivision(implicit cRigA: CommutativeRig[A], orderA: Order[A], truncatedDivisionA: TruncatedDivision[A]): DefaultRuleSet","d":"spire/laws/OrderLaws","k":"def"},
{"l":"spire/laws/OrderLaws$OrderProperties.html","n":"OrderProperties","t":"class OrderProperties(name: String, parent: Option[OrderProperties], props: (String, Prop)*) extends DefaultRuleSet","d":"spire/laws/OrderLaws$OrderProperties","k":"class"},
{"l":"spire/laws/PartialActionLaws$.html","n":"PartialActionLaws","t":"object PartialActionLaws","d":"spire/laws/PartialActionLaws$","k":"object"},
{"l":"spire/laws/PartialActionLaws$.html","n":"apply","t":"def apply[G : Arbitrary, A : Arbitrary]: PartialActionLaws[G, A]","d":"spire/laws/PartialActionLaws$","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"PartialActionLaws","t":"trait PartialActionLaws[G, A] extends Laws","d":"spire/laws/PartialActionLaws","k":"trait"},
{"l":"spire/laws/PartialActionLaws.html","n":"ArbA","t":"def ArbA: Arbitrary[A]","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"EquA","t":"def EquA: Eq[A]","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"groupPartialAction","t":"def groupPartialAction(implicit G: PartialAction[A, G], G0: Group[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"groupoidPartialAction","t":"def groupoidPartialAction(implicit G: PartialAction[A, G], G0: Groupoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"leftMonoidPartialAction","t":"def leftMonoidPartialAction(implicit G: LeftPartialAction[A, G], G0: Monoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"leftSemigroupPartialAction","t":"def leftSemigroupPartialAction(implicit G: LeftPartialAction[A, G], G0: Semigroup[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"leftSemigroupoidPartialAction","t":"def leftSemigroupoidPartialAction(implicit G: LeftPartialAction[A, G], G0: Semigroupoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"monoidPartialAction","t":"def monoidPartialAction(implicit G: PartialAction[A, G], G0: Monoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"rightMonoidPartialAction","t":"def rightMonoidPartialAction(implicit G: RightPartialAction[A, G], G0: Monoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"rightSemigroupPartialAction","t":"def rightSemigroupPartialAction(implicit G: RightPartialAction[A, G], G0: Semigroup[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"rightSemigroupoidPartialAction","t":"def rightSemigroupoidPartialAction(implicit G: RightPartialAction[A, G], G0: Semigroupoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"scalarLaws","t":"val scalarLaws: PartialGroupLaws[G]","d":"spire/laws/PartialActionLaws","k":"val"},
{"l":"spire/laws/PartialActionLaws.html","n":"semigroupPartialAction","t":"def semigroupPartialAction(implicit G: PartialAction[A, G], G0: Semigroup[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws.html","n":"semigroupoidPartialAction","t":"def semigroupoidPartialAction(implicit G: PartialAction[A, G], G0: Semigroupoid[G]): ActionProperties","d":"spire/laws/PartialActionLaws","k":"def"},
{"l":"spire/laws/PartialActionLaws$ActionProperties.html","n":"ActionProperties","t":"class ActionProperties(val name: String, val sl: PartialGroupLaws[G] => RuleSet, val parents: Seq[ActionProperties], val props: (String, Prop)*) extends RuleSet","d":"spire/laws/PartialActionLaws$ActionProperties","k":"class"},
{"l":"spire/laws/PartialActionLaws$ActionProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/PartialActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/PartialActionLaws$ActionProperties.html","n":"name","t":"val name: String","d":"spire/laws/PartialActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/PartialActionLaws$ActionProperties.html","n":"parents","t":"val parents: Seq[ActionProperties]","d":"spire/laws/PartialActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/PartialActionLaws$ActionProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/PartialActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/PartialActionLaws$ActionProperties.html","n":"sl","t":"val sl: PartialGroupLaws[G] => RuleSet","d":"spire/laws/PartialActionLaws$ActionProperties","k":"val"},
{"l":"spire/laws/PartialGroupLaws$.html","n":"PartialGroupLaws","t":"object PartialGroupLaws","d":"spire/laws/PartialGroupLaws$","k":"object"},
{"l":"spire/laws/PartialGroupLaws$.html","n":"apply","t":"def apply[A : Arbitrary]: PartialGroupLaws[A]","d":"spire/laws/PartialGroupLaws$","k":"def"},
{"l":"spire/laws/PartialGroupLaws.html","n":"PartialGroupLaws","t":"trait PartialGroupLaws[A] extends GroupLaws[A]","d":"spire/laws/PartialGroupLaws","k":"trait"},
{"l":"spire/laws/PartialGroupLaws.html","n":"groupoid","t":"def groupoid(implicit A: Groupoid[A]): GroupProperties","d":"spire/laws/PartialGroupLaws","k":"def"},
{"l":"spire/laws/PartialGroupLaws.html","n":"semigroupoid","t":"def semigroupoid(implicit A: Semigroupoid[A]): GroupProperties","d":"spire/laws/PartialGroupLaws","k":"def"},
{"l":"spire/laws/RingLaws$.html","n":"RingLaws","t":"object RingLaws","d":"spire/laws/RingLaws$","k":"object"},
{"l":"spire/laws/RingLaws$.html","n":"apply","t":"def apply[A : Arbitrary](implicit evidence$1: Eq[A], evidence$2: Arbitrary[A], _pred: Predicate[A]): RingLaws[A]","d":"spire/laws/RingLaws$","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"RingLaws","t":"trait RingLaws[A] extends GroupLaws[A]","d":"spire/laws/RingLaws","k":"trait"},
{"l":"spire/laws/RingLaws.html","n":"Arb","t":"def Arb: Arbitrary[A]","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"Equ","t":"def Equ: Eq[A]","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"cRig","t":"def cRig(implicit A: CommutativeRig[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"cRing","t":"def cRing(implicit A: CommutativeRing[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"divisionRing","t":"def divisionRing(implicit A: DivisionRing[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"euclideanRing","t":"def euclideanRing(implicit A: EuclideanRing[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"field","t":"def field(implicit A: Field[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"gcdRing","t":"def gcdRing(implicit A: GCDRing[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"integerEuclideanRing","t":"def integerEuclideanRing(implicit A: EuclideanRing[A], S: Signed[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"multiplicativeAbGroup","t":"def multiplicativeAbGroup(implicit A: MultiplicativeCommutativeGroup[A]): MultiplicativeProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"multiplicativeCMonoid","t":"def multiplicativeCMonoid(implicit A: MultiplicativeCommutativeMonoid[A]): MultiplicativeProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"multiplicativeGroup","t":"def multiplicativeGroup(implicit A: MultiplicativeGroup[A]): MultiplicativeProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"multiplicativeMonoid","t":"def multiplicativeMonoid(implicit A: MultiplicativeMonoid[A]): MultiplicativeProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"multiplicativeSemigroup","t":"def multiplicativeSemigroup(implicit A: MultiplicativeSemigroup[A]): MultiplicativeProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"nonZeroLaws","t":"val nonZeroLaws: GroupLaws[A]","d":"spire/laws/RingLaws","k":"val"},
{"l":"spire/laws/RingLaws.html","n":"pred","t":"def pred: Predicate[A]","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"rig","t":"def rig(implicit A: Rig[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"ring","t":"def ring(implicit A: Ring[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"rng","t":"def rng(implicit A: Rng[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"semiring","t":"def semiring(implicit A: Semiring[A]): RingProperties","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws.html","n":"withPred","t":"def withPred(_pred: Predicate[A], replace: Boolean): RingLaws[A]","d":"spire/laws/RingLaws","k":"def"},
{"l":"spire/laws/RingLaws$MultiplicativeProperties.html","n":"MultiplicativeProperties","t":"class MultiplicativeProperties(val base: GroupLaws[A] => GroupProperties, val parent: Option[MultiplicativeProperties], val props: (String, Prop)*) extends RuleSet with HasOneParent","d":"spire/laws/RingLaws$MultiplicativeProperties","k":"class"},
{"l":"spire/laws/RingLaws$MultiplicativeProperties.html","n":"base","t":"val base: GroupLaws[A] => GroupProperties","d":"spire/laws/RingLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/RingLaws$MultiplicativeProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/RingLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/RingLaws$MultiplicativeProperties.html","n":"name","t":"val name: String","d":"spire/laws/RingLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/RingLaws$MultiplicativeProperties.html","n":"parent","t":"val parent: Option[MultiplicativeProperties]","d":"spire/laws/RingLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/RingLaws$MultiplicativeProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/RingLaws$MultiplicativeProperties","k":"val"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"RingProperties","t":"class RingProperties(val name: String, val al: AdditiveProperties, val ml: MultiplicativeProperties, val parents: Seq[RingProperties], val props: (String, Prop)*) extends RuleSet","d":"spire/laws/RingLaws$RingProperties","k":"class"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"_ml","t":"def _ml: RuleSet & HasOneParent","d":"spire/laws/RingLaws$RingProperties","k":"def"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"al","t":"val al: AdditiveProperties","d":"spire/laws/RingLaws$RingProperties","k":"val"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"bases","t":"def bases: Seq[(String, RuleSet)]","d":"spire/laws/RingLaws$RingProperties","k":"def"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"ml","t":"val ml: MultiplicativeProperties","d":"spire/laws/RingLaws$RingProperties","k":"val"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"name","t":"val name: String","d":"spire/laws/RingLaws$RingProperties","k":"val"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"nonZero","t":"def nonZero: Boolean","d":"spire/laws/RingLaws$RingProperties","k":"def"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"parents","t":"val parents: Seq[RingProperties]","d":"spire/laws/RingLaws$RingProperties","k":"val"},
{"l":"spire/laws/RingLaws$RingProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/RingLaws$RingProperties","k":"val"},
{"l":"spire/laws/RingLaws$RingProperties$.html","n":"RingProperties","t":"object RingProperties","d":"spire/laws/RingLaws$RingProperties$","k":"object"},
{"l":"spire/laws/RingLaws$RingProperties$.html","n":"fromParent","t":"def fromParent(name: String, parent: RingProperties, props: (String, Prop)*): RingProperties","d":"spire/laws/RingLaws$RingProperties$","k":"def"},
{"l":"spire/laws/VectorSpaceLaws$.html","n":"VectorSpaceLaws","t":"object VectorSpaceLaws","d":"spire/laws/VectorSpaceLaws$","k":"object"},
{"l":"spire/laws/VectorSpaceLaws$.html","n":"apply","t":"def apply[V : Eq, A : Predicate]: VectorSpaceLaws[V, A]","d":"spire/laws/VectorSpaceLaws$","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"VectorSpaceLaws","t":"trait VectorSpaceLaws[V, A] extends Laws","d":"spire/laws/VectorSpaceLaws","k":"trait"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"cModule","t":"def cModule(implicit V: CModule[V, A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"cRingFromCModule","t":"def cRingFromCModule(implicit V: CModule[V, A]): CommutativeRing[A]","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"innerProductSpace","t":"def innerProductSpace(implicit V: InnerProductSpace[V, A], A: Order[A], A0: Signed[A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"leftModule","t":"def leftModule(implicit V: LeftModule[V, A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"linearity","t":"def linearity(f: V => A)(implicit V: CModule[V, A]): SimpleRuleSet","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"metricSpace","t":"def metricSpace(implicit V: MetricSpace[V, A], o: Order[A], A: AdditiveMonoid[A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"normedVectorSpace","t":"def normedVectorSpace(implicit V: NormedVectorSpace[V, A], ev0: Order[A], ev1: Signed[A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"rightModule","t":"def rightModule(implicit V: RightModule[V, A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"ringFromLeftModule","t":"def ringFromLeftModule(implicit V: LeftModule[V, A], ev: NotGiven[CModule[V, A]]): Ring[A]","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"ringFromRightModule","t":"def ringFromRightModule(implicit V: RightModule[V, A], ev: NotGiven[CModule[V, A]]): Ring[A]","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"scalarLaws","t":"val scalarLaws: RingLaws[A]","d":"spire/laws/VectorSpaceLaws","k":"val"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"vectorLaws","t":"val vectorLaws: GroupLaws[V]","d":"spire/laws/VectorSpaceLaws","k":"val"},
{"l":"spire/laws/VectorSpaceLaws.html","n":"vectorSpace","t":"def vectorSpace(implicit V: VectorSpace[V, A]): SpaceProperties","d":"spire/laws/VectorSpaceLaws","k":"def"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"SpaceProperties","t":"class SpaceProperties(val name: String, val sl: RingLaws[A] => RuleSet, val vl: GroupLaws[V] => RuleSet, val parents: Seq[SpaceProperties], val props: (String, Prop)*) extends RuleSet","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"class"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"bases","t":"val bases: Seq[(String, RuleSet)]","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"val"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"name","t":"val name: String","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"val"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"parents","t":"val parents: Seq[SpaceProperties]","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"val"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"props","t":"val props: (String, Prop)*","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"val"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"sl","t":"val sl: RingLaws[A] => RuleSet","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"val"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties.html","n":"vl","t":"val vl: GroupLaws[V] => RuleSet","d":"spire/laws/VectorSpaceLaws$SpaceProperties","k":"val"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties$.html","n":"SpaceProperties","t":"object SpaceProperties","d":"spire/laws/VectorSpaceLaws$SpaceProperties$","k":"object"},
{"l":"spire/laws/VectorSpaceLaws$SpaceProperties$.html","n":"fromParent","t":"def fromParent(name: String, parent: SpaceProperties, props: (String, Prop)*): SpaceProperties","d":"spire/laws/VectorSpaceLaws$SpaceProperties$","k":"def"},
{"l":"spire/laws/arb$.html","n":"arb","t":"object arb","d":"spire/laws/arb$","k":"object"},
{"l":"spire/laws/arb$.html","n":"algebraic","t":"val algebraic: Arbitrary[Algebraic]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"bigInteger","t":"val bigInteger: Arbitrary[BigInteger]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"bound","t":"def bound[A : Arbitrary]: Arbitrary[Bound[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"complex","t":"def complex[A : Arbitrary]: Arbitrary[Complex[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"fixedPoint","t":"val fixedPoint: Arbitrary[FixedPoint]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"fixedScale","t":"val fixedScale: Arbitrary[FixedScale]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"freeAbGroup","t":"def freeAbGroup[A : Arbitrary]: Arbitrary[FreeAbGroup[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"freeGroup","t":"def freeGroup[A : Arbitrary]: Arbitrary[FreeGroup[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"freeMonoid","t":"def freeMonoid[A : Arbitrary]: Arbitrary[FreeMonoid[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"interval","t":"def interval[A : Order]: Arbitrary[Interval[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"jet","t":"def jet[A : ClassTag]: Arbitrary[Jet[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"natural","t":"val natural: Arbitrary[Natural]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"number","t":"val number: Arbitrary[Number]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"perm","t":"def perm: Arbitrary[Perm]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"polynomial","t":"def polynomial[A : ClassTag]: Arbitrary[Polynomial[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"quaternion","t":"def quaternion[A : Arbitrary]: Arbitrary[Quaternion[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"rational","t":"val rational: Arbitrary[Rational]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"real","t":"val real: Arbitrary[Real]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"safeLong","t":"val safeLong: Arbitrary[SafeLong]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"sign","t":"val sign: Arbitrary[Sign]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"term","t":"def term[A : Arbitrary]: Arbitrary[Term[A]]","d":"spire/laws/arb$","k":"def"},
{"l":"spire/laws/arb$.html","n":"trilean","t":"val trilean: Arbitrary[Trilean]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"ubyte","t":"val ubyte: Arbitrary[UByte]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"uint","t":"val uint: Arbitrary[UInt]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"ulong","t":"val ulong: Arbitrary[ULong]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/arb$.html","n":"ushort","t":"val ushort: Arbitrary[UShort]","d":"spire/laws/arb$","k":"val"},
{"l":"spire/laws/gen$.html","n":"gen","t":"object gen","d":"spire/laws/gen$","k":"object"},
{"l":"spire/laws/gen$.html","n":"algebraic","t":"val algebraic: Gen[Algebraic]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"bigInteger","t":"val bigInteger: Gen[BigInteger]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"bound","t":"def bound[A : Arbitrary]: Gen[Bound[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"boundedInterval","t":"def boundedInterval[A : Order]: Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"bounds","t":"def bounds[A : Order]: Gen[(A, A)]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"closedInterval","t":"def closedInterval[A : Order]: Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"complex","t":"def complex[A : Arbitrary]: Gen[Complex[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"fixedPoint","t":"val fixedPoint: Gen[FixedPoint]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"fixedScale","t":"val fixedScale: Gen[FixedScale]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"freeAbGroup","t":"def freeAbGroup[A : Arbitrary]: Gen[FreeAbGroup[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"freeGroup","t":"def freeGroup[A : Arbitrary]: Gen[FreeGroup[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"freeMonoid","t":"def freeMonoid[A : Arbitrary]: Gen[FreeMonoid[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"interval","t":"def interval[A : Order]: Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"jet","t":"def jet[A : ClassTag]: Gen[Jet[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"jet2","t":"def jet2[A : ClassTag]: Gen[Jet[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"makeBoundedInterval","t":"def makeBoundedInterval[A : Order](f: (A, A) => Interval[A]): Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"natural","t":"val natural: Gen[Natural]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"number","t":"val number: Gen[Number]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"openInterval","t":"def openInterval[A : Order]: Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"openLowerInterval","t":"def openLowerInterval[A : Order]: Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"openUpperInterval","t":"def openUpperInterval[A : Order]: Gen[Interval[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"perm","t":"val perm: Gen[Perm]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"polynomial","t":"def polynomial[A : ClassTag]: Gen[Polynomial[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"quaternion","t":"def quaternion[A : Arbitrary]: Gen[Quaternion[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"rational","t":"val rational: Gen[Rational]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"real","t":"val real: Gen[Real]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"safeLong","t":"val safeLong: Gen[SafeLong]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"sign","t":"val sign: Gen[Sign]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"term","t":"def term[A : Arbitrary]: Gen[Term[A]]","d":"spire/laws/gen$","k":"def"},
{"l":"spire/laws/gen$.html","n":"trilean","t":"val trilean: Gen[Trilean]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"ubyte","t":"val ubyte: Gen[UByte]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"uint","t":"val uint: Gen[UInt]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"ulong","t":"val ulong: Gen[ULong]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/gen$.html","n":"ushort","t":"val ushort: Gen[UShort]","d":"spire/laws/gen$","k":"val"},
{"l":"spire/laws/shadows.html","n":"spire.laws.shadows","t":"package spire.laws.shadows","d":"spire/laws/shadows","k":"package"},
{"l":"spire/laws/shadows/Shadow.html","n":"Shadow","t":"class Shadow[A, S](a: A, s: S)","d":"spire/laws/shadows/Shadow","k":"class"},
{"l":"spire/laws/shadows/Shadow$.html","n":"Shadow","t":"object Shadow extends ShadowInstances7","d":"spire/laws/shadows/Shadow$","k":"object"},
{"l":"spire/laws/shadows/Shadow$.html","n":"spireLawsArbitraryShadow","t":"def spireLawsArbitraryShadow[A, S](implicit A: Arbitrary[A], S: Shadowing[A, S]): Arbitrary[Shadow[A, S]]","d":"spire/laws/shadows/Shadow$","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveAbGroup.html","n":"ShadowAdditiveAbGroup","t":"trait ShadowAdditiveAbGroup[A, S] extends AdditiveCommutativeGroup[Shadow[A, S]] with ShadowAdditiveCMonoid[A, S]","d":"spire/laws/shadows/ShadowAdditiveAbGroup","k":"trait"},
{"l":"spire/laws/shadows/ShadowAdditiveAbGroup.html","n":"A","t":"def A: AdditiveCommutativeGroup[A]","d":"spire/laws/shadows/ShadowAdditiveAbGroup","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveAbGroup.html","n":"S","t":"def S: AdditiveCommutativeGroup[S]","d":"spire/laws/shadows/ShadowAdditiveAbGroup","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveAbGroup.html","n":"negate","t":"def negate(x: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowAdditiveAbGroup","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCMonoid.html","n":"ShadowAdditiveCMonoid","t":"trait ShadowAdditiveCMonoid[A, S] extends AdditiveCommutativeMonoid[Shadow[A, S]] with ShadowAdditiveCSemigroup[A, S]","d":"spire/laws/shadows/ShadowAdditiveCMonoid","k":"trait"},
{"l":"spire/laws/shadows/ShadowAdditiveCMonoid.html","n":"A","t":"def A: AdditiveCommutativeMonoid[A]","d":"spire/laws/shadows/ShadowAdditiveCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCMonoid.html","n":"S","t":"def S: AdditiveCommutativeMonoid[S]","d":"spire/laws/shadows/ShadowAdditiveCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCMonoid.html","n":"eqA","t":"def eqA: Eq[A]","d":"spire/laws/shadows/ShadowAdditiveCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCMonoid.html","n":"eqS","t":"def eqS: Eq[S]","d":"spire/laws/shadows/ShadowAdditiveCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCMonoid.html","n":"zero","t":"def zero: Shadow[A, S]","d":"spire/laws/shadows/ShadowAdditiveCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCSemigroup.html","n":"ShadowAdditiveCSemigroup","t":"trait ShadowAdditiveCSemigroup[A, S] extends AdditiveCommutativeSemigroup[Shadow[A, S]]","d":"spire/laws/shadows/ShadowAdditiveCSemigroup","k":"trait"},
{"l":"spire/laws/shadows/ShadowAdditiveCSemigroup.html","n":"A","t":"def A: AdditiveSemigroup[A]","d":"spire/laws/shadows/ShadowAdditiveCSemigroup","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCSemigroup.html","n":"S","t":"def S: AdditiveSemigroup[S]","d":"spire/laws/shadows/ShadowAdditiveCSemigroup","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCSemigroup.html","n":"plus","t":"def plus(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowAdditiveCSemigroup","k":"def"},
{"l":"spire/laws/shadows/ShadowAdditiveCSemigroup.html","n":"shadowing","t":"val shadowing: Shadowing[A, S]","d":"spire/laws/shadows/ShadowAdditiveCSemigroup","k":"val"},
{"l":"spire/laws/shadows/ShadowCRig.html","n":"ShadowCRig","t":"trait ShadowCRig[A, S] extends CommutativeRig[Shadow[A, S]] with ShadowCSemiring[A, S] with ShadowMultiplicativeCMonoid[A, S]","d":"spire/laws/shadows/ShadowCRig","k":"trait"},
{"l":"spire/laws/shadows/ShadowCRig.html","n":"A","t":"def A: CommutativeRig[A]","d":"spire/laws/shadows/ShadowCRig","k":"def"},
{"l":"spire/laws/shadows/ShadowCRig.html","n":"S","t":"def S: CommutativeRig[S]","d":"spire/laws/shadows/ShadowCRig","k":"def"},
{"l":"spire/laws/shadows/ShadowCRing.html","n":"ShadowCRing","t":"trait ShadowCRing[A, S] extends CommutativeRing[Shadow[A, S]] with ShadowCRig[A, S] with ShadowCRng[A, S]","d":"spire/laws/shadows/ShadowCRing","k":"trait"},
{"l":"spire/laws/shadows/ShadowCRing.html","n":"A","t":"def A: CommutativeRing[A]","d":"spire/laws/shadows/ShadowCRing","k":"def"},
{"l":"spire/laws/shadows/ShadowCRing.html","n":"S","t":"def S: CommutativeRing[S]","d":"spire/laws/shadows/ShadowCRing","k":"def"},
{"l":"spire/laws/shadows/ShadowCRng.html","n":"ShadowCRng","t":"trait ShadowCRng[A, S] extends CommutativeRng[Shadow[A, S]] with ShadowCSemiring[A, S] with ShadowAdditiveAbGroup[A, S]","d":"spire/laws/shadows/ShadowCRng","k":"trait"},
{"l":"spire/laws/shadows/ShadowCRng.html","n":"A","t":"def A: CommutativeRng[A]","d":"spire/laws/shadows/ShadowCRng","k":"def"},
{"l":"spire/laws/shadows/ShadowCRng.html","n":"S","t":"def S: CommutativeRng[S]","d":"spire/laws/shadows/ShadowCRng","k":"def"},
{"l":"spire/laws/shadows/ShadowCSemiring.html","n":"ShadowCSemiring","t":"trait ShadowCSemiring[A, S] extends CommutativeSemiring[Shadow[A, S]] with ShadowAdditiveCMonoid[A, S] with ShadowMultiplicativeCSemigroup[A, S]","d":"spire/laws/shadows/ShadowCSemiring","k":"trait"},
{"l":"spire/laws/shadows/ShadowCSemiring.html","n":"A","t":"def A: CommutativeSemiring[A]","d":"spire/laws/shadows/ShadowCSemiring","k":"def"},
{"l":"spire/laws/shadows/ShadowCSemiring.html","n":"S","t":"def S: CommutativeSemiring[S]","d":"spire/laws/shadows/ShadowCSemiring","k":"def"},
{"l":"spire/laws/shadows/ShadowEq.html","n":"ShadowEq","t":"trait ShadowEq[A, S] extends Eq[Shadow[A, S]]","d":"spire/laws/shadows/ShadowEq","k":"trait"},
{"l":"spire/laws/shadows/ShadowEq.html","n":"A","t":"def A: Eq[A]","d":"spire/laws/shadows/ShadowEq","k":"def"},
{"l":"spire/laws/shadows/ShadowEq.html","n":"S","t":"def S: Eq[S]","d":"spire/laws/shadows/ShadowEq","k":"def"},
{"l":"spire/laws/shadows/ShadowEq.html","n":"eqv","t":"def eqv(x: Shadow[A, S], y: Shadow[A, S]): Boolean","d":"spire/laws/shadows/ShadowEq","k":"def"},
{"l":"spire/laws/shadows/ShadowEuclideanRing.html","n":"ShadowEuclideanRing","t":"trait ShadowEuclideanRing[A, S] extends EuclideanRing[Shadow[A, S]] with ShadowGCDRing[A, S]","d":"spire/laws/shadows/ShadowEuclideanRing","k":"trait"},
{"l":"spire/laws/shadows/ShadowEuclideanRing.html","n":"A","t":"def A: EuclideanRing[A]","d":"spire/laws/shadows/ShadowEuclideanRing","k":"def"},
{"l":"spire/laws/shadows/ShadowEuclideanRing.html","n":"S","t":"def S: EuclideanRing[S]","d":"spire/laws/shadows/ShadowEuclideanRing","k":"def"},
{"l":"spire/laws/shadows/ShadowEuclideanRing.html","n":"emod","t":"def emod(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowEuclideanRing","k":"def"},
{"l":"spire/laws/shadows/ShadowEuclideanRing.html","n":"equot","t":"def equot(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowEuclideanRing","k":"def"},
{"l":"spire/laws/shadows/ShadowEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(x: Shadow[A, S]): BigInt","d":"spire/laws/shadows/ShadowEuclideanRing","k":"def"},
{"l":"spire/laws/shadows/ShadowGCDRing.html","n":"ShadowGCDRing","t":"trait ShadowGCDRing[A, S] extends GCDRing[Shadow[A, S]] with ShadowCRing[A, S]","d":"spire/laws/shadows/ShadowGCDRing","k":"trait"},
{"l":"spire/laws/shadows/ShadowGCDRing.html","n":"A","t":"def A: GCDRing[A]","d":"spire/laws/shadows/ShadowGCDRing","k":"def"},
{"l":"spire/laws/shadows/ShadowGCDRing.html","n":"S","t":"def S: GCDRing[S]","d":"spire/laws/shadows/ShadowGCDRing","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances0.html","n":"ShadowInstances0","t":"class ShadowInstances0","d":"spire/laws/shadows/ShadowInstances0","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances0.html","n":"additiveCSemigroup","t":"def additiveCSemigroup[A : AdditiveCommutativeSemigroup, S : AdditiveCommutativeSemigroup](implicit evidence$1: AdditiveCommutativeSemigroup[A], evidence$2: AdditiveCommutativeSemigroup[S], ev: Shadowing[A, S]): AdditiveCommutativeSemigroup[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances0","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances0.html","n":"eqInstance","t":"def eqInstance[A : Eq, S : Eq]: Eq[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances0","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances0.html","n":"involution","t":"def involution[A : Involution, S : Involution](implicit evidence$7: Involution[A], evidence$8: Involution[S], ev: Shadowing[A, S]): Involution[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances0","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances0.html","n":"multiplicativeCSemigroup","t":"def multiplicativeCSemigroup[A : MultiplicativeCommutativeSemigroup, S : MultiplicativeCommutativeSemigroup](implicit evidence$3: MultiplicativeCommutativeSemigroup[A], evidence$4: MultiplicativeCommutativeSemigroup[S], ev: Shadowing[A, S]): MultiplicativeCommutativeSemigroup[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances0","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances1.html","n":"ShadowInstances1","t":"class ShadowInstances1 extends ShadowInstances0","d":"spire/laws/shadows/ShadowInstances1","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances1.html","n":"additiveCMonoid","t":"def additiveCMonoid[A : AdditiveCommutativeMonoid, S : AdditiveCommutativeMonoid](implicit evidence$9: Eq[A], evidence$10: AdditiveCommutativeMonoid[A], evidence$11: Eq[S], evidence$12: AdditiveCommutativeMonoid[S], ev: Shadowing[A, S]): AdditiveCommutativeMonoid[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances1","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances1.html","n":"multiplicativeCMonoid","t":"def multiplicativeCMonoid[A : MultiplicativeCommutativeMonoid, S : MultiplicativeCommutativeMonoid](implicit evidence$13: Eq[A], evidence$14: MultiplicativeCommutativeMonoid[A], evidence$15: Eq[S], evidence$16: MultiplicativeCommutativeMonoid[S], ev: Shadowing[A, S]): MultiplicativeCommutativeMonoid[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances1","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances1.html","n":"partialOrderInstance","t":"def partialOrderInstance[A : PartialOrder, S : PartialOrder]: PartialOrder[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances1","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances2.html","n":"ShadowInstances2","t":"class ShadowInstances2 extends ShadowInstances1","d":"spire/laws/shadows/ShadowInstances2","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances2.html","n":"additiveAbGroup","t":"def additiveAbGroup[A : AdditiveCommutativeGroup, S : AdditiveCommutativeGroup](implicit evidence$19: Eq[A], evidence$20: AdditiveCommutativeGroup[A], evidence$21: Eq[S], evidence$22: AdditiveCommutativeGroup[S], ev: Shadowing[A, S]): AdditiveCommutativeGroup[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances2","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances2.html","n":"orderInstance","t":"def orderInstance[A : Order, S : Order]: Order[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances2","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances3.html","n":"ShadowInstances3","t":"class ShadowInstances3 extends ShadowInstances2","d":"spire/laws/shadows/ShadowInstances3","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances3.html","n":"cSemiring","t":"def cSemiring[A : Eq, S : Eq](implicit evidence$25: Eq[A], evidence$26: CommutativeSemiring[A], evidence$27: Eq[S], evidence$28: CommutativeSemiring[S], ev: Shadowing[A, S]): CommutativeSemiring[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances3","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances3.html","n":"signed","t":"def signed[A : AdditiveCommutativeMonoid, S : AdditiveCommutativeMonoid](implicit evidence$29: AdditiveCommutativeMonoid[A], evidence$30: Order[A], evidence$31: Signed[A], evidence$32: AdditiveCommutativeMonoid[S], evidence$33: Order[S], evidence$34: Signed[S], ev: Shadowing[A, S]): Signed[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances3","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances4.html","n":"ShadowInstances4","t":"class ShadowInstances4 extends ShadowInstances3","d":"spire/laws/shadows/ShadowInstances4","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances4.html","n":"cRig","t":"def cRig[A : CommutativeRig, S : CommutativeRig](implicit evidence$35: Eq[A], evidence$36: CommutativeRig[A], evidence$37: Eq[S], evidence$38: CommutativeRig[S], ev: Shadowing[A, S]): CommutativeRig[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances4","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances4.html","n":"cRng","t":"def cRng[A : Eq, S : Eq](implicit evidence$39: Eq[A], evidence$40: CommutativeRng[A], evidence$41: Eq[S], evidence$42: CommutativeRng[S], ev: Shadowing[A, S]): CommutativeRng[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances4","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances4.html","n":"truncatedDivision","t":"def truncatedDivision[A : Order, S : TruncatedDivision](implicit evidence$43: AdditiveCommutativeMonoid[A], evidence$44: Order[A], evidence$45: TruncatedDivision[A], evidence$46: AdditiveCommutativeMonoid[S], evidence$47: Order[S], evidence$48: TruncatedDivision[S], ev: Shadowing[A, S]): TruncatedDivision[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances4","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances5.html","n":"ShadowInstances5","t":"class ShadowInstances5 extends ShadowInstances4","d":"spire/laws/shadows/ShadowInstances5","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances5.html","n":"cRing","t":"def cRing[A : CommutativeRing, S : Eq](implicit evidence$49: Eq[A], evidence$50: CommutativeRing[A], evidence$51: Eq[S], evidence$52: CommutativeRing[S], ev: Shadowing[A, S]): CommutativeRing[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances5","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances6.html","n":"ShadowInstances6","t":"class ShadowInstances6 extends ShadowInstances5","d":"spire/laws/shadows/ShadowInstances6","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances6.html","n":"gcdRing","t":"def gcdRing[A : Eq, S : Eq](implicit evidence$53: Eq[A], evidence$54: GCDRing[A], evidence$55: Eq[S], evidence$56: GCDRing[S], ev: Shadowing[A, S]): GCDRing[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances6","k":"def"},
{"l":"spire/laws/shadows/ShadowInstances7.html","n":"ShadowInstances7","t":"class ShadowInstances7 extends ShadowInstances6","d":"spire/laws/shadows/ShadowInstances7","k":"class"},
{"l":"spire/laws/shadows/ShadowInstances7.html","n":"euclideanRing","t":"def euclideanRing[A : Eq, S : Eq](implicit evidence$57: Eq[A], evidence$58: EuclideanRing[A], evidence$59: Eq[S], evidence$60: EuclideanRing[S], ev: Shadowing[A, S]): EuclideanRing[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInstances7","k":"def"},
{"l":"spire/laws/shadows/ShadowInvolution.html","n":"ShadowInvolution","t":"trait ShadowInvolution[A, S] extends Involution[Shadow[A, S]]","d":"spire/laws/shadows/ShadowInvolution","k":"trait"},
{"l":"spire/laws/shadows/ShadowInvolution.html","n":"A","t":"def A: Involution[A]","d":"spire/laws/shadows/ShadowInvolution","k":"def"},
{"l":"spire/laws/shadows/ShadowInvolution.html","n":"S","t":"def S: Involution[S]","d":"spire/laws/shadows/ShadowInvolution","k":"def"},
{"l":"spire/laws/shadows/ShadowInvolution.html","n":"adjoint","t":"def adjoint(x: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowInvolution","k":"def"},
{"l":"spire/laws/shadows/ShadowInvolution.html","n":"shadowing","t":"val shadowing: Shadowing[A, S]","d":"spire/laws/shadows/ShadowInvolution","k":"val"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCMonoid.html","n":"ShadowMultiplicativeCMonoid","t":"trait ShadowMultiplicativeCMonoid[A, S] extends MultiplicativeCommutativeMonoid[Shadow[A, S]] with ShadowMultiplicativeCSemigroup[A, S]","d":"spire/laws/shadows/ShadowMultiplicativeCMonoid","k":"trait"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCMonoid.html","n":"A","t":"def A: MultiplicativeCommutativeMonoid[A]","d":"spire/laws/shadows/ShadowMultiplicativeCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCMonoid.html","n":"S","t":"def S: MultiplicativeCommutativeMonoid[S]","d":"spire/laws/shadows/ShadowMultiplicativeCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCMonoid.html","n":"eqA","t":"def eqA: Eq[A]","d":"spire/laws/shadows/ShadowMultiplicativeCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCMonoid.html","n":"eqS","t":"def eqS: Eq[S]","d":"spire/laws/shadows/ShadowMultiplicativeCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCMonoid.html","n":"one","t":"def one: Shadow[A, S]","d":"spire/laws/shadows/ShadowMultiplicativeCMonoid","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCSemigroup.html","n":"ShadowMultiplicativeCSemigroup","t":"trait ShadowMultiplicativeCSemigroup[A, S] extends MultiplicativeCommutativeSemigroup[Shadow[A, S]]","d":"spire/laws/shadows/ShadowMultiplicativeCSemigroup","k":"trait"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCSemigroup.html","n":"A","t":"def A: MultiplicativeCommutativeSemigroup[A]","d":"spire/laws/shadows/ShadowMultiplicativeCSemigroup","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCSemigroup.html","n":"S","t":"def S: MultiplicativeCommutativeSemigroup[S]","d":"spire/laws/shadows/ShadowMultiplicativeCSemigroup","k":"def"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCSemigroup.html","n":"shadowing","t":"val shadowing: Shadowing[A, S]","d":"spire/laws/shadows/ShadowMultiplicativeCSemigroup","k":"val"},
{"l":"spire/laws/shadows/ShadowMultiplicativeCSemigroup.html","n":"times","t":"def times(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowMultiplicativeCSemigroup","k":"def"},
{"l":"spire/laws/shadows/ShadowOrder.html","n":"ShadowOrder","t":"trait ShadowOrder[A, S] extends ShadowPartialOrder[A, S] with Order[Shadow[A, S]]","d":"spire/laws/shadows/ShadowOrder","k":"trait"},
{"l":"spire/laws/shadows/ShadowOrder.html","n":"A","t":"def A: Order[A]","d":"spire/laws/shadows/ShadowOrder","k":"def"},
{"l":"spire/laws/shadows/ShadowOrder.html","n":"S","t":"def S: Order[S]","d":"spire/laws/shadows/ShadowOrder","k":"def"},
{"l":"spire/laws/shadows/ShadowOrder.html","n":"compare","t":"def compare(x: Shadow[A, S], y: Shadow[A, S]): Int","d":"spire/laws/shadows/ShadowOrder","k":"def"},
{"l":"spire/laws/shadows/ShadowPartialOrder.html","n":"ShadowPartialOrder","t":"trait ShadowPartialOrder[A, S] extends ShadowEq[A, S] with PartialOrder[Shadow[A, S]]","d":"spire/laws/shadows/ShadowPartialOrder","k":"trait"},
{"l":"spire/laws/shadows/ShadowPartialOrder.html","n":"A","t":"def A: PartialOrder[A]","d":"spire/laws/shadows/ShadowPartialOrder","k":"def"},
{"l":"spire/laws/shadows/ShadowPartialOrder.html","n":"S","t":"def S: PartialOrder[S]","d":"spire/laws/shadows/ShadowPartialOrder","k":"def"},
{"l":"spire/laws/shadows/ShadowPartialOrder.html","n":"partialCompare","t":"def partialCompare(x: Shadow[A, S], y: Shadow[A, S]): Double","d":"spire/laws/shadows/ShadowPartialOrder","k":"def"},
{"l":"spire/laws/shadows/ShadowSigned.html","n":"ShadowSigned","t":"trait ShadowSigned[A, S] extends Signed[Shadow[A, S]]","d":"spire/laws/shadows/ShadowSigned","k":"trait"},
{"l":"spire/laws/shadows/ShadowSigned.html","n":"A","t":"def A: Signed[A]","d":"spire/laws/shadows/ShadowSigned","k":"def"},
{"l":"spire/laws/shadows/ShadowSigned.html","n":"S","t":"def S: Signed[S]","d":"spire/laws/shadows/ShadowSigned","k":"def"},
{"l":"spire/laws/shadows/ShadowSigned.html","n":"abs","t":"def abs(x: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowSigned","k":"def"},
{"l":"spire/laws/shadows/ShadowSigned.html","n":"shadowing","t":"val shadowing: Shadowing[A, S]","d":"spire/laws/shadows/ShadowSigned","k":"val"},
{"l":"spire/laws/shadows/ShadowSigned.html","n":"signum","t":"def signum(x: Shadow[A, S]): Int","d":"spire/laws/shadows/ShadowSigned","k":"def"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"ShadowTruncatedDivision","t":"trait ShadowTruncatedDivision[A, S] extends TruncatedDivision[Shadow[A, S]] with ShadowSigned[A, S]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"trait"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"A","t":"def A: TruncatedDivision[A]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"def"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"S","t":"def S: TruncatedDivision[S]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"def"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"fmod","t":"def fmod(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"def"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"fquot","t":"def fquot(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"def"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"tmod","t":"def tmod(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"def"},
{"l":"spire/laws/shadows/ShadowTruncatedDivision.html","n":"tquot","t":"def tquot(x: Shadow[A, S], y: Shadow[A, S]): Shadow[A, S]","d":"spire/laws/shadows/ShadowTruncatedDivision","k":"def"},
{"l":"spire/laws/shadows/Shadowing$.html","n":"Shadowing","t":"object Shadowing","d":"spire/laws/shadows/Shadowing$","k":"object"},
{"l":"spire/laws/shadows/Shadowing$.html","n":"apply","t":"def apply[A, S](f: A => S, g: S => Option[A]): Shadowing[A, S]","d":"spire/laws/shadows/Shadowing$","k":"def"},
{"l":"spire/laws/shadows/Shadowing$.html","n":"bigInt","t":"def bigInt[A : NumberTag](fromBigInt: BigInt => A): Shadowing[A, BigInt]","d":"spire/laws/shadows/Shadowing$","k":"def"},
{"l":"spire/laws/shadows/Shadowing.html","n":"Shadowing","t":"trait Shadowing[A, S]","d":"spire/laws/shadows/Shadowing","k":"trait"},
{"l":"spire/laws/shadows/Shadowing.html","n":"checked","t":"def checked(s: S): S","d":"spire/laws/shadows/Shadowing","k":"def"},
{"l":"spire/laws/shadows/Shadowing.html","n":"fromShadow","t":"def fromShadow(s: S): Option[A]","d":"spire/laws/shadows/Shadowing","k":"def"},
{"l":"spire/laws/shadows/Shadowing.html","n":"isValid","t":"def isValid(s: S): Boolean","d":"spire/laws/shadows/Shadowing","k":"def"},
{"l":"spire/laws/shadows/Shadowing.html","n":"toShadow","t":"def toShadow(a: A): S","d":"spire/laws/shadows/Shadowing","k":"def"},
{"l":"spire/macros.html","n":"spire.macros","t":"package spire.macros","d":"spire/macros","k":"package"},
{"l":"spire/macros/ArithmeticOverflowException.html","n":"ArithmeticOverflowException","t":"class ArithmeticOverflowException() extends ArithmeticException","d":"spire/macros/ArithmeticOverflowException","k":"class"},
{"l":"spire/macros/Checked$.html","n":"Checked","t":"object Checked","d":"spire/macros/Checked$","k":"object"},
{"l":"spire/macros/Checked$.html","n":"checked","t":"def checked[A](inline n: A): A","d":"spire/macros/Checked$","k":"def"},
{"l":"spire/macros/Checked$.html","n":"option","t":"def option[A](inline n: A): Option[A]","d":"spire/macros/Checked$","k":"def"},
{"l":"spire/macros/Checked$.html","n":"tryOrElse","t":"def tryOrElse[A](inline n: A)(orElse: => A): A","d":"spire/macros/Checked$","k":"def"},
{"l":"spire/math.html","n":"spire.math","t":"package spire.math","d":"spire/math","k":"package"},
{"l":"spire/math.html","n":"IEEEremainder","t":"def IEEEremainder(x: Double, d: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs(n: Byte): Byte","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs(n: Short): Short","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs(n: Int): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs(n: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs(n: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs(n: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"abs","t":"def abs[A](a: A)(implicit ev: Signed[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"acos","t":"def acos[@specialized(Float, Double) A](a: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"asin","t":"def asin[@specialized(Float, Double) A](a: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"atan","t":"def atan[@specialized(Float, Double) A](a: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"atan2","t":"def atan2[@specialized(Float, Double) A](y: A, x: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"cbrt","t":"def cbrt(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"ceil","t":"def ceil(n: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"ceil","t":"def ceil(n: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"ceil","t":"def ceil(n: BigDecimal): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"ceil","t":"def ceil[A](a: A)(implicit ev: IsReal[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"choose","t":"def choose(n: Long, k: Long): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"copySign","t":"def copySign(m: Double, s: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"copySign","t":"def copySign(m: Float, s: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"cos","t":"def cos[@specialized(Float, Double) A](a: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"cosh","t":"def cosh[@specialized(Float, Double) A](x: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"cosh","t":"def cosh(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"e","t":"def e: Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"e","t":"def e[@specialized(Float, Double) A](implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"emod","t":"def emod(a: Byte, b: Byte): Byte","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"emod","t":"def emod(a: Short, b: Short): Short","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"emod","t":"def emod(a: Int, b: Int): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"emod","t":"def emod(a: Long, b: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"emod","t":"def emod(a: BigInt, b: BigInt): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"emod","t":"def emod(a: BigInteger, b: BigInteger): BigInteger","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equot","t":"def equot(a: Byte, b: Byte): Byte","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equot","t":"def equot(a: Short, b: Short): Short","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equot","t":"def equot(a: Int, b: Int): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equot","t":"def equot(a: Long, b: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equot","t":"def equot(a: BigInt, b: BigInt): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equot","t":"def equot(a: BigInteger, b: BigInteger): BigInteger","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equotmod","t":"def equotmod(a: Byte, b: Byte): (Byte, Byte)","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equotmod","t":"def equotmod(a: Short, b: Short): (Short, Short)","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equotmod","t":"def equotmod(a: Int, b: Int): (Int, Int)","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equotmod","t":"def equotmod(a: Long, b: Long): (Long, Long)","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equotmod","t":"def equotmod(a: BigInt, b: BigInt): (BigInt, BigInt)","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"equotmod","t":"def equotmod(a: BigInteger, b: BigInteger): (BigInteger, BigInteger)","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"exp","t":"def exp(n: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"exp","t":"def exp(k: Int, precision: Int): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"exp","t":"def exp(k: BigDecimal): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"exp","t":"def exp[A](a: A)(implicit t: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"expm1","t":"def expm1(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"fact","t":"def fact(n: Long): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"fib","t":"def fib(n: Long): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"floor","t":"def floor(n: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"floor","t":"def floor(n: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"floor","t":"def floor(n: BigDecimal): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"floor","t":"def floor[A](a: A)(implicit ev: IsReal[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"gcd","t":"def gcd(_x: Long, _y: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"gcd","t":"def gcd(a: BigInt, b: BigInt): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"gcd","t":"def gcd[A : Eq](x: A, y: A)(implicit evidence$1: Eq[A], ev: GCDRing[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"gcd","t":"def gcd[A : Eq](xs: Seq[A])(implicit evidence$2: Eq[A], ev: GCDRing[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"gcd","t":"def gcd[A : Eq](x: A, y: A, z: A, rest: A*)(implicit evidence$3: Eq[A], ev: GCDRing[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"getExponent","t":"def getExponent(x: Double): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"getExponent","t":"def getExponent(x: Float): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"hypot","t":"def hypot[@specialized(Float, Double) A](x: A, y: A)(implicit f: Field[A], n: NRoot[A], o: Order[A], s: Signed[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"lcm","t":"def lcm(x: Long, y: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"lcm","t":"def lcm(a: BigInt, b: BigInt): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"lcm","t":"def lcm[A : Eq](x: A, y: A)(implicit evidence$4: Eq[A], ev: GCDRing[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log","t":"def log(n: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log","t":"def log(n: Double, base: Int): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log","t":"def log(n: BigDecimal): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log","t":"def log(n: BigDecimal, base: Int): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log","t":"def log[A](a: A)(implicit t: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log","t":"def log[A](a: A, base: Int)(implicit f: Field[A], t: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log10","t":"def log10(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"log1p","t":"def log1p(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max(x: Byte, y: Byte): Byte","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max(x: Short, y: Short): Short","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max(x: Int, y: Int): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max(x: Long, y: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max(x: Float, y: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max(x: Double, y: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"max","t":"def max[A](x: A, y: A)(implicit ev: Order[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min(x: Byte, y: Byte): Byte","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min(x: Short, y: Short): Short","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min(x: Int, y: Int): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min(x: Long, y: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min(x: Float, y: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min(x: Double, y: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"min","t":"def min[A](x: A, y: A)(implicit ev: Order[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"nextAfter","t":"def nextAfter(x: Double, y: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"nextAfter","t":"def nextAfter(x: Float, y: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"nextUp","t":"def nextUp(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"nextUp","t":"def nextUp(x: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"nroot","t":"def nroot(a: BigDecimal, k: Int, ctxt: MathContext): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"pi","t":"def pi: Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"pi","t":"def pi[@specialized(Float, Double) A](implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"pow","t":"def pow(base: BigDecimal, exponent: BigDecimal): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"pow","t":"def pow(base: BigInt, ex: BigInt): BigInt","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"pow","t":"def pow(base: Long, exponent: Long): Long","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"pow","t":"def pow(base: Double, exponent: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"random","t":"def random: Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"rint","t":"def rint(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"round","t":"def round(a: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"round","t":"def round(a: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"round","t":"def round(a: BigDecimal): BigDecimal","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"round","t":"def round[A](a: A)(implicit ev: IsReal[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"scalb","t":"def scalb(d: Double, s: Int): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"scalb","t":"def scalb(d: Float, s: Int): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"signum","t":"def signum(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"signum","t":"def signum(x: Float): Float","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"signum","t":"def signum[A](a: A)(implicit ev: Signed[A]): Int","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"sin","t":"def sin[@specialized(Float, Double) A](a: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"sinh","t":"def sinh[@specialized(Float, Double) A](x: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"sqrt","t":"def sqrt(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"sqrt","t":"def sqrt[A](a: A)(implicit ev: NRoot[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"tan","t":"def tan[@specialized(Float, Double) A](a: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"tanh","t":"def tanh[@specialized(Float, Double) A](x: A)(implicit ev: Trig[A]): A","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"toDegrees","t":"def toDegrees(a: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"toRadians","t":"def toRadians(a: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"ulp","t":"def ulp(x: Double): Double","d":"spire/math","k":"def"},
{"l":"spire/math.html","n":"ulp","t":"def ulp(x: Float): Double","d":"spire/math","k":"def"},
{"l":"spire/math/Above.html","n":"Above","t":"class Above[A] extends Interval[A]","d":"spire/math/Above","k":"class"},
{"l":"spire/math/Above.html","n":"lowerBound","t":"def lowerBound: ValueBound[A]","d":"spire/math/Above","k":"def"},
{"l":"spire/math/Above.html","n":"upperBound","t":"def upperBound: Unbound[A]","d":"spire/math/Above","k":"def"},
{"l":"spire/math/Algebraic.html","n":"Algebraic","t":"class Algebraic extends ScalaNumber with ScalaNumericConversions with Serializable","d":"spire/math/Algebraic","k":"class"},
{"l":"spire/math/Algebraic.html","n":"*","t":"def *(that: Algebraic): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"+","t":"def +(that: Algebraic): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"-","t":"def -(that: Algebraic): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"/","t":"def /(that: Algebraic): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"<","t":"def <(that: Algebraic): Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"<=","t":"def <=(that: Algebraic): Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"=!=","t":"def =!=(that: Algebraic): Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"===","t":"def ===(that: Algebraic): Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":">","t":"def >(that: Algebraic): Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":">=","t":"def >=(that: Algebraic): Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"abs","t":"def abs: Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"cbrt","t":"def cbrt: Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"compare","t":"def compare(that: Algebraic): Int","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"doubleValue","t":"def doubleValue: Double","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"evaluateWith","t":"def evaluateWith[A : ClassTag](implicit evidence$1: Field[A], evidence$2: NRoot[A], evidence$3: RootFinder[A], evidence$4: Eq[A], evidence$5: ClassTag[A], conv: ConvertableTo[A]): A","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"expr","t":"val expr: Expr","d":"spire/math/Algebraic","k":"val"},
{"l":"spire/math/Algebraic.html","n":"floatValue","t":"def floatValue: Float","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"intValue","t":"def intValue: Int","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"isRational","t":"def isRational: Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"longValue","t":"def longValue: Long","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"nroot","t":"def nroot(k: Int): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"pow","t":"def pow(k: Int): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"sign","t":"def sign: Sign","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"sqrt","t":"def sqrt: Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"tmod","t":"def tmod(that: Algebraic): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"toBigDecimal","t":"def toBigDecimal(scale: Int, roundingMode: RoundingMode): BigDecimal","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"toBigDecimal","t":"def toBigDecimal(mc: MathContext): BigDecimal","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"toExprString","t":"def toExprString: String","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"toRational","t":"def toRational: Option[Rational]","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"toReal","t":"def toReal: Real","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"tquot","t":"def tquot(that: Algebraic): Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"unary_-","t":"def unary_-: Algebraic","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic.html","n":"underlying","t":"def underlying: AnyRef","d":"spire/math/Algebraic","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"Algebraic","t":"object Algebraic extends AlgebraicInstances","d":"spire/math/Algebraic$","k":"object"},
{"l":"spire/math/Algebraic$.html","n":"One","t":"val One: Algebraic","d":"spire/math/Algebraic$","k":"val"},
{"l":"spire/math/Algebraic$.html","n":"Zero","t":"val Zero: Algebraic","d":"spire/math/Algebraic$","k":"val"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: Int): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: Long): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: Float): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: Double): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: BigInt): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: BigDecimal): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: Rational): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"apply","t":"def apply(n: String): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"nroot","t":"def nroot(value: BigDecimal, n: Int, mc: MathContext): BigDecimal","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"nroot","t":"def nroot(value: BigDecimal, n: Int, scale: Int, roundingMode: RoundingMode): BigDecimal","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"nrootApprox","t":"def nrootApprox(x: BigDecimal, n: Int): BigDecimal","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"root","t":"def root(poly: Polynomial[Rational], i: Int): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"roots","t":"def roots(poly: Polynomial[Rational]): Vector[Algebraic]","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$.html","n":"unsafeRoot","t":"def unsafeRoot(poly: Polynomial[BigInt], i: Int, lb: Rational, ub: Rational): Algebraic","d":"spire/math/Algebraic$","k":"def"},
{"l":"spire/math/Algebraic$$BFMSS$.html","n":"BFMSS","t":"object BFMSS extends ZeroBoundFunction","d":"spire/math/Algebraic$$BFMSS$","k":"object"},
{"l":"spire/math/Algebraic$$BFMSS$.html","n":"apply","t":"def apply(expr: Expr): Bound","d":"spire/math/Algebraic$$BFMSS$","k":"def"},
{"l":"spire/math/Algebraic$$BFMSS$$Bound.html","n":"Bound","t":"class Bound(l: Long, u: Long)","d":"spire/math/Algebraic$$BFMSS$$Bound","k":"class"},
{"l":"spire/math/Algebraic$$BFMSS$$Bound.html","n":"getBitBound","t":"def getBitBound(degreeBound: Long): Long","d":"spire/math/Algebraic$$BFMSS$$Bound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"BitBound","t":"class BitBound(val bitBound: Long) extends AnyVal","d":"spire/math/Algebraic$$BitBound","k":"class"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"*","t":"def *(that: BitBound): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"*","t":"def *(rhs: Int): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"+","t":"def +(that: BitBound): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"+","t":"def +(rhs: Int): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"-","t":"def -(that: BitBound): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"-","t":"def -(rhs: Int): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"/","t":"def /(that: BitBound): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"/","t":"def /(rhs: Int): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"bitBound","t":"val bitBound: Long","d":"spire/math/Algebraic$$BitBound","k":"val"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"decimalDigits","t":"def decimalDigits: Long","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"min","t":"def min(that: BitBound): BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound.html","n":"unary_-","t":"def unary_-: BitBound","d":"spire/math/Algebraic$$BitBound","k":"def"},
{"l":"spire/math/Algebraic$$BitBound$.html","n":"BitBound","t":"object BitBound","d":"spire/math/Algebraic$$BitBound$","k":"object"},
{"l":"spire/math/Algebraic$$BitBound$.html","n":"apply","t":"def apply(n: Int): BitBound","d":"spire/math/Algebraic$$BitBound$","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"Expr","t":"class Expr extends Serializable","d":"spire/math/Algebraic$$Expr","k":"class"},
{"l":"spire/math/Algebraic$$Expr.html","n":"bfmssBound","t":"def bfmssBound: BitBound","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"children","t":"def children: List[Expr]","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"degreeBound","t":"def degreeBound: Long","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"flags","t":"def flags: Flags","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"getBound","t":"def getBound(zbf: ZeroBoundFunction): Bound","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"liYapBound","t":"def liYapBound: BitBound","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"lowerBound","t":"def lowerBound: BitBound","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"separationBound","t":"def separationBound: BitBound","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr","k":"def"},
{"l":"spire/math/Algebraic$$Expr$.html","n":"Expr","t":"object Expr","d":"spire/math/Algebraic$$Expr$","k":"object"},
{"l":"spire/math/Algebraic$$Expr$$Add.html","n":"Add","t":"class Add(lhs: Expr, rhs: Expr) extends AddOrSubExpr","d":"spire/math/Algebraic$$Expr$$Add","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$AddOrSubExpr.html","n":"AddOrSubExpr","t":"class AddOrSubExpr extends BinaryExpr","d":"spire/math/Algebraic$$Expr$$AddOrSubExpr","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$AddOrSubExpr.html","n":"signum","t":"val signum: Int","d":"spire/math/Algebraic$$Expr$$AddOrSubExpr","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$AddOrSubExpr.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$AddOrSubExpr","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$AddOrSubExpr.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$AddOrSubExpr","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$BinaryExpr.html","n":"BinaryExpr","t":"class BinaryExpr extends Expr","d":"spire/math/Algebraic$$Expr$$BinaryExpr","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$BinaryExpr.html","n":"children","t":"def children: List[Expr]","d":"spire/math/Algebraic$$Expr$$BinaryExpr","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$BinaryExpr.html","n":"flagBits","t":"val flagBits: Int","d":"spire/math/Algebraic$$Expr$$BinaryExpr","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$BinaryExpr.html","n":"lhs","t":"val lhs: Expr","d":"spire/math/Algebraic$$Expr$$BinaryExpr","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$BinaryExpr.html","n":"rhs","t":"val rhs: Expr","d":"spire/math/Algebraic$$Expr$$BinaryExpr","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Constant.html","n":"Constant","t":"class Constant[A] extends Expr","d":"spire/math/Algebraic$$Expr$$Constant","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$Constant.html","n":"children","t":"def children: List[Expr]","d":"spire/math/Algebraic$$Expr$$Constant","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Constant.html","n":"value","t":"def value: A","d":"spire/math/Algebraic$$Expr$$Constant","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantBigDecimal.html","n":"ConstantBigDecimal","t":"class ConstantBigDecimal(value: BigDecimal) extends Constant[BigDecimal]","d":"spire/math/Algebraic$$Expr$$ConstantBigDecimal","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$ConstantBigDecimal.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$ConstantBigDecimal","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantBigDecimal.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$ConstantBigDecimal","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantBigDecimal.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$ConstantBigDecimal","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantBigDecimal.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$ConstantBigDecimal","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantDouble.html","n":"ConstantDouble","t":"class ConstantDouble(value: Double) extends Constant[Double]","d":"spire/math/Algebraic$$Expr$$ConstantDouble","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$ConstantDouble.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$ConstantDouble","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantDouble.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$ConstantDouble","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantDouble.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$ConstantDouble","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantDouble.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$ConstantDouble","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantLong.html","n":"ConstantLong","t":"class ConstantLong(value: Long) extends Constant[Long]","d":"spire/math/Algebraic$$Expr$$ConstantLong","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$ConstantLong.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$ConstantLong","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantLong.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$ConstantLong","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantLong.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$ConstantLong","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantLong.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$ConstantLong","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRational.html","n":"ConstantRational","t":"class ConstantRational(value: Rational) extends Constant[Rational]","d":"spire/math/Algebraic$$Expr$$ConstantRational","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRational.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$ConstantRational","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRational.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$ConstantRational","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRational.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$ConstantRational","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRational.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$ConstantRational","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"ConstantRoot","t":"class ConstantRoot(poly: Polynomial[BigInt], i: Int, lb: Rational, ub: Rational) extends Constant[Polynomial[BigInt]]","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"lead","t":"def lead: BigInt","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"tail","t":"def tail: BigInt","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$ConstantRoot.html","n":"value","t":"def value: Polynomial[BigInt]","d":"spire/math/Algebraic$$Expr$$ConstantRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Div.html","n":"Div","t":"class Div(lhs: Expr, rhs: Expr) extends BinaryExpr","d":"spire/math/Algebraic$$Expr$$Div","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$Div.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$Div","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Div.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$Div","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Div.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$Div","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"Flags","t":"class Flags(val bits: Int) extends AnyVal","d":"spire/math/Algebraic$$Expr$$Flags","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"bits","t":"val bits: Int","d":"spire/math/Algebraic$$Expr$$Flags","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"hasBigDecimalLeaf","t":"def hasBigDecimalLeaf: Boolean","d":"spire/math/Algebraic$$Expr$$Flags","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"hasDoubleLeaf","t":"def hasDoubleLeaf: Boolean","d":"spire/math/Algebraic$$Expr$$Flags","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"hasRationalLeaf","t":"def hasRationalLeaf: Boolean","d":"spire/math/Algebraic$$Expr$$Flags","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"isRadical","t":"def isRadical: Boolean","d":"spire/math/Algebraic$$Expr$$Flags","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"isRational","t":"def isRational: Boolean","d":"spire/math/Algebraic$$Expr$$Flags","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags.html","n":"|","t":"def |(that: Flags): Flags","d":"spire/math/Algebraic$$Expr$$Flags","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"Flags","t":"object Flags","d":"spire/math/Algebraic$$Expr$$Flags$","k":"object"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"BigDecimalLeaf","t":"val BigDecimalLeaf: Flags","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"DoubleLeaf","t":"val DoubleLeaf: Flags","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"HasBigDecimalLeaf","t":"val HasBigDecimalLeaf: 4","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"HasDoubleLeaf","t":"val HasDoubleLeaf: 2","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"HasRationalLeaf","t":"val HasRationalLeaf: 8","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"IntegerLeaf","t":"val IntegerLeaf: Flags","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"IsRadical","t":"val IsRadical: Flags","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"RadicalFlag","t":"val RadicalFlag: 1","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$Flags$.html","n":"RationalLeaf","t":"val RationalLeaf: Flags","d":"spire/math/Algebraic$$Expr$$Flags$","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$KRoot.html","n":"KRoot","t":"class KRoot(sub: Expr, k: Int) extends UnaryExpr","d":"spire/math/Algebraic$$Expr$$KRoot","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$KRoot.html","n":"flagBits","t":"val flagBits: Int","d":"spire/math/Algebraic$$Expr$$KRoot","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$KRoot.html","n":"hashCode","t":"val hashCode: Int","d":"spire/math/Algebraic$$Expr$$KRoot","k":"val"},
{"l":"spire/math/Algebraic$$Expr$$KRoot.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$KRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$KRoot.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$KRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$KRoot.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$KRoot","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Mul.html","n":"Mul","t":"class Mul(lhs: Expr, rhs: Expr) extends BinaryExpr","d":"spire/math/Algebraic$$Expr$$Mul","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$Mul.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$Mul","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Mul.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$Mul","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Mul.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$Mul","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Neg.html","n":"Neg","t":"class Neg(sub: Expr) extends UnaryExpr","d":"spire/math/Algebraic$$Expr$$Neg","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$Neg.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$Neg","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Neg.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$Neg","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Neg.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$Neg","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Neg.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$Neg","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Pow.html","n":"Pow","t":"class Pow(sub: Expr, k: Int) extends UnaryExpr","d":"spire/math/Algebraic$$Expr$$Pow","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$Pow.html","n":"flagBits","t":"def flagBits: Int","d":"spire/math/Algebraic$$Expr$$Pow","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Pow.html","n":"signum","t":"def signum: Int","d":"spire/math/Algebraic$$Expr$$Pow","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Pow.html","n":"toBigDecimal","t":"def toBigDecimal(digits: Int): BigDecimal","d":"spire/math/Algebraic$$Expr$$Pow","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Pow.html","n":"upperBound","t":"def upperBound: BitBound","d":"spire/math/Algebraic$$Expr$$Pow","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$Sub.html","n":"Sub","t":"class Sub(lhs: Expr, rhs: Expr) extends AddOrSubExpr","d":"spire/math/Algebraic$$Expr$$Sub","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$UnaryExpr.html","n":"UnaryExpr","t":"class UnaryExpr extends Expr","d":"spire/math/Algebraic$$Expr$$UnaryExpr","k":"class"},
{"l":"spire/math/Algebraic$$Expr$$UnaryExpr.html","n":"children","t":"def children: List[Expr]","d":"spire/math/Algebraic$$Expr$$UnaryExpr","k":"def"},
{"l":"spire/math/Algebraic$$Expr$$UnaryExpr.html","n":"sub","t":"val sub: Expr","d":"spire/math/Algebraic$$Expr$$UnaryExpr","k":"val"},
{"l":"spire/math/Algebraic$$LiYap$.html","n":"LiYap","t":"object LiYap extends ZeroBoundFunction","d":"spire/math/Algebraic$$LiYap$","k":"object"},
{"l":"spire/math/Algebraic$$LiYap$.html","n":"apply","t":"def apply(expr: Expr): Bound","d":"spire/math/Algebraic$$LiYap$","k":"def"},
{"l":"spire/math/Algebraic$$LiYap$$Bound.html","n":"Bound","t":"class Bound(lc: Long, tc: Long, measure: Long, lb: Long, ub: Long)","d":"spire/math/Algebraic$$LiYap$$Bound","k":"class"},
{"l":"spire/math/Algebraic$$LiYap$$Bound.html","n":"getBitBound","t":"def getBitBound(degreeBound: Long): Long","d":"spire/math/Algebraic$$LiYap$$Bound","k":"def"},
{"l":"spire/math/Algebraic$$ZeroBoundFunction.html","n":"ZeroBoundFunction","t":"class ZeroBoundFunction","d":"spire/math/Algebraic$$ZeroBoundFunction","k":"class"},
{"l":"spire/math/Algebraic$$ZeroBoundFunction.html","n":"Bound","t":"type Bound","d":"spire/math/Algebraic$$ZeroBoundFunction","k":"type"},
{"l":"spire/math/Algebraic$$ZeroBoundFunction.html","n":"apply","t":"def apply(expr: Expr): Bound","d":"spire/math/Algebraic$$ZeroBoundFunction","k":"def"},
{"l":"spire/math/AlgebraicAlgebra.html","n":"AlgebraicAlgebra","t":"class AlgebraicAlgebra extends AlgebraicIsField with AlgebraicIsNRoot with AlgebraicIsReal with Serializable","d":"spire/math/AlgebraicAlgebra","k":"class"},
{"l":"spire/math/AlgebraicInstances.html","n":"AlgebraicInstances","t":"trait AlgebraicInstances","d":"spire/math/AlgebraicInstances","k":"trait"},
{"l":"spire/math/AlgebraicInstances.html","n":"AlgebraicAlgebra","t":"val AlgebraicAlgebra: Field[Algebraic] & NRoot[Algebraic] & IsAlgebraic[Algebraic] & forCommutativeRing[Algebraic]","d":"spire/math/AlgebraicInstances","k":"val"},
{"l":"spire/math/AlgebraicInstances.html","n":"AlgebraicTag","t":"val AlgebraicTag: NumberTag[Algebraic]","d":"spire/math/AlgebraicInstances","k":"val"},
{"l":"spire/math/All.html","n":"All","t":"class All[A] extends Interval[A]","d":"spire/math/All","k":"class"},
{"l":"spire/math/All.html","n":"lowerBound","t":"def lowerBound: Unbound[A]","d":"spire/math/All","k":"def"},
{"l":"spire/math/All.html","n":"upperBound","t":"def upperBound: Unbound[A]","d":"spire/math/All","k":"def"},
{"l":"spire/math/Below.html","n":"Below","t":"class Below[A] extends Interval[A]","d":"spire/math/Below","k":"class"},
{"l":"spire/math/Below.html","n":"lowerBound","t":"def lowerBound: Unbound[A]","d":"spire/math/Below","k":"def"},
{"l":"spire/math/Below.html","n":"upperBound","t":"def upperBound: ValueBound[A]","d":"spire/math/Below","k":"def"},
{"l":"spire/math/BinaryMerge.html","n":"BinaryMerge","t":"class BinaryMerge","d":"spire/math/BinaryMerge","k":"class"},
{"l":"spire/math/BinaryMerge.html","n":"collision","t":"def collision(ai: Int, bi: Int): Unit","d":"spire/math/BinaryMerge","k":"def"},
{"l":"spire/math/BinaryMerge.html","n":"compare","t":"def compare(ai: Int, bi: Int): Int","d":"spire/math/BinaryMerge","k":"def"},
{"l":"spire/math/BinaryMerge.html","n":"fromA","t":"def fromA(a0: Int, a1: Int, bi: Int): Unit","d":"spire/math/BinaryMerge","k":"def"},
{"l":"spire/math/BinaryMerge.html","n":"fromB","t":"def fromB(ai: Int, b0: Int, b1: Int): Unit","d":"spire/math/BinaryMerge","k":"def"},
{"l":"spire/math/BinaryMerge.html","n":"merge0","t":"def merge0(a0: Int, a1: Int, b0: Int, b1: Int): Unit","d":"spire/math/BinaryMerge","k":"def"},
{"l":"spire/math/BinaryMerge$.html","n":"BinaryMerge","t":"object BinaryMerge extends Merge","d":"spire/math/BinaryMerge$","k":"object"},
{"l":"spire/math/BinaryMerge$.html","n":"merge","t":"def merge[@specialized T : ClassTag](a: Array[T], b: Array[T]): Array[T]","d":"spire/math/BinaryMerge$","k":"def"},
{"l":"spire/math/BitString.html","n":"BitString","t":"trait BitString[@specialized(Byte, Short, Int, Long) A] extends Bool[A]","d":"spire/math/BitString","k":"trait"},
{"l":"spire/math/BitString.html","n":"bitCount","t":"def bitCount(n: A): Int","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"highestOneBit","t":"def highestOneBit(n: A): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"leftShift","t":"def leftShift(n: A, i: Int): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"lowestOneBit","t":"def lowestOneBit(n: A): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"numberOfLeadingZeros","t":"def numberOfLeadingZeros(n: A): Int","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"numberOfTrailingZeros","t":"def numberOfTrailingZeros(n: A): Int","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"rightShift","t":"def rightShift(n: A, i: Int): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"rotateLeft","t":"def rotateLeft(n: A, i: Int): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"rotateRight","t":"def rotateRight(n: A, i: Int): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"signed","t":"def signed: Boolean","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"signedRightShift","t":"def signedRightShift(n: A, i: Int): A","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"toHexString","t":"def toHexString(n: A): String","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString.html","n":"width","t":"def width: Int","d":"spire/math/BitString","k":"def"},
{"l":"spire/math/BitString$.html","n":"BitString","t":"object BitString","d":"spire/math/BitString$","k":"object"},
{"l":"spire/math/BitString$.html","n":"apply","t":"def apply[A](implicit ev: BitString[A]): BitString[A]","d":"spire/math/BitString$","k":"def"},
{"l":"spire/math/Bounded.html","n":"Bounded","t":"class Bounded[A] extends Interval[A]","d":"spire/math/Bounded","k":"class"},
{"l":"spire/math/Bounded.html","n":"lowerBound","t":"def lowerBound: ValueBound[A]","d":"spire/math/Bounded","k":"def"},
{"l":"spire/math/Bounded.html","n":"upperBound","t":"def upperBound: ValueBound[A]","d":"spire/math/Bounded","k":"def"},
{"l":"spire/math/Complex$.html","n":"Complex","t":"object Complex extends ComplexInstances","d":"spire/math/Complex$","k":"object"},
{"l":"spire/math/Complex$.html","n":"apply","t":"def apply[@specialized(Float, Double) T : CommutativeRing](real: T): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"bigDecimalToComplex","t":"def bigDecimalToComplex(n: BigDecimal): Complex[BigDecimal]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"bigIntToComplex","t":"def bigIntToComplex(n: BigInt): Complex[BigDecimal]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"doubleToComplex","t":"def doubleToComplex(n: Double): Complex[Double]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"floatToComplex","t":"def floatToComplex(n: Float): Complex[Float]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"fromInt","t":"def fromInt[@specialized(Float, Double) T](n: Int)(implicit f: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"i","t":"def i[@specialized(Float, Double) T](implicit T: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"intToComplex","t":"def intToComplex(n: Int): Complex[Double]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"longToComplex","t":"def longToComplex(n: Long): Complex[Double]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"one","t":"def one[@specialized(Float, Double) T](implicit T: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"polar","t":"def polar[@specialized(Float, Double) T : Trig](magnitude: T, angle: T): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"rootOfUnity","t":"def rootOfUnity[@specialized(Float, Double) T](n: Int, x: Int)(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"rootsOfUnity","t":"def rootsOfUnity[@specialized(Float, Double) T](n: Int)(implicit f: Field[T], t: Trig[T]): Array[Complex[T]]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex$.html","n":"zero","t":"def zero[@specialized(Float, Double) T](implicit T: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex$","k":"def"},
{"l":"spire/math/Complex.html","n":"Complex","t":"class Complex[@specialized(Float, Double) T](real: T, imag: T) extends ScalaNumber with ScalaNumericConversions with Serializable","d":"spire/math/Complex","k":"class"},
{"l":"spire/math/Complex.html","n":"*","t":"def *(rhs: T)(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"*","t":"def *(b: Complex[T])(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"**","t":"def **(e: T)(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"**","t":"def **(b: Int)(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"**","t":"def **(b: Complex[T])(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"+","t":"def +(rhs: T)(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"+","t":"def +(b: Complex[T])(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"-","t":"def -(rhs: T)(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"-","t":"def -(b: Complex[T])(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"/","t":"def /(rhs: T)(implicit r: Field[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"/","t":"def /(b: Complex[T])(implicit f: Field[T], o: Order[T], s: Signed[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"=!=","t":"def =!=(that: Complex[_]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"===","t":"def ===(that: Complex[_]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"abs","t":"def abs(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T]): T","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"absSquare","t":"def absSquare(implicit r: CommutativeRing[T]): T","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"acos","t":"def acos(implicit f: Field[T], n: NRoot[T], o: Order[T], t: Trig[T], s0: Signed[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"arg","t":"def arg(implicit f: Field[T], s: Signed[T], t: Trig[T]): T","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"asPolarTuple","t":"def asPolarTuple(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): (T, T)","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"asTuple","t":"def asTuple: (T, T)","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"asin","t":"def asin(implicit f: Field[T], n: NRoot[T], o: Order[T], t: Trig[T], s0: Signed[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"atan","t":"def atan(implicit f: Field[T], o: Order[T], r: NRoot[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"ceil","t":"def ceil(implicit o: IsReal[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"complexSignum","t":"def complexSignum(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"conjugate","t":"def conjugate(implicit f: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"cos","t":"def cos(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"cosh","t":"def cosh(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"doubleValue","t":"def doubleValue: Double","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"eqv","t":"def eqv(b: Complex[T])(implicit o: Eq[T]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"exp","t":"def exp(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"floatValue","t":"def floatValue: Float","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"floor","t":"def floor(implicit o: IsReal[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"intValue","t":"def intValue: Int","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"isImaginary","t":"def isImaginary(implicit s: Signed[T]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"isReal","t":"def isReal(implicit s: Signed[T]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"isZero","t":"def isZero(implicit s: Signed[T]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"log","t":"def log(implicit f: Field[T], n: NRoot[T], o: Order[T], t: Trig[T], s: Signed[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"neqv","t":"def neqv(b: Complex[T])(implicit o: Eq[T]): Boolean","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"norm","t":"def norm(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T]): T","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"nroot","t":"def nroot(k: Int)(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"pow","t":"def pow(e: T)(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"pow","t":"def pow(b: Int)(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"pow","t":"def pow(b: Complex[T])(implicit f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"round","t":"def round(implicit o: IsReal[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"sin","t":"def sin(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"sinh","t":"def sinh(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"sqrt","t":"def sqrt(implicit f: Field[T], n0: NRoot[T], o: Order[T], s: Signed[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"tan","t":"def tan(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"tanh","t":"def tanh(implicit f: Field[T], t: Trig[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"toQuaternion","t":"def toQuaternion(implicit ev: AdditiveMonoid[T]): Quaternion[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"unary_-","t":"def unary_-(implicit r: CommutativeRing[T]): Complex[T]","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/Complex.html","n":"underlying","t":"def underlying: Object","d":"spire/math/Complex","k":"def"},
{"l":"spire/math/ComplexInstances.html","n":"ComplexInstances","t":"trait ComplexInstances extends ComplexInstances1","d":"spire/math/ComplexInstances","k":"trait"},
{"l":"spire/math/ComplexInstances.html","n":"ComplexEq","t":"def ComplexEq[A : Eq]: Eq[Complex[A]]","d":"spire/math/ComplexInstances","k":"def"},
{"l":"spire/math/ComplexInstances.html","n":"ComplexOnTrig","t":"def ComplexOnTrig[@specialized(Float, Double) A : Signed]: ComplexOnTrigImpl[A]","d":"spire/math/ComplexInstances","k":"def"},
{"l":"spire/math/ComplexInstances0.html","n":"ComplexInstances0","t":"trait ComplexInstances0","d":"spire/math/ComplexInstances0","k":"trait"},
{"l":"spire/math/ComplexInstances0.html","n":"ComplexOnCRing","t":"def ComplexOnCRing[A : Signed]: ComplexOnCRing[A]","d":"spire/math/ComplexInstances0","k":"def"},
{"l":"spire/math/ComplexInstances1.html","n":"ComplexInstances1","t":"trait ComplexInstances1 extends ComplexInstances0","d":"spire/math/ComplexInstances1","k":"trait"},
{"l":"spire/math/ComplexInstances1.html","n":"ComplexOnField","t":"def ComplexOnField[A : Signed]: ComplexOnField[A]","d":"spire/math/ComplexInstances1","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"ConvertableFrom","t":"trait ConvertableFrom[@specialized A]","d":"spire/math/ConvertableFrom","k":"trait"},
{"l":"spire/math/ConvertableFrom.html","n":"toAlgebraic","t":"def toAlgebraic(a: A): Algebraic","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toBigDecimal","t":"def toBigDecimal(a: A): BigDecimal","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toBigInt","t":"def toBigInt(a: A): BigInt","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toByte","t":"def toByte(a: A): Byte","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toDouble","t":"def toDouble(a: A): Double","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toFloat","t":"def toFloat(a: A): Float","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toInt","t":"def toInt(a: A): Int","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toLong","t":"def toLong(a: A): Long","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toNumber","t":"def toNumber(a: A): Number","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toRational","t":"def toRational(a: A): Rational","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toReal","t":"def toReal(a: A): Real","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toShort","t":"def toShort(a: A): Short","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toString","t":"def toString(a: A): String","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom.html","n":"toType","t":"def toType[B : ConvertableTo](a: A): B","d":"spire/math/ConvertableFrom","k":"def"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFrom","t":"object ConvertableFrom","d":"spire/math/ConvertableFrom$","k":"object"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromAlgebraic","t":"val ConvertableFromAlgebraic: ConvertableFrom[Algebraic]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromBigDecimal","t":"val ConvertableFromBigDecimal: ConvertableFrom[BigDecimal]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromBigInt","t":"val ConvertableFromBigInt: ConvertableFrom[BigInt]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromByte","t":"val ConvertableFromByte: ConvertableFrom[Byte]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromDouble","t":"val ConvertableFromDouble: ConvertableFrom[Double]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromFloat","t":"val ConvertableFromFloat: ConvertableFrom[Float]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromInt","t":"val ConvertableFromInt: ConvertableFrom[Int]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromLong","t":"val ConvertableFromLong: ConvertableFrom[Long]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromNatural","t":"val ConvertableFromNatural: ConvertableFrom[Natural]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromNumber","t":"val ConvertableFromNumber: ConvertableFrom[Number]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromRational","t":"val ConvertableFromRational: ConvertableFrom[Rational]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromSafeLong","t":"val ConvertableFromSafeLong: ConvertableFrom[SafeLong]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"ConvertableFromShort","t":"val ConvertableFromShort: ConvertableFrom[Short]","d":"spire/math/ConvertableFrom$","k":"val"},
{"l":"spire/math/ConvertableFrom$.html","n":"apply","t":"def apply[A](implicit ev: ConvertableFrom[A]): ConvertableFrom[A]","d":"spire/math/ConvertableFrom$","k":"def"},
{"l":"spire/math/ConvertableFrom$.html","n":"convertableFromComplex","t":"def convertableFromComplex[A : Integral]: ConvertableFromComplex[A]","d":"spire/math/ConvertableFrom$","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"ConvertableTo","t":"trait ConvertableTo[@specialized A]","d":"spire/math/ConvertableTo","k":"trait"},
{"l":"spire/math/ConvertableTo.html","n":"fromAlgebraic","t":"def fromAlgebraic(n: Algebraic): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromBigDecimal","t":"def fromBigDecimal(n: BigDecimal): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromBigInt","t":"def fromBigInt(n: BigInt): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromByte","t":"def fromByte(n: Byte): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromDouble","t":"def fromDouble(n: Double): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromFloat","t":"def fromFloat(n: Float): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromInt","t":"def fromInt(n: Int): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromLong","t":"def fromLong(n: Long): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromRational","t":"def fromRational(n: Rational): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromReal","t":"def fromReal(n: Real): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromShort","t":"def fromShort(n: Short): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo.html","n":"fromType","t":"def fromType[B : ConvertableFrom](b: B): A","d":"spire/math/ConvertableTo","k":"def"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableTo","t":"object ConvertableTo","d":"spire/math/ConvertableTo$","k":"object"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToAlgebraic","t":"val ConvertableToAlgebraic: ConvertableTo[Algebraic]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToBigDecimal","t":"val ConvertableToBigDecimal: ConvertableTo[BigDecimal]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToBigInt","t":"val ConvertableToBigInt: ConvertableTo[BigInt]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToByte","t":"val ConvertableToByte: ConvertableTo[Byte]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToDouble","t":"val ConvertableToDouble: ConvertableTo[Double]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToFloat","t":"val ConvertableToFloat: ConvertableTo[Float]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToInt","t":"val ConvertableToInt: ConvertableTo[Int]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToLong","t":"val ConvertableToLong: ConvertableTo[Long]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToNatural","t":"val ConvertableToNatural: ConvertableTo[Natural]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToNumber","t":"val ConvertableToNumber: ConvertableTo[Number]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToRational","t":"val ConvertableToRational: ConvertableTo[Rational]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToSafeLong","t":"val ConvertableToSafeLong: ConvertableTo[SafeLong]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"ConvertableToShort","t":"val ConvertableToShort: ConvertableTo[Short]","d":"spire/math/ConvertableTo$","k":"val"},
{"l":"spire/math/ConvertableTo$.html","n":"apply","t":"def apply[A](implicit ev: ConvertableTo[A]): ConvertableTo[A]","d":"spire/math/ConvertableTo$","k":"def"},
{"l":"spire/math/ConvertableTo$.html","n":"convertableToComplex","t":"def convertableToComplex[A : Integral]: ConvertableToComplex[A]","d":"spire/math/ConvertableTo$","k":"def"},
{"l":"spire/math/Empty.html","n":"Empty","t":"class Empty[A] extends Interval[A]","d":"spire/math/Empty","k":"class"},
{"l":"spire/math/Empty.html","n":"lowerBound","t":"def lowerBound: EmptyBound[A]","d":"spire/math/Empty","k":"def"},
{"l":"spire/math/Empty.html","n":"upperBound","t":"def upperBound: EmptyBound[A]","d":"spire/math/Empty","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"FastComplex","t":"object FastComplex","d":"spire/math/FastComplex$","k":"object"},
{"l":"spire/math/FastComplex$.html","n":"abs","t":"def abs(d: Long): Float","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"add","t":"def add(a: Long, b: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"angle","t":"def angle(d: Long): Float","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"apply","t":"def apply(real: Float, imag: Float): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"apply","t":"def apply(real: Double, imag: Double): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"bits","t":"def bits(n: Float): Int","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"bits","t":"def bits(n: Int): Float","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"complexSignum","t":"def complexSignum(d: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"conjugate","t":"def conjugate(d: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"decode","t":"def decode(d: Long): (Float, Float)","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"divide","t":"def divide(a: Long, b: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"encode","t":"def encode(real: Float, imag: Float): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"i","t":"val i: Long","d":"spire/math/FastComplex$","k":"val"},
{"l":"spire/math/FastComplex$.html","n":"imag","t":"def imag(d: Long): Float","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"isWhole","t":"def isWhole(d: Long): Boolean","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"multiply","t":"def multiply(a: Long, b: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"negate","t":"def negate(a: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"one","t":"val one: Long","d":"spire/math/FastComplex$","k":"val"},
{"l":"spire/math/FastComplex$.html","n":"polar","t":"def polar(magnitude: Float, angle: Float): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"pow","t":"def pow(a: Long, b: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"real","t":"def real(d: Long): Float","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"signum","t":"def signum(d: Long): Int","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"subtract","t":"def subtract(a: Long, b: Long): Long","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"toRepr","t":"def toRepr(d: Long): String","d":"spire/math/FastComplex$","k":"def"},
{"l":"spire/math/FastComplex$.html","n":"zero","t":"val zero: Long","d":"spire/math/FastComplex$","k":"val"},
{"l":"spire/math/FloatComplex$.html","n":"FloatComplex","t":"object FloatComplex","d":"spire/math/FloatComplex$","k":"object"},
{"l":"spire/math/FloatComplex$.html","n":"apply","t":"def apply(real: Float, imag: Float): FloatComplex","d":"spire/math/FloatComplex$","k":"def"},
{"l":"spire/math/FloatComplex$.html","n":"apply","t":"def apply(real: Double, imag: Double): FloatComplex","d":"spire/math/FloatComplex$","k":"def"},
{"l":"spire/math/FloatComplex$.html","n":"i","t":"val i: FloatComplex","d":"spire/math/FloatComplex$","k":"val"},
{"l":"spire/math/FloatComplex$.html","n":"one","t":"val one: FloatComplex","d":"spire/math/FloatComplex$","k":"val"},
{"l":"spire/math/FloatComplex$.html","n":"polar","t":"def polar(magnitude: Float, angle: Float): FloatComplex","d":"spire/math/FloatComplex$","k":"def"},
{"l":"spire/math/FloatComplex$.html","n":"zero","t":"val zero: FloatComplex","d":"spire/math/FloatComplex$","k":"val"},
{"l":"spire/math/FloatComplex.html","n":"FloatComplex","t":"class FloatComplex(val u: Long) extends AnyVal","d":"spire/math/FloatComplex","k":"class"},
{"l":"spire/math/FloatComplex.html","n":"*","t":"def *(b: FloatComplex): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"**","t":"def **(b: FloatComplex): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"**","t":"def **(b: Int): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"+","t":"def +(b: FloatComplex): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"-","t":"def -(b: FloatComplex): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"/","t":"def /(b: FloatComplex): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"abs","t":"def abs: Float","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"angle","t":"def angle: Float","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"complexSignum","t":"def complexSignum: FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"conjugate","t":"def conjugate: FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"imag","t":"def imag: Float","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"negate","t":"def negate: FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"pow","t":"def pow(b: FloatComplex): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"pow","t":"def pow(b: Int): FloatComplex","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"real","t":"def real: Float","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"repr","t":"def repr: String","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"signum","t":"def signum: Int","d":"spire/math/FloatComplex","k":"def"},
{"l":"spire/math/FloatComplex.html","n":"u","t":"val u: Long","d":"spire/math/FloatComplex","k":"val"},
{"l":"spire/math/Fractional.html","n":"Fractional","t":"trait Fractional[@specialized(Float, Double) A] extends Field[A] with NRoot[A] with Integral[A] with Order[A]","d":"spire/math/Fractional","k":"trait"},
{"l":"spire/math/Fractional$.html","n":"Fractional","t":"object Fractional","d":"spire/math/Fractional$","k":"object"},
{"l":"spire/math/Fractional$.html","n":"AlgebraicIsFractional","t":"val AlgebraicIsFractional: Fractional[Algebraic]","d":"spire/math/Fractional$","k":"val"},
{"l":"spire/math/Fractional$.html","n":"BigDecimalIsFractional","t":"val BigDecimalIsFractional: Fractional[BigDecimal]","d":"spire/math/Fractional$","k":"val"},
{"l":"spire/math/Fractional$.html","n":"DoubleIsFractional","t":"val DoubleIsFractional: Fractional[Double]","d":"spire/math/Fractional$","k":"val"},
{"l":"spire/math/Fractional$.html","n":"FloatIsFractional","t":"val FloatIsFractional: Fractional[Float]","d":"spire/math/Fractional$","k":"val"},
{"l":"spire/math/Fractional$.html","n":"NumberIsFractional","t":"val NumberIsFractional: Fractional[Number]","d":"spire/math/Fractional$","k":"val"},
{"l":"spire/math/Fractional$.html","n":"RationalIsFractional","t":"val RationalIsFractional: Fractional[Rational]","d":"spire/math/Fractional$","k":"val"},
{"l":"spire/math/Fractional$.html","n":"apply","t":"def apply[A](implicit ev: Fractional[A]): Fractional[A]","d":"spire/math/Fractional$","k":"def"},
{"l":"spire/math/HighBranchingMedianOf5.html","n":"HighBranchingMedianOf5","t":"trait HighBranchingMedianOf5","d":"spire/math/HighBranchingMedianOf5","k":"trait"},
{"l":"spire/math/HighBranchingMedianOf5.html","n":"mo5","t":"def mo5[@specialized A](data: Array[A], offset: Int, stride: Int)(implicit o: Order[A]): Unit","d":"spire/math/HighBranchingMedianOf5","k":"def"},
{"l":"spire/math/InsertionSort$.html","n":"InsertionSort","t":"object InsertionSort extends Sort","d":"spire/math/InsertionSort$","k":"object"},
{"l":"spire/math/InsertionSort$.html","n":"sort","t":"def sort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/InsertionSort$","k":"def"},
{"l":"spire/math/InsertionSort$.html","n":"sort","t":"def sort[@specialized A : Order](data: Array[A], start: Int, end: Int): Unit","d":"spire/math/InsertionSort$","k":"def"},
{"l":"spire/math/Integral.html","n":"Integral","t":"trait Integral[@specialized(Int, Long) A] extends EuclideanRing[A] with ConvertableFrom[A] with ConvertableTo[A] with IsReal[A] with Order[A]","d":"spire/math/Integral","k":"trait"},
{"l":"spire/math/Integral$.html","n":"Integral","t":"object Integral","d":"spire/math/Integral$","k":"object"},
{"l":"spire/math/Integral$.html","n":"BigIntIsIntegral","t":"val BigIntIsIntegral: Integral[BigInt]","d":"spire/math/Integral$","k":"val"},
{"l":"spire/math/Integral$.html","n":"ByteIsIntegral","t":"val ByteIsIntegral: Integral[Byte]","d":"spire/math/Integral$","k":"val"},
{"l":"spire/math/Integral$.html","n":"IntIsIntegral","t":"val IntIsIntegral: Integral[Int]","d":"spire/math/Integral$","k":"val"},
{"l":"spire/math/Integral$.html","n":"LongIsIntegral","t":"val LongIsIntegral: Integral[Long]","d":"spire/math/Integral$","k":"val"},
{"l":"spire/math/Integral$.html","n":"SafeLongIsIntegral","t":"val SafeLongIsIntegral: Integral[SafeLong]","d":"spire/math/Integral$","k":"val"},
{"l":"spire/math/Integral$.html","n":"ShortIsIntegral","t":"val ShortIsIntegral: Integral[Short]","d":"spire/math/Integral$","k":"val"},
{"l":"spire/math/Integral$.html","n":"apply","t":"def apply[A](implicit ev: Integral[A]): Integral[A]","d":"spire/math/Integral$","k":"def"},
{"l":"spire/math/IntegralOps.html","n":"IntegralOps","t":"class IntegralOps[A](lhs: A)(implicit ev: Integral[A])","d":"spire/math/IntegralOps","k":"class"},
{"l":"spire/math/IntegralOps.html","n":"!","t":"def !: BigInt","d":"spire/math/IntegralOps","k":"def"},
{"l":"spire/math/IntegralOps.html","n":"choose","t":"def choose(rhs: A): BigInt","d":"spire/math/IntegralOps","k":"def"},
{"l":"spire/math/IntegralOps.html","n":"coerce","t":"def coerce(a: A): Long","d":"spire/math/IntegralOps","k":"def"},
{"l":"spire/math/IntegralOps.html","n":"toSafeLong","t":"def toSafeLong: SafeLong","d":"spire/math/IntegralOps","k":"def"},
{"l":"spire/math/Interval.html","n":"Interval","t":"class Interval[A] extends Serializable","d":"spire/math/Interval","k":"class"},
{"l":"spire/math/Interval.html","n":"&","t":"def &(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"*","t":"def *(rhs: Interval[A])(implicit o: Order[A], ev: Semiring[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"*","t":"def *(rhs: A)(implicit o: Order[A], ev: Semiring[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"+","t":"def +(rhs: Interval[A])(implicit o: Order[A], ev: AdditiveSemigroup[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"+","t":"def +(rhs: A)(implicit ev: AdditiveSemigroup[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"-","t":"def -(rhs: Interval[A])(implicit o: Order[A], ev: AdditiveGroup[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"-","t":"def -(rhs: A)(implicit ev: AdditiveGroup[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"--","t":"def --(rhs: Interval[A])(implicit o: Order[A]): List[Interval[A]]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"/","t":"def /(rhs: Interval[A])(implicit o: Order[A], ev: Field[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"/","t":"def /(rhs: A)(implicit o: Order[A], ev: Field[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"\\","t":"def \\(rhs: Interval[A])(implicit o: Order[A]): List[Interval[A]]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"abs","t":"def abs(implicit o: Order[A], m: AdditiveGroup[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"bottom","t":"def bottom(epsilon: A)(implicit r: AdditiveGroup[A]): Option[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"combine","t":"def combine(rhs: Interval[A])(f: (A, A) => A)(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"contains","t":"def contains(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"crosses","t":"def crosses(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"crossesZero","t":"def crossesZero(implicit o: Order[A], ev: AdditiveMonoid[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"dist","t":"def dist(min: A, max: A, epsilon: A)(implicit u: Uniform[A], r: AdditiveGroup[A]): Dist[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"doesNotContain","t":"def doesNotContain(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"fold","t":"def fold[B](f: (Bound[A], Bound[A]) => B): B","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"foldOver","t":"def foldOver[B](init: B, step: A)(f: (B, A) => B)(implicit o: Order[A], ev: AdditiveMonoid[A], nt: NumberTag[A]): B","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"hasAbove","t":"def hasAbove(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"hasAtOrAbove","t":"def hasAtOrAbove(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"hasAtOrBelow","t":"def hasAtOrBelow(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"hasBelow","t":"def hasBelow(t: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"intersect","t":"def intersect(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"intersects","t":"def intersects(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isAt","t":"def isAt(t: A)(implicit o: Eq[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isBounded","t":"def isBounded: Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isEmpty","t":"def isEmpty: Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isPoint","t":"def isPoint: Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isProperSubsetOf","t":"def isProperSubsetOf(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isProperSupersetOf","t":"def isProperSupersetOf(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isSubsetOf","t":"def isSubsetOf(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"isSupersetOf","t":"def isSupersetOf(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"iterator","t":"def iterator(step: A)(implicit o: Order[A], ev: AdditiveMonoid[A], nt: NumberTag[A]): Iterator[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"loop","t":"def loop(step: A)(f: A => Unit)(implicit o: Order[A], ev: AdditiveMonoid[A], nt: NumberTag[A]): Unit","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"lowerBound","t":"def lowerBound: Bound[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"mapAroundZero","t":"def mapAroundZero[B](f: Interval[A] => B)(implicit o: Order[A], ev: AdditiveMonoid[A]): (B, B)","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"mapBounds","t":"def mapBounds[B : Order](f: A => B): Interval[B]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"nonEmpty","t":"def nonEmpty: Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"nroot","t":"def nroot(k: Int)(implicit o: Order[A], r: Ring[A], n: NRoot[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"overlap","t":"def overlap(rhs: Interval[A])(implicit o: Order[A]): Overlap[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"pow","t":"def pow(k: Int)(implicit o: Order[A], r: Ring[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"reciprocal","t":"def reciprocal(implicit o: Order[A], ev: Field[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"split","t":"def split(t: A)(implicit o: Order[A]): (Interval[A], Interval[A])","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"splitAtZero","t":"def splitAtZero(implicit o: Order[A], ev: AdditiveMonoid[A]): (Interval[A], Interval[A])","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"sqrt","t":"def sqrt(implicit o: Order[A], r: Ring[A], n: NRoot[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"top","t":"def top(epsilon: A)(implicit r: AdditiveGroup[A]): Option[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"translate","t":"def translate(p: Polynomial[A])(implicit o: Order[A], ev: Field[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"unary_-","t":"def unary_-(implicit ev: AdditiveGroup[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"unary_~","t":"def unary_~(implicit o: Order[A]): List[Interval[A]]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"union","t":"def union(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"upperBound","t":"def upperBound: Bound[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"vmax","t":"def vmax(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"vmin","t":"def vmin(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"|","t":"def |(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"∈:","t":"def ∈:(a: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"∉:","t":"def ∉:(a: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"∋","t":"def ∋(rhs: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"∌","t":"def ∌(rhs: A)(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"∩","t":"def ∩(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"∪","t":"def ∪(rhs: Interval[A])(implicit o: Order[A]): Interval[A]","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"⊂","t":"def ⊂(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"⊃","t":"def ⊃(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"⊆","t":"def ⊆(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval.html","n":"⊇","t":"def ⊇(rhs: Interval[A])(implicit o: Order[A]): Boolean","d":"spire/math/Interval","k":"def"},
{"l":"spire/math/Interval$.html","n":"Interval","t":"object Interval","d":"spire/math/Interval$","k":"object"},
{"l":"spire/math/Interval$.html","n":"above","t":"def above[A : Order](a: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"all","t":"def all[A : Order]: Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"apply","t":"def apply[A : Order](lower: A, upper: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"apply","t":"def apply(s: String): Interval[Rational]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"atOrAbove","t":"def atOrAbove[A : Order](a: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"atOrBelow","t":"def atOrBelow[A : Order](a: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"below","t":"def below[A : Order](a: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"closed","t":"def closed[A : Order](lower: A, upper: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"empty","t":"def empty[A : Order]: Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"eq","t":"def eq[A : Eq]: Eq[Interval[A]]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"errorBounds","t":"def errorBounds(d: Double): Interval[Rational]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"fromBounds","t":"def fromBounds[A : Order](lower: Bound[A], upper: Bound[A]): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"open","t":"def open[A : Order](lower: A, upper: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"openLower","t":"def openLower[A : Order](lower: A, upper: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"openUpper","t":"def openUpper[A : Order](lower: A, upper: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"point","t":"def point[A : Order](a: A): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"semiring","t":"def semiring[A](implicit ev: Ring[A], o: Order[A]): Semiring[Interval[A]]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Interval$.html","n":"zero","t":"def zero[A : Order](implicit evidence$5: Order[A], r: Semiring[A]): Interval[A]","d":"spire/math/Interval$","k":"def"},
{"l":"spire/math/Jet$.html","n":"Jet","t":"object Jet extends JetInstances","d":"spire/math/Jet$","k":"object"},
{"l":"spire/math/Jet$.html","n":"apply","t":"def apply[@specialized(Float, Double) T](implicit c: ClassTag[T], d: JetDim, s: Semiring[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"apply","t":"def apply[@specialized(Float, Double) T](real: T)(implicit c: ClassTag[T], d: JetDim, s: Semiring[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"apply","t":"def apply[@specialized(Float, Double) T](a: T, k: Int)(implicit c: ClassTag[T], d: JetDim, r: Rig[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"bigDecimalToJet","t":"def bigDecimalToJet(n: BigDecimal)(implicit d: JetDim): Jet[BigDecimal]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"bigIntToJet","t":"def bigIntToJet(n: BigInt)(implicit d: JetDim): Jet[BigDecimal]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"doubleToJet","t":"def doubleToJet(n: Double)(implicit d: JetDim): Jet[Double]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"floatToJet","t":"def floatToJet(n: Float)(implicit d: JetDim): Jet[Float]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"fromInt","t":"def fromInt[@specialized(Float, Double) T](n: Int)(implicit c: ClassTag[T], d: JetDim, r: Ring[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"h","t":"def h[@specialized(Float, Double) T](k: Int)(implicit c: ClassTag[T], d: JetDim, r: Rig[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"intToJet","t":"def intToJet(n: Int)(implicit d: JetDim): Jet[Double]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"longToJet","t":"def longToJet(n: Long)(implicit d: JetDim): Jet[Double]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"one","t":"def one[@specialized(Float, Double) T](implicit c: ClassTag[T], d: JetDim, r: Rig[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet$.html","n":"zero","t":"def zero[@specialized(Float, Double) T](implicit c: ClassTag[T], d: JetDim, s: Semiring[T]): Jet[T]","d":"spire/math/Jet$","k":"def"},
{"l":"spire/math/Jet.html","n":"Jet","t":"class Jet[@specialized(Float, Double) T](real: T, infinitesimal: Array[T]) extends ScalaNumber with ScalaNumericConversions with Serializable","d":"spire/math/Jet","k":"class"},
{"l":"spire/math/Jet.html","n":"%","t":"def %(b: Jet[T])(implicit c: ClassTag[T], f: Field[T], r: IsReal[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"*","t":"def *(b: T)(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"*","t":"def *(b: Jet[T])(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"**","t":"def **(b: Int)(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"**","t":"def **(b: Jet[T])(implicit c: ClassTag[T], f: Field[T], o: Order[T], s: Signed[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"+","t":"def +(b: T)(implicit f: Field[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"+","t":"def +(b: Jet[T])(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"-","t":"def -(b: T)(implicit f: Field[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"-","t":"def -(b: Jet[T])(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"/","t":"def /(b: T)(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"/","t":"def /(b: Jet[T])(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"/%","t":"def /%(b: Jet[T])(implicit c: ClassTag[T], f: Field[T], r: IsReal[T], v: VectorSpace[Array[T], T]): (Jet[T], Jet[T])","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"/~","t":"def /~(b: Jet[T])(implicit c: ClassTag[T], f: Field[T], r: IsReal[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"=!=","t":"def =!=(that: Jet[_]): Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"===","t":"def ===(that: Jet[_]): Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"abs","t":"def abs(implicit f: Field[T], o: Order[T], s: Signed[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"acos","t":"def acos(implicit f: Field[T], n: NRoot[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"asTuple","t":"def asTuple: (T, Array[T])","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"asin","t":"def asin(implicit f: Field[T], n: NRoot[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"atan","t":"def atan(implicit f: Field[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"atan2","t":"def atan2(a: Jet[T])(implicit f: Field[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"ceil","t":"def ceil(implicit c: ClassTag[T], r: IsReal[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"cos","t":"def cos(implicit f: Field[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"cosh","t":"def cosh(implicit t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"dimension","t":"def dimension: Int","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"eqv","t":"def eqv(b: Jet[T])(implicit o: Eq[T]): Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"exp","t":"def exp(implicit t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"floor","t":"def floor(implicit c: ClassTag[T], r: IsReal[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"isInfinitesimal","t":"def isInfinitesimal: Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"isReal","t":"def isReal: Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"jetDimension","t":"def jetDimension: JetDim","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"log","t":"def log(implicit f: Field[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"neqv","t":"def neqv(b: Jet[T])(implicit o: Eq[T]): Boolean","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"nroot","t":"def nroot(k: Int)(implicit f: Field[T], o: Order[T], s: Signed[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"pow","t":"def pow(p: T)(implicit f: Field[T], o: Order[T], s: Signed[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"pow","t":"def pow(p: Int)(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"pow","t":"def pow(b: Jet[T])(implicit c: ClassTag[T], f: Field[T], m: CModule[Array[T], T], o: Order[T], s: Signed[T], t: Trig[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"powScalarToJet","t":"def powScalarToJet(a: T)(implicit c: ClassTag[T], f: Field[T], m: CModule[Array[T], T], o: Order[T], s: Signed[T], t: Trig[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"round","t":"def round(implicit c: ClassTag[T], r: IsReal[T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"signum","t":"def signum(implicit r: Signed[T]): Int","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"sin","t":"def sin(implicit t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"sinh","t":"def sinh(implicit t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"sqrt","t":"def sqrt(implicit f: Field[T], n: NRoot[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"tan","t":"def tan(implicit f: Field[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"tanh","t":"def tanh(implicit f: Field[T], t: Trig[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/Jet.html","n":"unary_-","t":"def unary_-(implicit f: Field[T], v: VectorSpace[Array[T], T]): Jet[T]","d":"spire/math/Jet","k":"def"},
{"l":"spire/math/JetDim.html","n":"JetDim","t":"class JetDim(dimension: Int)","d":"spire/math/JetDim","k":"class"},
{"l":"spire/math/JetInstances.html","n":"JetInstances","t":"trait JetInstances","d":"spire/math/JetInstances","k":"trait"},
{"l":"spire/math/JetInstances.html","n":"JetAlgebra","t":"def JetAlgebra[@specialized(Float, Double) T](implicit c: ClassTag[T], d: JetDim, f: Field[T], n: NRoot[T], o: Order[T], s: Signed[T], t: Trig[T]): JetAlgebra[T]","d":"spire/math/JetInstances","k":"def"},
{"l":"spire/math/JetInstances.html","n":"JetEq","t":"def JetEq[T : Eq]: Eq[Jet[T]]","d":"spire/math/JetInstances","k":"def"},
{"l":"spire/math/LinearMerge$.html","n":"LinearMerge","t":"object LinearMerge extends Merge","d":"spire/math/LinearMerge$","k":"object"},
{"l":"spire/math/LinearMerge$.html","n":"merge","t":"def merge[@specialized T : ClassTag](a: Array[T], b: Array[T]): Array[T]","d":"spire/math/LinearMerge$","k":"def"},
{"l":"spire/math/LinearSelect$.html","n":"LinearSelect","t":"object LinearSelect extends SelectLike with HighBranchingMedianOf5","d":"spire/math/LinearSelect$","k":"object"},
{"l":"spire/math/LinearSelect$.html","n":"approxMedian","t":"def approxMedian[@specialized A : Order](data: Array[A], left: Int, right: Int, stride: Int): A","d":"spire/math/LinearSelect$","k":"def"},
{"l":"spire/math/Merge.html","n":"Merge","t":"trait Merge","d":"spire/math/Merge","k":"trait"},
{"l":"spire/math/Merge.html","n":"merge","t":"def merge[@specialized A : ClassTag](a: Array[A], b: Array[A]): Array[A]","d":"spire/math/Merge","k":"def"},
{"l":"spire/math/MergeSort$.html","n":"MergeSort","t":"object MergeSort extends Sort","d":"spire/math/MergeSort$","k":"object"},
{"l":"spire/math/MergeSort$.html","n":"merge","t":"def merge[@specialized A](in: Array[A], out: Array[A], start: Int, mid: Int, end: Int)(implicit o: Order[A]): Unit","d":"spire/math/MergeSort$","k":"def"},
{"l":"spire/math/MergeSort$.html","n":"sort","t":"def sort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/MergeSort$","k":"def"},
{"l":"spire/math/MergeSort$.html","n":"startStep","t":"def startStep: Int","d":"spire/math/MergeSort$","k":"def"},
{"l":"spire/math/MergeSort$.html","n":"startWidth","t":"def startWidth: Int","d":"spire/math/MergeSort$","k":"def"},
{"l":"spire/math/Natural.html","n":"Natural","t":"class Natural extends ScalaNumber with ScalaNumericConversions with Serializable","d":"spire/math/Natural","k":"class"},
{"l":"spire/math/Natural.html","n":"%","t":"def %(rd: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"%","t":"def %(rhs: BigInt): BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"%","t":"def %(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"&","t":"def &(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"&","t":"def &(rhs: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"*","t":"def *(rd: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"*","t":"def *(rhs: BigInt): BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"*","t":"def *(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"+","t":"def +(rd: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"+","t":"def +(rhs: BigInt): BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"+","t":"def +(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"-","t":"def -(rd: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"-","t":"def -(rhs: BigInt): BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"-","t":"def -(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/","t":"def /(rd: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/","t":"def /(rhs: BigInt): BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/","t":"def /(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/%","t":"def /%(rd: UInt): (Natural, Natural)","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/%","t":"def /%(rhs: BigInt): (BigInt, BigInt)","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/%","t":"def /%(rhs: Natural): (Natural, Natural)","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/~","t":"def /~(rd: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/~","t":"def /~(rhs: BigInt): BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"/~","t":"def /~(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<","t":"def <(rhs: Natural): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<","t":"def <(r: UInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<","t":"def <(r: BigInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<<","t":"def <<(n: Int): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<=","t":"def <=(rhs: Natural): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<=","t":"def <=(r: UInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"<=","t":"def <=(r: BigInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"=!=","t":"def =!=(rhs: Natural): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"===","t":"def ===(rhs: Natural): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">","t":"def >(rhs: Natural): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">","t":"def >(r: UInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">","t":"def >(r: BigInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">=","t":"def >=(rhs: Natural): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">=","t":"def >=(r: UInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">=","t":"def >=(r: BigInt): Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":">>","t":"def >>(n: Int): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"^","t":"def ^(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"^","t":"def ^(rhs: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"chop","t":"def chop(n: Int): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"compare","t":"def compare(rhs: UInt): Int","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"compare","t":"def compare(rhs: Natural): Int","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"digit","t":"def digit: UInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"doubleValue","t":"def doubleValue: Double","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"floatValue","t":"def floatValue: Float","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"foldDigitsLeft","t":"def foldDigitsLeft[@specialized A](a: A)(f: (A, UInt) => A): A","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"foldDigitsRight","t":"def foldDigitsRight[@specialized A](a: A)(f: (A, UInt) => A): A","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"getDigitLength","t":"def getDigitLength: Int","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"getNumBits","t":"def getNumBits: Int","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"intValue","t":"def intValue: Int","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"isEven","t":"def isEven: Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"isOdd","t":"def isOdd: Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"isOne","t":"def isOne: Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"longValue","t":"def longValue: Long","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"pow","t":"def pow(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"pow","t":"def pow(rhs: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"powerOfTwo","t":"def powerOfTwo: Int","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"reversed","t":"def reversed: Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"toArray","t":"def toArray: Array[Int]","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"toList","t":"def toList: List[UInt]","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"toRepr","t":"def toRepr: String","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"trim","t":"def trim: Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"underlying","t":"def underlying: Object","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"|","t":"def |(rhs: Natural): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural.html","n":"|","t":"def |(rhs: UInt): Natural","d":"spire/math/Natural","k":"def"},
{"l":"spire/math/Natural$.html","n":"Natural","t":"object Natural extends NaturalInstances","d":"spire/math/Natural$","k":"object"},
{"l":"spire/math/Natural$.html","n":"apply","t":"def apply(us: UInt*): Natural","d":"spire/math/Natural$","k":"def"},
{"l":"spire/math/Natural$.html","n":"apply","t":"def apply(n: Long): Natural","d":"spire/math/Natural$","k":"def"},
{"l":"spire/math/Natural$.html","n":"apply","t":"def apply(n: BigInt): Natural","d":"spire/math/Natural$","k":"def"},
{"l":"spire/math/Natural$.html","n":"apply","t":"def apply(s: String): Natural","d":"spire/math/Natural$","k":"def"},
{"l":"spire/math/Natural$.html","n":"naturalToBigInt","t":"def naturalToBigInt(n: Natural): BigInt","d":"spire/math/Natural$","k":"def"},
{"l":"spire/math/Natural$.html","n":"one","t":"val one: Natural","d":"spire/math/Natural$","k":"val"},
{"l":"spire/math/Natural$.html","n":"zero","t":"val zero: Natural","d":"spire/math/Natural$","k":"val"},
{"l":"spire/math/Natural$$Digit.html","n":"Digit","t":"class Digit(d: UInt, tl: Natural) extends Natural with Serializable","d":"spire/math/Natural$$Digit","k":"class"},
{"l":"spire/math/Natural$$Digit.html","n":"%","t":"def %(n: UInt): Natural","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"*","t":"def *(n: UInt): Natural","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"+","t":"def +(n: UInt): Natural","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"-","t":"def -(n: UInt): Natural","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"/","t":"def /(n: UInt): Natural","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"/%","t":"def /%(n: UInt): (Natural, Natural)","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"digit","t":"def digit: UInt","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$Digit.html","n":"tail","t":"def tail: Natural","d":"spire/math/Natural$$Digit","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"End","t":"class End(d: UInt) extends Natural with Serializable","d":"spire/math/Natural$$End","k":"class"},
{"l":"spire/math/Natural$$End.html","n":"%","t":"def %(n: UInt): Natural","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"*","t":"def *(n: UInt): Natural","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"+","t":"def +(n: UInt): Natural","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"-","t":"def -(n: UInt): Natural","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"/","t":"def /(n: UInt): Natural","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"/%","t":"def /%(n: UInt): (Natural, Natural)","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/Natural$$End.html","n":"digit","t":"def digit: UInt","d":"spire/math/Natural$$End","k":"def"},
{"l":"spire/math/NaturalAlgebra.html","n":"NaturalAlgebra","t":"class NaturalAlgebra extends NaturalIsCRig with NaturalTruncatedDivision with Serializable","d":"spire/math/NaturalAlgebra","k":"class"},
{"l":"spire/math/NaturalInstances.html","n":"NaturalInstances","t":"trait NaturalInstances","d":"spire/math/NaturalInstances","k":"trait"},
{"l":"spire/math/NaturalInstances.html","n":"NaturalAlgebra","t":"val NaturalAlgebra: CommutativeRig[Natural] & Order[Natural] & forAdditiveCommutativeMonoid[Natural] & TruncatedDivision[Natural]","d":"spire/math/NaturalInstances","k":"val"},
{"l":"spire/math/NaturalInstances.html","n":"NaturalTag","t":"val NaturalTag: NumberTag[Natural]","d":"spire/math/NaturalInstances","k":"val"},
{"l":"spire/math/Number$.html","n":"Number","t":"object Number extends NumberInstances","d":"spire/math/Number$","k":"object"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: Int): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: Long): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: BigInt): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: SafeLong): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: BigDecimal): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: Rational): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: Natural): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: Float): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(n: Double): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"apply","t":"def apply(s: String): Number","d":"spire/math/Number$","k":"def"},
{"l":"spire/math/Number$.html","n":"one","t":"val one: Number","d":"spire/math/Number$","k":"val"},
{"l":"spire/math/Number$.html","n":"zero","t":"val zero: Number","d":"spire/math/Number$","k":"val"},
{"l":"spire/math/Number.html","n":"Number","t":"trait Number extends ScalaNumericConversions with Serializable","d":"spire/math/Number","k":"trait"},
{"l":"spire/math/Number.html","n":"&","t":"def &(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"*","t":"def *(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"**","t":"def **(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"+","t":"def +(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"-","t":"def -(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"/","t":"def /(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"<","t":"def <(rhs: Number): Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"<<","t":"def <<(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"<=","t":"def <=(rhs: Number): Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"=!=","t":"def =!=(rhs: Number): Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"===","t":"def ===(rhs: Number): Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":">","t":"def >(rhs: Number): Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":">=","t":"def >=(rhs: Number): Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":">>","t":"def >>(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"^","t":"def ^(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"abs","t":"def abs: Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"canBeInt","t":"def canBeInt: Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"canBeLong","t":"def canBeLong: Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"ceil","t":"def ceil: Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"compare","t":"def compare(rhs: Number): Int","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"floor","t":"def floor: Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"isExact","t":"def isExact: Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"max","t":"def max(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"min","t":"def min(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"pow","t":"def pow(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"round","t":"def round: Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"signum","t":"def signum: Int","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"tmod","t":"def tmod(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"toBigDecimal","t":"def toBigDecimal: BigDecimal","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"toRational","t":"def toRational: Rational","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"tquot","t":"def tquot(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"tquotmod","t":"def tquotmod(rhs: Number): (Number, Number)","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"unary_-","t":"def unary_-: Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"withinDouble","t":"def withinDouble: Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"withinInt","t":"def withinInt: Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"withinLong","t":"def withinLong: Boolean","d":"spire/math/Number","k":"def"},
{"l":"spire/math/Number.html","n":"|","t":"def |(rhs: Number): Number","d":"spire/math/Number","k":"def"},
{"l":"spire/math/NumberAlgebra.html","n":"NumberAlgebra","t":"class NumberAlgebra extends NumberIsField with NumberIsNRoot with NumberIsTrig with NumberIsReal with Serializable","d":"spire/math/NumberAlgebra","k":"class"},
{"l":"spire/math/NumberInstances.html","n":"NumberInstances","t":"trait NumberInstances","d":"spire/math/NumberInstances","k":"trait"},
{"l":"spire/math/NumberInstances.html","n":"NumberAlgebra","t":"val NumberAlgebra: Field[Number] & CommutativeRing[Number] & NRoot[Number] & Trig[Number] & IsRational[Number] & forCommutativeRing[Number] & Signed[Number] & Order[Number]","d":"spire/math/NumberInstances","k":"val"},
{"l":"spire/math/NumberTag$.html","n":"NumberTag","t":"object NumberTag","d":"spire/math/NumberTag$","k":"object"},
{"l":"spire/math/NumberTag$.html","n":"apply","t":"def apply[A](implicit ev: NumberTag[A]): NumberTag[A]","d":"spire/math/NumberTag$","k":"def"},
{"l":"spire/math/NumberTag$$Approximate$.html","n":"Approximate","t":"object Approximate extends Resolution","d":"spire/math/NumberTag$$Approximate$","k":"object"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"BuiltinFloatTag","t":"class BuiltinFloatTag[A](zero: A, min: A, max: A, nan: A, posInf: A, negInf: A) extends NumberTag[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"class"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"hasMaxValue","t":"val hasMaxValue: Option[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"hasMinValue","t":"val hasMinValue: Option[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"hasNaN","t":"val hasNaN: Option[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"hasNegativeInfinity","t":"val hasNegativeInfinity: Option[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"hasPositiveInfinity","t":"val hasPositiveInfinity: Option[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"hasZero","t":"val hasZero: Option[A]","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"isSigned","t":"def isSigned: Boolean","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"overflows","t":"def overflows: Boolean","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinFloatTag.html","n":"resolution","t":"def resolution: Resolution","d":"spire/math/NumberTag$$BuiltinFloatTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"BuiltinIntTag","t":"class BuiltinIntTag[A](zero: A, min: A, max: A) extends NumberTag[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"class"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"hasMaxValue","t":"val hasMaxValue: Option[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"hasMinValue","t":"val hasMinValue: Option[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"hasNaN","t":"def hasNaN: Option[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"hasNegativeInfinity","t":"def hasNegativeInfinity: Option[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"hasPositiveInfinity","t":"def hasPositiveInfinity: Option[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"hasZero","t":"val hasZero: Option[A]","d":"spire/math/NumberTag$$BuiltinIntTag","k":"val"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"isInfinite","t":"def isInfinite(a: A): Boolean","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"isNaN","t":"def isNaN(a: A): Boolean","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"isSigned","t":"def isSigned: Boolean","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"overflows","t":"def overflows: Boolean","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$BuiltinIntTag.html","n":"resolution","t":"def resolution: Resolution","d":"spire/math/NumberTag$$BuiltinIntTag","k":"def"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"CustomTag","t":"class CustomTag[A](val resolution: Resolution, val hasZero: Option[A], val hasMinValue: Option[A], val hasMaxValue: Option[A], val overflows: Boolean, val isSigned: Boolean) extends NumberTag[A]","d":"spire/math/NumberTag$$CustomTag","k":"class"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"hasMaxValue","t":"val hasMaxValue: Option[A]","d":"spire/math/NumberTag$$CustomTag","k":"val"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"hasMinValue","t":"val hasMinValue: Option[A]","d":"spire/math/NumberTag$$CustomTag","k":"val"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"hasNaN","t":"def hasNaN: Option[A]","d":"spire/math/NumberTag$$CustomTag","k":"def"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"hasNegativeInfinity","t":"def hasNegativeInfinity: Option[A]","d":"spire/math/NumberTag$$CustomTag","k":"def"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"hasPositiveInfinity","t":"def hasPositiveInfinity: Option[A]","d":"spire/math/NumberTag$$CustomTag","k":"def"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"hasZero","t":"val hasZero: Option[A]","d":"spire/math/NumberTag$$CustomTag","k":"val"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"isInfinite","t":"def isInfinite(a: A): Boolean","d":"spire/math/NumberTag$$CustomTag","k":"def"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"isNaN","t":"def isNaN(a: A): Boolean","d":"spire/math/NumberTag$$CustomTag","k":"def"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"isSigned","t":"val isSigned: Boolean","d":"spire/math/NumberTag$$CustomTag","k":"val"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"overflows","t":"val overflows: Boolean","d":"spire/math/NumberTag$$CustomTag","k":"val"},
{"l":"spire/math/NumberTag$$CustomTag.html","n":"resolution","t":"val resolution: Resolution","d":"spire/math/NumberTag$$CustomTag","k":"val"},
{"l":"spire/math/NumberTag$$Exact$.html","n":"Exact","t":"object Exact extends Resolution","d":"spire/math/NumberTag$$Exact$","k":"object"},
{"l":"spire/math/NumberTag$$Integral$.html","n":"Integral","t":"object Integral extends Resolution","d":"spire/math/NumberTag$$Integral$","k":"object"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"LargeTag","t":"class LargeTag[A](val resolution: Resolution, zero: A) extends NumberTag[A]","d":"spire/math/NumberTag$$LargeTag","k":"class"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"hasMaxValue","t":"def hasMaxValue: Option[A]","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"hasMinValue","t":"def hasMinValue: Option[A]","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"hasNaN","t":"def hasNaN: Option[A]","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"hasNegativeInfinity","t":"def hasNegativeInfinity: Option[A]","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"hasPositiveInfinity","t":"def hasPositiveInfinity: Option[A]","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"hasZero","t":"val hasZero: Option[A]","d":"spire/math/NumberTag$$LargeTag","k":"val"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"isInfinite","t":"def isInfinite(a: A): Boolean","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"isNaN","t":"def isNaN(a: A): Boolean","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"isSigned","t":"def isSigned: Boolean","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"overflows","t":"def overflows: Boolean","d":"spire/math/NumberTag$$LargeTag","k":"def"},
{"l":"spire/math/NumberTag$$LargeTag.html","n":"resolution","t":"val resolution: Resolution","d":"spire/math/NumberTag$$LargeTag","k":"val"},
{"l":"spire/math/NumberTag$$Resolution.html","n":"Resolution","t":"trait Resolution","d":"spire/math/NumberTag$$Resolution","k":"trait"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"UnsignedIntTag","t":"class UnsignedIntTag[A](zero: A, max: A) extends NumberTag[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"class"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"hasMaxValue","t":"val hasMaxValue: Option[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"val"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"hasMinValue","t":"val hasMinValue: Option[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"val"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"hasNaN","t":"def hasNaN: Option[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"hasNegativeInfinity","t":"def hasNegativeInfinity: Option[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"hasPositiveInfinity","t":"def hasPositiveInfinity: Option[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"hasZero","t":"val hasZero: Option[A]","d":"spire/math/NumberTag$$UnsignedIntTag","k":"val"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"isInfinite","t":"def isInfinite(a: A): Boolean","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"isNaN","t":"def isNaN(a: A): Boolean","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"isSigned","t":"def isSigned: Boolean","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"overflows","t":"def overflows: Boolean","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag$$UnsignedIntTag.html","n":"resolution","t":"def resolution: Resolution","d":"spire/math/NumberTag$$UnsignedIntTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"NumberTag","t":"trait NumberTag[A]","d":"spire/math/NumberTag","k":"trait"},
{"l":"spire/math/NumberTag.html","n":"finite","t":"def finite: Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"hasMaxValue","t":"def hasMaxValue: Option[A]","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"hasMinValue","t":"def hasMinValue: Option[A]","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"hasNaN","t":"def hasNaN: Option[A]","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"hasNegativeInfinity","t":"def hasNegativeInfinity: Option[A]","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"hasPositiveInfinity","t":"def hasPositiveInfinity: Option[A]","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"hasZero","t":"def hasZero: Option[A]","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"infinite","t":"def infinite: Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"isFinite","t":"def isFinite(a: A): Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"isInfinite","t":"def isInfinite(a: A): Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"isNaN","t":"def isNaN(a: A): Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"isSigned","t":"def isSigned: Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"overflows","t":"def overflows: Boolean","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/NumberTag.html","n":"resolution","t":"def resolution: Resolution","d":"spire/math/NumberTag","k":"def"},
{"l":"spire/math/Numeric.html","n":"Numeric","t":"trait Numeric[@specialized(Int, Long, Float, Double) A] extends Ring[A] with AdditiveCommutativeGroup[A] with MultiplicativeCommutativeGroup[A] with NRoot[A] with ConvertableFrom[A] with ConvertableTo[A] with IsReal[A]","d":"spire/math/Numeric","k":"trait"},
{"l":"spire/math/Numeric$.html","n":"Numeric","t":"object Numeric","d":"spire/math/Numeric$","k":"object"},
{"l":"spire/math/Numeric$.html","n":"AlgebraicIsNumeric","t":"val AlgebraicIsNumeric: Numeric[Algebraic]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"BigDecimalIsNumeric","t":"val BigDecimalIsNumeric: Numeric[BigDecimal]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"BigIntIsNumeric","t":"val BigIntIsNumeric: Numeric[BigInt]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"ByteIsNumeric","t":"val ByteIsNumeric: Numeric[Byte]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"DoubleIsNumeric","t":"val DoubleIsNumeric: Numeric[Double]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"FloatIsNumeric","t":"val FloatIsNumeric: Numeric[Float]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"IntIsNumeric","t":"val IntIsNumeric: Numeric[Int]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"LongIsNumeric","t":"val LongIsNumeric: Numeric[Long]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"RationalIsNumeric","t":"val RationalIsNumeric: Numeric[Rational]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"RealIsNumeric","t":"val RealIsNumeric: Numeric[Real]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"ShortIsNumeric","t":"val ShortIsNumeric: Numeric[Short]","d":"spire/math/Numeric$","k":"val"},
{"l":"spire/math/Numeric$.html","n":"apply","t":"def apply[A](implicit ev: Numeric[A]): Numeric[A]","d":"spire/math/Numeric$","k":"def"},
{"l":"spire/math/Point.html","n":"Point","t":"class Point[A] extends Interval[A]","d":"spire/math/Point","k":"class"},
{"l":"spire/math/Point.html","n":"lowerBound","t":"def lowerBound: Closed[A]","d":"spire/math/Point","k":"def"},
{"l":"spire/math/Point.html","n":"upperBound","t":"def upperBound: Closed[A]","d":"spire/math/Point","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"Polynomial","t":"object Polynomial extends PolynomialInstances","d":"spire/math/Polynomial$","k":"object"},
{"l":"spire/math/Polynomial$.html","n":"apply","t":"def apply[@specialized(Double) C : ClassTag](data: Map[Int, C]): PolySparse[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"apply","t":"def apply[@specialized(Double) C : ClassTag](terms: IterableOnce[Term[C]]): PolySparse[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"apply","t":"def apply[@specialized(Double) C : ClassTag](c: C, e: Int): PolySparse[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"apply","t":"def apply(s: String): Polynomial[Rational]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"constant","t":"def constant[@specialized(Double) C : ClassTag](c: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"cubic","t":"def cubic[@specialized(Double) C : ClassTag](c: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"cubic","t":"def cubic[@specialized(Double) C : ClassTag](c3: C, c2: C, c1: C, c0: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"dense","t":"def dense[@specialized(Double) C : ClassTag](coeffs: Array[C]): PolyDense[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"interpolate","t":"def interpolate[C : ClassTag](points: (C, C)*): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"linear","t":"def linear[@specialized(Double) C : ClassTag](c: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"linear","t":"def linear[@specialized(Double) C : ClassTag](c1: C, c0: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"one","t":"def one[@specialized(Double) C : ClassTag]: Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"quadratic","t":"def quadratic[@specialized(Double) C : ClassTag](c1: C, c0: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"quadratic","t":"def quadratic[@specialized(Double) C : ClassTag](c: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"quadratic","t":"def quadratic[@specialized(Double) C : ClassTag](c2: C, c1: C, c0: C): Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"sparse","t":"def sparse[@specialized(Double) C : ClassTag](data: Map[Int, C]): PolySparse[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"twox","t":"def twox[@specialized(Double) C : ClassTag]: Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"x","t":"def x[@specialized(Double) C : ClassTag]: Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial$.html","n":"zero","t":"def zero[@specialized(Double) C : ClassTag]: Polynomial[C]","d":"spire/math/Polynomial$","k":"def"},
{"l":"spire/math/Polynomial.html","n":"Polynomial","t":"trait Polynomial[@specialized(Double) C]","d":"spire/math/Polynomial","k":"trait"},
{"l":"spire/math/Polynomial.html","n":"*","t":"def *(rhs: Polynomial[C])(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"**","t":"def **(k: Int)(implicit ring: Rig[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"*:","t":"def *:(k: C)(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"+","t":"def +(rhs: Polynomial[C])(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"-","t":"def -(rhs: Polynomial[C])(implicit ring: Rng[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":":*","t":"def :*(k: C)(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":":/","t":"def :/(k: C)(implicit field: Field[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"apply","t":"def apply(x: C)(implicit r: Semiring[C]): C","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"coeffsArray","t":"def coeffsArray(implicit ring: Semiring[C]): Array[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"compose","t":"def compose(y: Polynomial[C])(implicit ring: Rig[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"ct","t":"def ct: ClassTag[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"data","t":"def data(implicit ring: Semiring[C], eq: Eq[C]): Map[Int, C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"degree","t":"def degree: Int","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"derivative","t":"def derivative(implicit ring: Ring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"evalWith","t":"def evalWith[A : ClassTag](x: A)(f: C => A): A","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"flip","t":"def flip(implicit ring: Rng[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"foreach","t":"def foreach[U](f: (Int, C) => U): Unit","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"foreachNonZero","t":"def foreachNonZero[U](f: (Int, C) => U)(implicit ring: Semiring[C], eq: Eq[C]): Unit","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"integral","t":"def integral(implicit field: Field[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"isConstant","t":"def isConstant: Boolean","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"map","t":"def map[D : ClassTag](f: C => D): Polynomial[D]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"mapTerms","t":"def mapTerms[D : ClassTag](f: Term[C] => Term[D]): Polynomial[D]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"maxOrderTermCoeff","t":"def maxOrderTermCoeff(implicit ring: Semiring[C]): C","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"maxTerm","t":"def maxTerm(implicit ring: Semiring[C]): Term[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"minTerm","t":"def minTerm(implicit ring: Semiring[C], eq: Eq[C]): Term[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"monic","t":"def monic(implicit f: Field[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"nth","t":"def nth(n: Int)(implicit ring: Semiring[C]): C","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"pow","t":"def pow(k: Int)(implicit ring: Rig[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"reciprocal","t":"def reciprocal(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"reductum","t":"def reductum(implicit e: Eq[C], ring: Semiring[C], ct: ClassTag[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"removeZeroRoots","t":"def removeZeroRoots(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"roots","t":"def roots(implicit finder: RootFinder[C]): Roots[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"shift","t":"def shift(h: C)(implicit ring: Ring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"signVariations","t":"def signVariations(implicit ring: Semiring[C], order: Order[C], signed: Signed[C]): Int","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"terms","t":"def terms(implicit ring: Semiring[C], eq: Eq[C]): List[Term[C]]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"termsIterator","t":"def termsIterator: Iterator[Term[C]]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"toDense","t":"def toDense(implicit ring: Semiring[C], eq: Eq[C]): PolyDense[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"toSparse","t":"def toSparse(implicit ring: Semiring[C], eq: Eq[C]): PolySparse[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/Polynomial.html","n":"unary_-","t":"def unary_-(implicit ring: Rng[C]): Polynomial[C]","d":"spire/math/Polynomial","k":"def"},
{"l":"spire/math/PolynomialEq.html","n":"PolynomialEq","t":"trait PolynomialEq[@specialized(Double) C] extends Eq[Polynomial[C]]","d":"spire/math/PolynomialEq","k":"trait"},
{"l":"spire/math/PolynomialEq.html","n":"ct","t":"def ct: ClassTag[C]","d":"spire/math/PolynomialEq","k":"def"},
{"l":"spire/math/PolynomialEq.html","n":"eq","t":"def eq: Eq[C]","d":"spire/math/PolynomialEq","k":"def"},
{"l":"spire/math/PolynomialEq.html","n":"eqv","t":"def eqv(x: Polynomial[C], y: Polynomial[C]): Boolean","d":"spire/math/PolynomialEq","k":"def"},
{"l":"spire/math/PolynomialEq.html","n":"scalar","t":"def scalar: Semiring[C]","d":"spire/math/PolynomialEq","k":"def"},
{"l":"spire/math/PolynomialInstances.html","n":"PolynomialInstances","t":"trait PolynomialInstances extends PolynomialInstances4","d":"spire/math/PolynomialInstances","k":"trait"},
{"l":"spire/math/PolynomialInstances0.html","n":"PolynomialInstances0","t":"trait PolynomialInstances0","d":"spire/math/PolynomialInstances0","k":"trait"},
{"l":"spire/math/PolynomialInstances0.html","n":"eq","t":"def eq[@specialized(Double) C : Eq]: PolynomialEq[C]","d":"spire/math/PolynomialInstances0","k":"def"},
{"l":"spire/math/PolynomialInstances0.html","n":"overSemiring","t":"def overSemiring[@specialized(Double) C : Eq]: PolynomialOverSemiring[C]","d":"spire/math/PolynomialInstances0","k":"def"},
{"l":"spire/math/PolynomialInstances1.html","n":"PolynomialInstances1","t":"trait PolynomialInstances1 extends PolynomialInstances0","d":"spire/math/PolynomialInstances1","k":"trait"},
{"l":"spire/math/PolynomialInstances1.html","n":"overRig","t":"def overRig[@specialized(Double) C : Eq]: PolynomialOverRig[C]","d":"spire/math/PolynomialInstances1","k":"def"},
{"l":"spire/math/PolynomialInstances1.html","n":"overRng","t":"def overRng[@specialized(Double) C : Eq]: PolynomialOverRng[C]","d":"spire/math/PolynomialInstances1","k":"def"},
{"l":"spire/math/PolynomialInstances2.html","n":"PolynomialInstances2","t":"trait PolynomialInstances2 extends PolynomialInstances1","d":"spire/math/PolynomialInstances2","k":"trait"},
{"l":"spire/math/PolynomialInstances2.html","n":"overRing","t":"def overRing[@specialized(Double) C : Eq]: PolynomialOverRing[C]","d":"spire/math/PolynomialInstances2","k":"def"},
{"l":"spire/math/PolynomialInstances3.html","n":"PolynomialInstances3","t":"trait PolynomialInstances3 extends PolynomialInstances2","d":"spire/math/PolynomialInstances3","k":"trait"},
{"l":"spire/math/PolynomialInstances3.html","n":"overCRing","t":"def overCRing[@specialized(Double) C : Eq]: PolynomialOverCRing[C]","d":"spire/math/PolynomialInstances3","k":"def"},
{"l":"spire/math/PolynomialInstances4.html","n":"PolynomialInstances4","t":"trait PolynomialInstances4 extends PolynomialInstances3","d":"spire/math/PolynomialInstances4","k":"trait"},
{"l":"spire/math/PolynomialInstances4.html","n":"overField","t":"def overField[@specialized(Double) C : Eq]: PolynomialOverField[C]","d":"spire/math/PolynomialInstances4","k":"def"},
{"l":"spire/math/PolynomialOverCRing.html","n":"PolynomialOverCRing","t":"trait PolynomialOverCRing[@specialized(Double) C] extends CommutativeRing[Polynomial[C]] with PolynomialOverRing[C] with RingAssociativeAlgebra[Polynomial[C], C]","d":"spire/math/PolynomialOverCRing","k":"trait"},
{"l":"spire/math/PolynomialOverCRing.html","n":"scalar","t":"val scalar: CommutativeRing[C]","d":"spire/math/PolynomialOverCRing","k":"val"},
{"l":"spire/math/PolynomialOverField.html","n":"PolynomialOverField","t":"trait PolynomialOverField[@specialized(Double) C] extends PolynomialOverRing[C] with EuclideanRing[Polynomial[C]] with VectorSpace[Polynomial[C], C] with FieldAssociativeAlgebra[Polynomial[C], C]","d":"spire/math/PolynomialOverField","k":"trait"},
{"l":"spire/math/PolynomialOverField.html","n":"emod","t":"def emod(x: Polynomial[C], y: Polynomial[C]): Polynomial[C]","d":"spire/math/PolynomialOverField","k":"def"},
{"l":"spire/math/PolynomialOverField.html","n":"equot","t":"def equot(x: Polynomial[C], y: Polynomial[C]): Polynomial[C]","d":"spire/math/PolynomialOverField","k":"def"},
{"l":"spire/math/PolynomialOverField.html","n":"euclideanFunction","t":"def euclideanFunction(x: Polynomial[C]): BigInt","d":"spire/math/PolynomialOverField","k":"def"},
{"l":"spire/math/PolynomialOverField.html","n":"scalar","t":"val scalar: Field[C]","d":"spire/math/PolynomialOverField","k":"val"},
{"l":"spire/math/PolynomialOverRig.html","n":"PolynomialOverRig","t":"trait PolynomialOverRig[@specialized(Double) C] extends PolynomialOverSemiring[C] with Rig[Polynomial[C]]","d":"spire/math/PolynomialOverRig","k":"trait"},
{"l":"spire/math/PolynomialOverRig.html","n":"one","t":"def one: Polynomial[C]","d":"spire/math/PolynomialOverRig","k":"def"},
{"l":"spire/math/PolynomialOverRig.html","n":"scalar","t":"val scalar: Rig[C]","d":"spire/math/PolynomialOverRig","k":"val"},
{"l":"spire/math/PolynomialOverRing.html","n":"PolynomialOverRing","t":"trait PolynomialOverRing[@specialized(Double) C] extends PolynomialOverRng[C] with Ring[Polynomial[C]]","d":"spire/math/PolynomialOverRing","k":"trait"},
{"l":"spire/math/PolynomialOverRing.html","n":"one","t":"def one: Polynomial[C]","d":"spire/math/PolynomialOverRing","k":"def"},
{"l":"spire/math/PolynomialOverRing.html","n":"scalar","t":"val scalar: Ring[C]","d":"spire/math/PolynomialOverRing","k":"val"},
{"l":"spire/math/PolynomialOverRng.html","n":"PolynomialOverRng","t":"trait PolynomialOverRng[@specialized(Double) C] extends PolynomialOverSemiring[C] with Rng[Polynomial[C]]","d":"spire/math/PolynomialOverRng","k":"trait"},
{"l":"spire/math/PolynomialOverRng.html","n":"negate","t":"def negate(x: Polynomial[C]): Polynomial[C]","d":"spire/math/PolynomialOverRng","k":"def"},
{"l":"spire/math/PolynomialOverRng.html","n":"scalar","t":"val scalar: Rng[C]","d":"spire/math/PolynomialOverRng","k":"val"},
{"l":"spire/math/PolynomialOverRng.html","n":"timesl","t":"def timesl(r: C, v: Polynomial[C]): Polynomial[C]","d":"spire/math/PolynomialOverRng","k":"def"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"PolynomialOverSemiring","t":"trait PolynomialOverSemiring[@specialized(Double) C] extends Semiring[Polynomial[C]]","d":"spire/math/PolynomialOverSemiring","k":"trait"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"ct","t":"def ct: ClassTag[C]","d":"spire/math/PolynomialOverSemiring","k":"def"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"eq","t":"def eq: Eq[C]","d":"spire/math/PolynomialOverSemiring","k":"def"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"plus","t":"def plus(x: Polynomial[C], y: Polynomial[C]): Polynomial[C]","d":"spire/math/PolynomialOverSemiring","k":"def"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"scalar","t":"def scalar: Semiring[C]","d":"spire/math/PolynomialOverSemiring","k":"def"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"times","t":"def times(x: Polynomial[C], y: Polynomial[C]): Polynomial[C]","d":"spire/math/PolynomialOverSemiring","k":"def"},
{"l":"spire/math/PolynomialOverSemiring.html","n":"zero","t":"def zero: Polynomial[C]","d":"spire/math/PolynomialOverSemiring","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"Quaternion","t":"object Quaternion extends QuaternionInstances","d":"spire/math/Quaternion$","k":"object"},
{"l":"spire/math/Quaternion$.html","n":"apply","t":"def apply[@specialized(Float, Double) A](a: A)(implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"apply","t":"def apply[@specialized(Float, Double) A](c: Complex[A])(implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"i","t":"def i[@specialized(Float, Double) A](implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"j","t":"def j[@specialized(Float, Double) A](implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"k","t":"def k[@specialized(Float, Double) A](implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"one","t":"def one[@specialized(Float, Double) A](implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion$.html","n":"zero","t":"def zero[@specialized(Float, Double) A](implicit f: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion$","k":"def"},
{"l":"spire/math/Quaternion.html","n":"Quaternion","t":"class Quaternion[@specialized(Float, Double) A](r: A, i: A, j: A, k: A) extends ScalaNumber with ScalaNumericConversions with Serializable","d":"spire/math/Quaternion","k":"class"},
{"l":"spire/math/Quaternion.html","n":"*","t":"def *(rhs: A)(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"*","t":"def *(rhs: Complex[A])(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"*","t":"def *(rhs: Quaternion[A])(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"**","t":"def **(k: Int)(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"+","t":"def +(rhs: A)(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"+","t":"def +(rhs: Complex[A])(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"+","t":"def +(rhs: Quaternion[A])(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"-","t":"def -(rhs: A)(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"-","t":"def -(rhs: Complex[A])(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"-","t":"def -(rhs: Quaternion[A])(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"/","t":"def /(rhs: A)(implicit f: Field[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"/","t":"def /(rhs: Complex[A])(implicit f: Field[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"/","t":"def /(rhs: Quaternion[A])(implicit f: Field[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"=!=","t":"def =!=(that: Quaternion[_]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"===","t":"def ===(that: Quaternion[_]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"abs","t":"def abs(implicit f: Field[A], n: NRoot[A]): A","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"conjugate","t":"def conjugate(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"dot","t":"def dot(rhs: Quaternion[A])(implicit f: Field[A]): A","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"doubleValue","t":"def doubleValue: Double","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"eqv","t":"def eqv(rhs: Quaternion[A])(implicit o: Eq[A]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"floatValue","t":"def floatValue: Float","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"fpow","t":"def fpow(k0: A)(implicit f: Field[A], nr: NRoot[A], or: Order[A], si: Signed[A], tr: Trig[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"intValue","t":"def intValue: Int","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"isPure","t":"def isPure(implicit s: Signed[A]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"isReal","t":"def isReal(implicit s: Signed[A]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"isZero","t":"def isZero(implicit s: Signed[A]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"neqv","t":"def neqv(rhs: Quaternion[A])(implicit o: Eq[A]): Boolean","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"nroot","t":"def nroot(m: Int)(implicit f: Field[A], nr: NRoot[A], or: Order[A], si: Signed[A], tr: Trig[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"pow","t":"def pow(k: Int)(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"pure","t":"def pure(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"pureAbs","t":"def pureAbs(implicit f: Field[A], n: NRoot[A]): A","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"pureSignum","t":"def pureSignum(implicit f: Field[A], n: NRoot[A], s: Signed[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"quaternionSignum","t":"def quaternionSignum(implicit f: Field[A], n: NRoot[A], s: Signed[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"real","t":"def real(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"reciprocal","t":"def reciprocal(implicit f: Field[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"signum","t":"def signum(implicit s: Signed[A]): Int","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"sqrt","t":"def sqrt(implicit f: Field[A], nr: NRoot[A], s: Signed[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"toComplex","t":"def toComplex: Complex[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"unary_-","t":"def unary_-(implicit s: CommutativeRing[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"underlying","t":"def underlying: Object","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/Quaternion.html","n":"unit","t":"def unit(implicit f: Field[A], n: NRoot[A]): Quaternion[A]","d":"spire/math/Quaternion","k":"def"},
{"l":"spire/math/QuaternionInstances.html","n":"QuaternionInstances","t":"trait QuaternionInstances extends QuaternionInstances1","d":"spire/math/QuaternionInstances","k":"trait"},
{"l":"spire/math/QuaternionInstances.html","n":"QuaternionOverRichField","t":"def QuaternionOverRichField[A](implicit f0: Field[A], n0: NRoot[A], o0: Order[A], s0: Signed[A], t0: Trig[A]): QuaternionOverRichField[A]","d":"spire/math/QuaternionInstances","k":"def"},
{"l":"spire/math/QuaternionInstances1.html","n":"QuaternionInstances1","t":"trait QuaternionInstances1","d":"spire/math/QuaternionInstances1","k":"trait"},
{"l":"spire/math/QuaternionInstances1.html","n":"QuaternionOverField","t":"def QuaternionOverField[A](implicit f0: Field[A], o0: Order[A], s0: Signed[A]): QuaternionOverField[A]","d":"spire/math/QuaternionInstances1","k":"def"},
{"l":"spire/math/QuickSelect$.html","n":"QuickSelect","t":"object QuickSelect extends SelectLike with HighBranchingMedianOf5","d":"spire/math/QuickSelect$","k":"object"},
{"l":"spire/math/QuickSelect$.html","n":"approxMedian","t":"def approxMedian[@specialized A : Order](data: Array[A], left: Int, right: Int, stride: Int): A","d":"spire/math/QuickSelect$","k":"def"},
{"l":"spire/math/QuickSort$.html","n":"QuickSort","t":"object QuickSort","d":"spire/math/QuickSort$","k":"object"},
{"l":"spire/math/QuickSort$.html","n":"limit","t":"def limit: Int","d":"spire/math/QuickSort$","k":"def"},
{"l":"spire/math/QuickSort$.html","n":"partition","t":"def partition[@specialized A : Order](data: Array[A], start: Int, end: Int, pivotIndex: Int): Int","d":"spire/math/QuickSort$","k":"def"},
{"l":"spire/math/QuickSort$.html","n":"qsort","t":"def qsort[@specialized A](data: Array[A], start: Int, end: Int)(implicit o: Order[A], ct: ClassTag[A]): Unit","d":"spire/math/QuickSort$","k":"def"},
{"l":"spire/math/QuickSort$.html","n":"sort","t":"def sort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/QuickSort$","k":"def"},
{"l":"spire/math/Rational.html","n":"Rational","t":"class Rational extends ScalaNumber with ScalaNumericConversions with Ordered[Rational]","d":"spire/math/Rational","k":"class"},
{"l":"spire/math/Rational.html","n":"%","t":"def %(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"*","t":"def *(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"+","t":"def +(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"-","t":"def -(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"/","t":"def /(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"abs","t":"def abs: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"ceil","t":"def ceil: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"compareToOne","t":"def compareToOne: Int","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"denominator","t":"def denominator: SafeLong","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"denominatorAsLong","t":"def denominatorAsLong: Long","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"denominatorIsValidLong","t":"def denominatorIsValidLong: Boolean","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"floatValue","t":"def floatValue: Float","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"floor","t":"def floor: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"gcd","t":"def gcd(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"intValue","t":"def intValue: Int","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"inverse","t":"def inverse: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"isOne","t":"def isOne: Boolean","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"lcm","t":"def lcm(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"limitDenominatorTo","t":"def limitDenominatorTo(limit: SafeLong): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"limitTo","t":"def limitTo(max: SafeLong): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"limitToInt","t":"def limitToInt: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"limitToLong","t":"def limitToLong: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"longValue","t":"def longValue: Long","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"max","t":"def max(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"min","t":"def min(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"numerator","t":"def numerator: SafeLong","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"numeratorAsLong","t":"def numeratorAsLong: Long","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"numeratorIsValidLong","t":"def numeratorIsValidLong: Boolean","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"pow","t":"def pow(exp: Int): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"reciprocal","t":"def reciprocal: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"round","t":"def round: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"roundTo","t":"def roundTo(denom: SafeLong): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"sign","t":"def sign: Sign","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"signum","t":"def signum: Int","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"tmod","t":"def tmod(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"toAlgebraic","t":"def toAlgebraic: Algebraic","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"toBigDecimal","t":"def toBigDecimal(scale: Int, mode: RoundingMode): BigDecimal","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"toBigDecimal","t":"def toBigDecimal(mc: MathContext): BigDecimal","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"toReal","t":"def toReal: Real","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"toSafeLong","t":"def toSafeLong: SafeLong","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"tquot","t":"def tquot(rhs: Rational): Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"tquotmod","t":"def tquotmod(rhs: Rational): (Rational, Rational)","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational.html","n":"unary_-","t":"def unary_-: Rational","d":"spire/math/Rational","k":"def"},
{"l":"spire/math/Rational$.html","n":"Rational","t":"object Rational extends RationalInstances","d":"spire/math/Rational$","k":"object"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(n: BigInt, d: BigInt): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(n: Long, d: Long): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(n: SafeLong, d: SafeLong): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: Int): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: Long): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: BigInt): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: Float): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: Double): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: BigDecimal): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(r: String): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(n: SafeLong): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"apply","t":"def apply(x: Number): Rational","d":"spire/math/Rational$","k":"def"},
{"l":"spire/math/Rational$.html","n":"one","t":"val one: Rational","d":"spire/math/Rational$","k":"val"},
{"l":"spire/math/Rational$.html","n":"zero","t":"val zero: Rational","d":"spire/math/Rational$","k":"val"},
{"l":"spire/math/RationalAlgebra.html","n":"RationalAlgebra","t":"class RationalAlgebra extends RationalIsField with RationalIsReal with Serializable","d":"spire/math/RationalAlgebra","k":"class"},
{"l":"spire/math/RationalInstances.html","n":"RationalInstances","t":"trait RationalInstances","d":"spire/math/RationalInstances","k":"trait"},
{"l":"spire/math/RationalInstances.html","n":"RationalAlgebra","t":"val RationalAlgebra: Field[Rational] & IsRational[Rational] & forCommutativeRing[Rational] & Order[Rational]","d":"spire/math/RationalInstances","k":"val"},
{"l":"spire/math/RationalInstances.html","n":"RationalTag","t":"val RationalTag: NumberTag[Rational]","d":"spire/math/RationalInstances","k":"val"},
{"l":"spire/math/Real.html","n":"Real","t":"trait Real extends ScalaNumber with ScalaNumericConversions","d":"spire/math/Real","k":"trait"},
{"l":"spire/math/Real.html","n":"*","t":"def *(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"**","t":"def **(k: Int): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"+","t":"def +(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"-","t":"def -(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"/","t":"def /(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"=!=","t":"def =!=(y: Real): Boolean","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"===","t":"def ===(y: Real): Boolean","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"abs","t":"def abs: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"apply","t":"def apply(p: Int): SafeLong","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"ceil","t":"def ceil: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"compare","t":"def compare(y: Real): Int","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"floor","t":"def floor: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"fpow","t":"def fpow(r: Rational): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"fpow","t":"def fpow(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"getString","t":"def getString(d: Int): String","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"max","t":"def max(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"min","t":"def min(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"nroot","t":"def nroot(k: Int): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"pow","t":"def pow(k: Int): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"reciprocal","t":"def reciprocal: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"repr","t":"def repr: String","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"round","t":"def round: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"signum","t":"def signum: Int","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"sqrt","t":"def sqrt: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"tmod","t":"def tmod(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"toRational","t":"def toRational(p: Int): Rational","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"toRational","t":"def toRational: Rational","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"tquot","t":"def tquot(y: Real): Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real.html","n":"unary_-","t":"def unary_-: Real","d":"spire/math/Real","k":"def"},
{"l":"spire/math/Real$.html","n":"Real","t":"object Real extends RealInstances","d":"spire/math/Real$","k":"object"},
{"l":"spire/math/Real$.html","n":"accumulate","t":"def accumulate(total: SafeLong, xs: LazyList[SafeLong], cs: LazyList[Rational]): SafeLong","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"accumulate","t":"def accumulate(total: SafeLong, xs: Stream[SafeLong], cs: Stream[Rational]): SafeLong","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"acos","t":"def acos(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"acosh","t":"def acosh(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(f: Int => SafeLong): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: Int): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: Long): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: BigInt): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: SafeLong): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: Rational): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: Double): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(n: BigDecimal): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"apply","t":"def apply(s: String): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"asin","t":"def asin(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"asinh","t":"def asinh(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"atan","t":"def atan(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"atan2","t":"def atan2(y: Real, x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"atanDr","t":"def atanDr(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"atanDrx","t":"def atanDrx(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"atanh","t":"def atanh(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"bits","t":"def bits: Int","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"cos","t":"def cos(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"cosDr","t":"def cosDr(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"cosh","t":"def cosh(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"digits","t":"def digits: Int","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"digitsToBits","t":"def digitsToBits(n: Int): Int","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"div2n","t":"def div2n(x: Real, n: Int): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"e","t":"val e: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"exp","t":"def exp(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"expDr","t":"def expDr(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"four","t":"val four: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"log","t":"def log(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"log2","t":"val log2: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"logDr","t":"def logDr(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"logDrx","t":"def logDrx(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"mul2n","t":"def mul2n(x: Real, n: Int): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"one","t":"val one: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"phi","t":"val phi: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"pi","t":"val pi: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"piBy2","t":"val piBy2: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"piBy4","t":"val piBy4: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"roundUp","t":"def roundUp(r: Rational): SafeLong","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"sin","t":"def sin(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"sinDr","t":"def sinDr(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"sinh","t":"def sinh(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"sizeInBase","t":"def sizeInBase(n: SafeLong, base: Int): Int","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"sqrt1By2","t":"val sqrt1By2: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"tan","t":"def tan(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"tanh","t":"def tanh(x: Real): Real","d":"spire/math/Real$","k":"def"},
{"l":"spire/math/Real$.html","n":"two","t":"val two: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$.html","n":"zero","t":"val zero: Real","d":"spire/math/Real$","k":"val"},
{"l":"spire/math/Real$$Exact.html","n":"Exact","t":"class Exact(n: Rational) extends Real","d":"spire/math/Real$$Exact","k":"class"},
{"l":"spire/math/Real$$Exact.html","n":"apply","t":"def apply(p: Int): SafeLong","d":"spire/math/Real$$Exact","k":"def"},
{"l":"spire/math/Real$$Inexact.html","n":"Inexact","t":"class Inexact(f: Int => SafeLong) extends Real","d":"spire/math/Real$$Inexact","k":"class"},
{"l":"spire/math/Real$$Inexact.html","n":"apply","t":"def apply(p: Int): SafeLong","d":"spire/math/Real$$Inexact","k":"def"},
{"l":"spire/math/RealAlgebra.html","n":"RealAlgebra","t":"class RealAlgebra extends RealIsFractional","d":"spire/math/RealAlgebra","k":"class"},
{"l":"spire/math/RealInstances.html","n":"RealInstances","t":"trait RealInstances","d":"spire/math/RealInstances","k":"trait"},
{"l":"spire/math/RealInstances.html","n":"RealTag","t":"val RealTag: NumberTag[Real]","d":"spire/math/RealInstances","k":"val"},
{"l":"spire/math/RealInstances.html","n":"algebra","t":"val algebra: Fractional[Real] & forCommutativeRing[Real] & Trig[Real] & Field[Real] & Order[Real]","d":"spire/math/RealInstances","k":"val"},
{"l":"spire/math/RealIsFractional.html","n":"RealIsFractional","t":"trait RealIsFractional extends Fractional[Real] with forCommutativeRing[Real] with Trig[Real] with Field[Real] with Order[Real]","d":"spire/math/RealIsFractional","k":"trait"},
{"l":"spire/math/RealIsFractional.html","n":"acos","t":"def acos(a: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"asin","t":"def asin(a: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"atan","t":"def atan(a: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"atan2","t":"def atan2(y: Real, x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"ceil","t":"def ceil(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"compare","t":"def compare(x: Real, y: Real): Int","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"cos","t":"def cos(a: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"cosh","t":"def cosh(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"div","t":"def div(x: Real, y: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"e","t":"def e: Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"exp","t":"def exp(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"expm1","t":"def expm1(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"floor","t":"def floor(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fpow","t":"def fpow(x: Real, y: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromAlgebraic","t":"def fromAlgebraic(n: Algebraic): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromBigDecimal","t":"def fromBigDecimal(n: BigDecimal): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromByte","t":"def fromByte(n: Byte): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromFloat","t":"def fromFloat(n: Float): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromLong","t":"def fromLong(n: Long): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromRational","t":"def fromRational(n: Rational): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromReal","t":"def fromReal(n: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromShort","t":"def fromShort(n: Short): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"fromType","t":"def fromType[B](b: B)(implicit ev: ConvertableFrom[B]): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"isWhole","t":"def isWhole(x: Real): Boolean","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"log","t":"def log(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"log1p","t":"def log1p(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"negate","t":"def negate(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"nroot","t":"def nroot(x: Real, k: Int): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"one","t":"def one: Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"order","t":"def order: Order[Real]","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"pi","t":"def pi: Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"plus","t":"def plus(x: Real, y: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"round","t":"def round(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"sin","t":"def sin(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"sinh","t":"def sinh(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"tan","t":"def tan(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"tanh","t":"def tanh(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"times","t":"def times(x: Real, y: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"tmod","t":"def tmod(x: Real, y: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toAlgebraic","t":"def toAlgebraic(x: Real): Algebraic","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toBigDecimal","t":"def toBigDecimal(x: Real): BigDecimal","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toBigInt","t":"def toBigInt(x: Real): BigInt","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toBigIntOpt","t":"def toBigIntOpt(x: Real): Opt[BigInt]","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toByte","t":"def toByte(x: Real): Byte","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toDegrees","t":"def toDegrees(a: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toDouble","t":"def toDouble(x: Real): Double","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toFloat","t":"def toFloat(x: Real): Float","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toInt","t":"def toInt(x: Real): Int","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toLong","t":"def toLong(x: Real): Long","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toNumber","t":"def toNumber(x: Real): Number","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toRadians","t":"def toRadians(a: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toRational","t":"def toRational(x: Real): Rational","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toReal","t":"def toReal(x: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toShort","t":"def toShort(x: Real): Short","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toString","t":"def toString(x: Real): String","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"toType","t":"def toType[B](x: Real)(implicit ev: ConvertableTo[B]): B","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"tquot","t":"def tquot(x: Real, y: Real): Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/RealIsFractional.html","n":"zero","t":"def zero: Real","d":"spire/math/RealIsFractional","k":"def"},
{"l":"spire/math/SafeLong.html","n":"SafeLong","t":"class SafeLong extends ScalaNumber with ScalaNumericConversions with Ordered[SafeLong]","d":"spire/math/SafeLong","k":"class"},
{"l":"spire/math/SafeLong.html","n":"%","t":"def %(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"%","t":"def %(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"%","t":"def %(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"&","t":"def &(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"&","t":"def &(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"&","t":"def &(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"*","t":"def *(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"*","t":"def *(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"*","t":"def *(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"**","t":"def **(k: Int): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"+","t":"def +(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"+","t":"def +(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"+","t":"def +(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"-","t":"def -(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"-","t":"def -(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"-","t":"def -(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/","t":"def /(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/","t":"def /(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/","t":"def /(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/%","t":"def /%(rhs: SafeLong): (SafeLong, SafeLong)","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/%","t":"def /%(rhs: Long): (SafeLong, SafeLong)","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/%","t":"def /%(rhs: BigInt): (SafeLong, SafeLong)","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"/~","t":"def /~(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"<<","t":"def <<(n: Int): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"=!=","t":"def =!=(that: SafeLong): Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"===","t":"def ===(that: SafeLong): Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":">>","t":"def >>(n: Int): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"^","t":"def ^(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"^","t":"def ^(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"^","t":"def ^(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"abs","t":"def abs: SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"bitLength","t":"def bitLength: Int","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"emod","t":"def emod(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"emod","t":"def emod(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"emod","t":"def emod(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"equot","t":"def equot(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"equot","t":"def equot(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"equot","t":"def equot(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"equotmod","t":"def equotmod(rhs: SafeLong): (SafeLong, SafeLong)","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"equotmod","t":"def equotmod(rhs: Long): (SafeLong, SafeLong)","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"equotmod","t":"def equotmod(rhs: BigInt): (SafeLong, SafeLong)","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"factor","t":"def factor: Factors","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"gcd","t":"def gcd(that: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"getLong","t":"def getLong: Opt[Long]","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isEven","t":"def isEven: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isOdd","t":"def isOdd: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isOne","t":"def isOne: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isPrime","t":"def isPrime: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isProbablePrime","t":"def isProbablePrime(certainty: Int): Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"lcm","t":"def lcm(that: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"max","t":"def max(that: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"min","t":"def min(that: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"modPow","t":"def modPow(k: Int, mod: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"pow","t":"def pow(k: Int): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"signum","t":"def signum: Int","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"toBigDecimal","t":"def toBigDecimal: BigDecimal","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"unary_-","t":"def unary_-: SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"|","t":"def |(rhs: SafeLong): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"|","t":"def |(rhs: Long): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong.html","n":"|","t":"def |(rhs: BigInt): SafeLong","d":"spire/math/SafeLong","k":"def"},
{"l":"spire/math/SafeLong$.html","n":"SafeLong","t":"object SafeLong extends SafeLongInstances","d":"spire/math/SafeLong$","k":"object"},
{"l":"spire/math/SafeLong$.html","n":"apply","t":"def apply(x: Int): SafeLong","d":"spire/math/SafeLong$","k":"def"},
{"l":"spire/math/SafeLong$.html","n":"apply","t":"def apply(x: Long): SafeLong","d":"spire/math/SafeLong$","k":"def"},
{"l":"spire/math/SafeLong$.html","n":"apply","t":"def apply(x: BigInt): SafeLong","d":"spire/math/SafeLong$","k":"def"},
{"l":"spire/math/SafeLong$.html","n":"longGcd","t":"def longGcd(x: Long, y: Long): SafeLong","d":"spire/math/SafeLong$","k":"def"},
{"l":"spire/math/SafeLong$.html","n":"minusOne","t":"val minusOne: SafeLong","d":"spire/math/SafeLong$","k":"val"},
{"l":"spire/math/SafeLong$.html","n":"mixedGcd","t":"def mixedGcd(x: Long, y: BigInteger): SafeLong","d":"spire/math/SafeLong$","k":"def"},
{"l":"spire/math/SafeLong$.html","n":"one","t":"val one: SafeLong","d":"spire/math/SafeLong$","k":"val"},
{"l":"spire/math/SafeLong$.html","n":"ten","t":"val ten: SafeLong","d":"spire/math/SafeLong$","k":"val"},
{"l":"spire/math/SafeLong$.html","n":"three","t":"val three: SafeLong","d":"spire/math/SafeLong$","k":"val"},
{"l":"spire/math/SafeLong$.html","n":"two","t":"val two: SafeLong","d":"spire/math/SafeLong$","k":"val"},
{"l":"spire/math/SafeLong$.html","n":"zero","t":"val zero: SafeLong","d":"spire/math/SafeLong$","k":"val"},
{"l":"spire/math/SafeLongInstances.html","n":"SafeLongInstances","t":"trait SafeLongInstances","d":"spire/math/SafeLongInstances","k":"trait"},
{"l":"spire/math/SafeLongInstances.html","n":"SafeLongTag","t":"val SafeLongTag: NumberTag[SafeLong]","d":"spire/math/SafeLongInstances","k":"val"},
{"l":"spire/math/SafeLongInstances$SafeLongAlgebra$.html","n":"SafeLongAlgebra","t":"object SafeLongAlgebra extends SafeLongIsEuclideanRing with SafeLongIsUniqueFactorizationDomain with SafeLongIsNRoot with Serializable","d":"spire/math/SafeLongInstances$SafeLongAlgebra$","k":"object"},
{"l":"spire/math/SafeLongInstances$SafeLongIsReal$.html","n":"SafeLongIsReal","t":"object SafeLongIsReal extends SafeLongIsReal with Serializable","d":"spire/math/SafeLongInstances$SafeLongIsReal$","k":"object"},
{"l":"spire/math/ScalaOrderingWrapperCompat.html","n":"ScalaOrderingWrapperCompat","t":"trait ScalaOrderingWrapperCompat[A] extends Ordering[A]","d":"spire/math/ScalaOrderingWrapperCompat","k":"trait"},
{"l":"spire/math/Searching$.html","n":"Searching","t":"object Searching","d":"spire/math/Searching$","k":"object"},
{"l":"spire/math/Searching$.html","n":"minimalElements","t":"def minimalElements[A](as: Iterable[A])(implicit ev: PartialOrder[A]): Seq[A]","d":"spire/math/Searching$","k":"def"},
{"l":"spire/math/Searching$.html","n":"search","t":"def search[@specialized A : Order](as: Array[A], item: A): Int","d":"spire/math/Searching$","k":"def"},
{"l":"spire/math/Searching$.html","n":"search","t":"def search[@specialized A : Order](as: Array[A], item: A, lower: Int, upper: Int): Int","d":"spire/math/Searching$","k":"def"},
{"l":"spire/math/Searching$.html","n":"search","t":"def search[@specialized A : Order](as: IndexedSeq[A], item: A): Int","d":"spire/math/Searching$","k":"def"},
{"l":"spire/math/Searching$.html","n":"search","t":"def search[@specialized A : Order](as: IndexedSeq[A], item: A, lower: Int, upper: Int): Int","d":"spire/math/Searching$","k":"def"},
{"l":"spire/math/Select.html","n":"Select","t":"trait Select","d":"spire/math/Select","k":"trait"},
{"l":"spire/math/Select.html","n":"select","t":"def select[@specialized A : ClassTag](data: Array[A], k: Int): Unit","d":"spire/math/Select","k":"def"},
{"l":"spire/math/SelectLike.html","n":"SelectLike","t":"trait SelectLike extends Select","d":"spire/math/SelectLike","k":"trait"},
{"l":"spire/math/SelectLike.html","n":"approxMedian","t":"def approxMedian[@specialized A : Order](data: Array[A], left: Int, right: Int, stride: Int): A","d":"spire/math/SelectLike","k":"def"},
{"l":"spire/math/SelectLike.html","n":"equalSpan","t":"def equalSpan[@specialized A](data: Array[A], offset: Int, stride: Int)(implicit o: Order[A]): Int","d":"spire/math/SelectLike","k":"def"},
{"l":"spire/math/SelectLike.html","n":"partition","t":"def partition[@specialized A](data: Array[A], left: Int, right: Int, stride: Int)(m: A)(implicit o: Order[A]): Int","d":"spire/math/SelectLike","k":"def"},
{"l":"spire/math/SelectLike.html","n":"select","t":"def select[@specialized A : ClassTag](data: Array[A], k: Int): Unit","d":"spire/math/SelectLike","k":"def"},
{"l":"spire/math/SelectLike.html","n":"select","t":"def select[@specialized A : Order](data: Array[A], left: Int, right: Int, stride: Int, k: Int): Unit","d":"spire/math/SelectLike","k":"def"},
{"l":"spire/math/SelectLike.html","n":"sort","t":"def sort[@specialized A](data: Array[A], left: Int, right: Int, stride: Int)(implicit o: Order[A]): Unit","d":"spire/math/SelectLike","k":"def"},
{"l":"spire/math/Selection$.html","n":"Selection","t":"object Selection","d":"spire/math/Selection$","k":"object"},
{"l":"spire/math/Selection$.html","n":"linearSelect","t":"def linearSelect[@specialized A : ClassTag](data: Array[A], k: Int): Unit","d":"spire/math/Selection$","k":"def"},
{"l":"spire/math/Selection$.html","n":"quickSelect","t":"def quickSelect[@specialized A : ClassTag](data: Array[A], k: Int): Unit","d":"spire/math/Selection$","k":"def"},
{"l":"spire/math/Selection$.html","n":"select","t":"def select[@specialized A : ClassTag](data: Array[A], k: Int): Unit","d":"spire/math/Selection$","k":"def"},
{"l":"spire/math/Sort.html","n":"Sort","t":"trait Sort","d":"spire/math/Sort","k":"trait"},
{"l":"spire/math/Sort.html","n":"sort","t":"def sort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/Sort","k":"def"},
{"l":"spire/math/Sorting$.html","n":"Sorting","t":"object Sorting","d":"spire/math/Sorting$","k":"object"},
{"l":"spire/math/Sorting$.html","n":"insertionSort","t":"def insertionSort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/Sorting$","k":"def"},
{"l":"spire/math/Sorting$.html","n":"mergeSort","t":"def mergeSort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/Sorting$","k":"def"},
{"l":"spire/math/Sorting$.html","n":"quickSort","t":"def quickSort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/Sorting$","k":"def"},
{"l":"spire/math/Sorting$.html","n":"sort","t":"def sort[@specialized A : ClassTag](data: Array[A]): Unit","d":"spire/math/Sorting$","k":"def"},
{"l":"spire/math/Trilean.html","n":"Trilean","t":"class Trilean(val value: Int) extends AnyVal","d":"spire/math/Trilean","k":"class"},
{"l":"spire/math/Trilean.html","n":"&","t":"def &(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"&&","t":"def &&(rhs: => Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"^","t":"def ^(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"assume","t":"def assume(b: Boolean): Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"assumeFalse","t":"def assumeFalse: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"assumeTrue","t":"def assumeTrue: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"fold","t":"def fold[A](f: Boolean => A)(unknown: => A): A","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"imp","t":"def imp(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"isFalse","t":"def isFalse: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"isKnown","t":"def isKnown: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"isNotFalse","t":"def isNotFalse: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"isNotTrue","t":"def isNotTrue: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"isTrue","t":"def isTrue: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"isUnknown","t":"def isUnknown: Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"nand","t":"def nand(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"nor","t":"def nor(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"nxor","t":"def nxor(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"toBoolean","t":"def toBoolean(b: => Boolean): Boolean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"toOption","t":"def toOption: Option[Boolean]","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"unary_!","t":"def unary_!: Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"value","t":"val value: Int","d":"spire/math/Trilean","k":"val"},
{"l":"spire/math/Trilean.html","n":"|","t":"def |(rhs: Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean.html","n":"||","t":"def ||(rhs: => Trilean): Trilean","d":"spire/math/Trilean","k":"def"},
{"l":"spire/math/Trilean$.html","n":"Trilean","t":"object Trilean","d":"spire/math/Trilean$","k":"object"},
{"l":"spire/math/Trilean$.html","n":"False","t":"val False: Trilean","d":"spire/math/Trilean$","k":"val"},
{"l":"spire/math/Trilean$.html","n":"True","t":"val True: Trilean","d":"spire/math/Trilean$","k":"val"},
{"l":"spire/math/Trilean$.html","n":"Unknown","t":"val Unknown: Trilean","d":"spire/math/Trilean$","k":"val"},
{"l":"spire/math/Trilean$.html","n":"algebra","t":"val algebra: DeMorgan[Trilean]","d":"spire/math/Trilean$","k":"val"},
{"l":"spire/math/Trilean$.html","n":"apply","t":"def apply(b: Boolean): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"apply","t":"def apply(o: Option[Boolean]): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"apply","t":"def apply(t: Try[Boolean]): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"liftPf","t":"def liftPf[A](p0: PartialFunction[A, Boolean]): A => Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"run","t":"def run(body: => Boolean): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"testDouble","t":"def testDouble(n: Double)(f: Double => Boolean): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"testFloat","t":"def testFloat(n: Float)(f: Float => Boolean): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"testRef","t":"def testRef[A <: AnyRef](a: A)(f: A => Boolean): Trilean","d":"spire/math/Trilean$","k":"def"},
{"l":"spire/math/Trilean$.html","n":"trileanEq","t":"val trileanEq: Eq[Trilean]","d":"spire/math/Trilean$","k":"val"},
{"l":"spire/math/TrileanAlgebra.html","n":"TrileanAlgebra","t":"class TrileanAlgebra extends DeMorgan[Trilean]","d":"spire/math/TrileanAlgebra","k":"class"},
{"l":"spire/math/TrileanAlgebra.html","n":"and","t":"def and(a: Trilean, b: Trilean): Trilean","d":"spire/math/TrileanAlgebra","k":"def"},
{"l":"spire/math/TrileanAlgebra.html","n":"not","t":"def not(a: Trilean): Trilean","d":"spire/math/TrileanAlgebra","k":"def"},
{"l":"spire/math/TrileanAlgebra.html","n":"one","t":"def one: Trilean","d":"spire/math/TrileanAlgebra","k":"def"},
{"l":"spire/math/TrileanAlgebra.html","n":"or","t":"def or(a: Trilean, b: Trilean): Trilean","d":"spire/math/TrileanAlgebra","k":"def"},
{"l":"spire/math/TrileanAlgebra.html","n":"zero","t":"def zero: Trilean","d":"spire/math/TrileanAlgebra","k":"def"},
{"l":"spire/math/UByte$.html","n":"UByte","t":"object UByte extends UByteInstances","d":"spire/math/UByte$","k":"object"},
{"l":"spire/math/UByte$.html","n":"MaxValue","t":"def MaxValue: UByte","d":"spire/math/UByte$","k":"def"},
{"l":"spire/math/UByte$.html","n":"MinValue","t":"def MinValue: UByte","d":"spire/math/UByte$","k":"def"},
{"l":"spire/math/UByte$.html","n":"apply","t":"def apply(n: Byte): UByte","d":"spire/math/UByte$","k":"def"},
{"l":"spire/math/UByte$.html","n":"apply","t":"def apply(n: Int): UByte","d":"spire/math/UByte$","k":"def"},
{"l":"spire/math/UByte.html","n":"UByte","t":"class UByte(val signed: Byte) extends AnyVal with ScalaNumericAnyConversions","d":"spire/math/UByte","k":"class"},
{"l":"spire/math/UByte.html","n":"!=","t":"def !=(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"%","t":"def %(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"&","t":"def &(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"*","t":"def *(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"**","t":"def **(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"+","t":"def +(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"-","t":"def -(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"/","t":"def /(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"<","t":"def <(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"<<","t":"def <<(shift: Int): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"<=","t":"def <=(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"=!=","t":"def =!=(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"==","t":"def ==(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"===","t":"def ===(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":">","t":"def >(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":">=","t":"def >=(that: UByte): Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":">>","t":"def >>(shift: Int): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":">>>","t":"def >>>(shift: Int): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"^","t":"def ^(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"signed","t":"val signed: Byte","d":"spire/math/UByte","k":"val"},
{"l":"spire/math/UByte.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"unary_-","t":"def unary_-: UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"unary_~","t":"def unary_~: UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"underlying","t":"def underlying: Any","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByte.html","n":"|","t":"def |(that: UByte): UByte","d":"spire/math/UByte","k":"def"},
{"l":"spire/math/UByteInstances.html","n":"UByteInstances","t":"trait UByteInstances","d":"spire/math/UByteInstances","k":"trait"},
{"l":"spire/math/UByteInstances.html","n":"UByteAlgebra","t":"val UByteAlgebra: CommutativeRig[UByte] & IsIntegral[UByte] & TruncatedDivision[UByte] & forAdditiveCommutativeMonoid[UByte] & Order[UByte]","d":"spire/math/UByteInstances","k":"val"},
{"l":"spire/math/UByteInstances.html","n":"UByteBitString","t":"val UByteBitString: BitString[UByte]","d":"spire/math/UByteInstances","k":"val"},
{"l":"spire/math/UByteInstances.html","n":"UByteTag","t":"val UByteTag: NumberTag[UByte]","d":"spire/math/UByteInstances","k":"val"},
{"l":"spire/math/UInt$.html","n":"UInt","t":"object UInt extends UIntInstances","d":"spire/math/UInt$","k":"object"},
{"l":"spire/math/UInt$.html","n":"MaxValue","t":"val MaxValue: UInt","d":"spire/math/UInt$","k":"val"},
{"l":"spire/math/UInt$.html","n":"MinValue","t":"val MinValue: UInt","d":"spire/math/UInt$","k":"val"},
{"l":"spire/math/UInt$.html","n":"apply","t":"def apply(n: Int): UInt","d":"spire/math/UInt$","k":"def"},
{"l":"spire/math/UInt$.html","n":"apply","t":"def apply(n: Long): UInt","d":"spire/math/UInt$","k":"def"},
{"l":"spire/math/UInt.html","n":"UInt","t":"class UInt(val signed: Int) extends AnyVal","d":"spire/math/UInt","k":"class"},
{"l":"spire/math/UInt.html","n":"!=","t":"def !=(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"%","t":"def %(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"&","t":"def &(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"*","t":"def *(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"**","t":"def **(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"+","t":"def +(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"-","t":"def -(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"/","t":"def /(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"<","t":"def <(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"<<","t":"def <<(shift: Int): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"<=","t":"def <=(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"=!=","t":"def =!=(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"==","t":"def ==(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"===","t":"def ===(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":">","t":"def >(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":">=","t":"def >=(that: UInt): Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":">>","t":"def >>(shift: Int): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":">>>","t":"def >>>(shift: Int): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"^","t":"def ^(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"isValidByte","t":"def isValidByte: Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"isValidChar","t":"def isValidChar: Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"isValidInt","t":"def isValidInt: Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"isValidShort","t":"def isValidShort: Boolean","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"signed","t":"val signed: Int","d":"spire/math/UInt","k":"val"},
{"l":"spire/math/UInt.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toByte","t":"def toByte: Byte","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toChar","t":"def toChar: Char","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toDouble","t":"def toDouble: Double","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toFloat","t":"def toFloat: Float","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toInt","t":"def toInt: Int","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toLong","t":"def toLong: Long","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"toShort","t":"def toShort: Short","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"unary_-","t":"def unary_-: UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"unary_~","t":"def unary_~: UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UInt.html","n":"|","t":"def |(that: UInt): UInt","d":"spire/math/UInt","k":"def"},
{"l":"spire/math/UIntInstances.html","n":"UIntInstances","t":"trait UIntInstances","d":"spire/math/UIntInstances","k":"trait"},
{"l":"spire/math/UIntInstances.html","n":"UIntAlgebra","t":"val UIntAlgebra: CommutativeRig[UInt] & IsIntegral[UInt] & TruncatedDivision[UInt] & forAdditiveCommutativeMonoid[UInt] & Order[UInt]","d":"spire/math/UIntInstances","k":"val"},
{"l":"spire/math/UIntInstances.html","n":"UIntBitString","t":"val UIntBitString: BitString[UInt]","d":"spire/math/UIntInstances","k":"val"},
{"l":"spire/math/UIntInstances.html","n":"UIntTag","t":"val UIntTag: NumberTag[UInt]","d":"spire/math/UIntInstances","k":"val"},
{"l":"spire/math/ULong$.html","n":"ULong","t":"object ULong extends ULongInstances","d":"spire/math/ULong$","k":"object"},
{"l":"spire/math/ULong$.html","n":"MaxValue","t":"val MaxValue: ULong","d":"spire/math/ULong$","k":"val"},
{"l":"spire/math/ULong$.html","n":"MinValue","t":"val MinValue: ULong","d":"spire/math/ULong$","k":"val"},
{"l":"spire/math/ULong$.html","n":"apply","t":"def apply(n: Long): ULong","d":"spire/math/ULong$","k":"def"},
{"l":"spire/math/ULong$.html","n":"apply","t":"def apply(s: String): ULong","d":"spire/math/ULong$","k":"def"},
{"l":"spire/math/ULong$.html","n":"fromBigInt","t":"def fromBigInt(n: BigInt): ULong","d":"spire/math/ULong$","k":"def"},
{"l":"spire/math/ULong$.html","n":"fromInt","t":"def fromInt(n: Int): ULong","d":"spire/math/ULong$","k":"def"},
{"l":"spire/math/ULong$.html","n":"fromLong","t":"def fromLong(n: Long): ULong","d":"spire/math/ULong$","k":"def"},
{"l":"spire/math/ULong$.html","n":"ulongToBigInt","t":"def ulongToBigInt(n: ULong): BigInt","d":"spire/math/ULong$","k":"def"},
{"l":"spire/math/ULong.html","n":"ULong","t":"class ULong(val signed: Long) extends AnyVal","d":"spire/math/ULong","k":"class"},
{"l":"spire/math/ULong.html","n":"!=","t":"def !=(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"%","t":"def %(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"&","t":"def &(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"*","t":"def *(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"**","t":"def **(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"+","t":"def +(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"-","t":"def -(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"/","t":"def /(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"/%","t":"def /%(that: ULong): (ULong, ULong)","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"<","t":"def <(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"<<","t":"def <<(shift: Int): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"<=","t":"def <=(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"=!=","t":"def =!=(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"==","t":"def ==(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"===","t":"def ===(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":">","t":"def >(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":">=","t":"def >=(that: ULong): Boolean","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":">>","t":"def >>(shift: Int): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":">>>","t":"def >>>(shift: Int): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"^","t":"def ^(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"gcd","t":"def gcd(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"signed","t":"val signed: Long","d":"spire/math/ULong","k":"val"},
{"l":"spire/math/ULong.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toByte","t":"def toByte: Byte","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toChar","t":"def toChar: Char","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toDouble","t":"def toDouble: Double","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toFloat","t":"def toFloat: Float","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toInt","t":"def toInt: Int","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toLong","t":"def toLong: Long","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"toShort","t":"def toShort: Short","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"unary_-","t":"def unary_-: ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"unary_~","t":"def unary_~: ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULong.html","n":"|","t":"def |(that: ULong): ULong","d":"spire/math/ULong","k":"def"},
{"l":"spire/math/ULongInstances.html","n":"ULongInstances","t":"trait ULongInstances","d":"spire/math/ULongInstances","k":"trait"},
{"l":"spire/math/ULongInstances.html","n":"ULongAlgebra","t":"val ULongAlgebra: CommutativeRig[ULong] & IsIntegral[ULong] & TruncatedDivision[ULong] & forAdditiveCommutativeMonoid[ULong] & Order[ULong]","d":"spire/math/ULongInstances","k":"val"},
{"l":"spire/math/ULongInstances.html","n":"ULongBitString","t":"val ULongBitString: BitString[ULong]","d":"spire/math/ULongInstances","k":"val"},
{"l":"spire/math/ULongInstances.html","n":"ULongTag","t":"val ULongTag: NumberTag[ULong]","d":"spire/math/ULongInstances","k":"val"},
{"l":"spire/math/UShort$.html","n":"UShort","t":"object UShort extends UShortInstances","d":"spire/math/UShort$","k":"object"},
{"l":"spire/math/UShort$.html","n":"MaxValue","t":"def MaxValue: UShort","d":"spire/math/UShort$","k":"def"},
{"l":"spire/math/UShort$.html","n":"MinValue","t":"def MinValue: UShort","d":"spire/math/UShort$","k":"def"},
{"l":"spire/math/UShort$.html","n":"apply","t":"def apply(n: Char): UShort","d":"spire/math/UShort$","k":"def"},
{"l":"spire/math/UShort$.html","n":"apply","t":"def apply(n: Short): UShort","d":"spire/math/UShort$","k":"def"},
{"l":"spire/math/UShort$.html","n":"apply","t":"def apply(n: Int): UShort","d":"spire/math/UShort$","k":"def"},
{"l":"spire/math/UShort.html","n":"UShort","t":"class UShort(val signed: Char) extends AnyVal","d":"spire/math/UShort","k":"class"},
{"l":"spire/math/UShort.html","n":"!=","t":"def !=(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"%","t":"def %(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"&","t":"def &(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"*","t":"def *(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"**","t":"def **(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"+","t":"def +(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"-","t":"def -(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"/","t":"def /(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"<","t":"def <(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"<<","t":"def <<(shift: Int): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"<=","t":"def <=(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"=!=","t":"def =!=(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"==","t":"def ==(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"===","t":"def ===(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":">","t":"def >(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":">=","t":"def >=(that: UShort): Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":">>","t":"def >>(shift: Int): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":">>>","t":"def >>>(shift: Int): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"^","t":"def ^(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"isValidByte","t":"def isValidByte: Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"isValidChar","t":"def isValidChar: Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"isValidInt","t":"def isValidInt: Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"isValidLong","t":"def isValidLong: Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"isValidShort","t":"def isValidShort: Boolean","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"signed","t":"val signed: Char","d":"spire/math/UShort","k":"val"},
{"l":"spire/math/UShort.html","n":"toBigInt","t":"def toBigInt: BigInt","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toByte","t":"def toByte: Byte","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toChar","t":"def toChar: Char","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toDouble","t":"def toDouble: Double","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toFloat","t":"def toFloat: Float","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toInt","t":"def toInt: Int","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toLong","t":"def toLong: Long","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"toShort","t":"def toShort: Short","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"unary_-","t":"def unary_-: UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"unary_~","t":"def unary_~: UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShort.html","n":"|","t":"def |(that: UShort): UShort","d":"spire/math/UShort","k":"def"},
{"l":"spire/math/UShortInstances.html","n":"UShortInstances","t":"trait UShortInstances","d":"spire/math/UShortInstances","k":"trait"},
{"l":"spire/math/UShortInstances.html","n":"UShortAlgebra","t":"val UShortAlgebra: CommutativeRig[UShort] & IsIntegral[UShort] & TruncatedDivision[UShort] & forAdditiveCommutativeMonoid[UShort] & Order[UShort]","d":"spire/math/UShortInstances","k":"val"},
{"l":"spire/math/UShortInstances.html","n":"UShortBitString","t":"val UShortBitString: BitString[UShort]","d":"spire/math/UShortInstances","k":"val"},
{"l":"spire/math/UShortInstances.html","n":"UShortTag","t":"val UShortTag: NumberTag[UShort]","d":"spire/math/UShortInstances","k":"val"},
{"l":"spire/math/extras.html","n":"spire.math.extras","t":"package spire.math.extras","d":"spire/math/extras","k":"package"},
{"l":"spire/math/extras/FixedPoint.html","n":"FixedPoint","t":"class FixedPoint(val long: Long) extends AnyVal","d":"spire/math/extras/FixedPoint","k":"class"},
{"l":"spire/math/extras/FixedPoint.html","n":"!=","t":"def !=(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"*","t":"def *(rhs: FixedPoint)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"*","t":"def *(rhs: Long): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"**","t":"def **(k: Int)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"+","t":"def +(rhs: FixedPoint): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"+","t":"def +(rhs: Long)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"-","t":"def -(rhs: FixedPoint): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"-","t":"def -(rhs: Long)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"/","t":"def /(rhs: FixedPoint)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"/","t":"def /(rhs: Long): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"<","t":"def <(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"<=","t":"def <=(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"=!=","t":"def =!=(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"===","t":"def ===(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":">","t":"def >(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":">=","t":"def >=(rhs: FixedPoint): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"abs","t":"def abs: FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"ceil","t":"def ceil(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"compare","t":"def compare(rhs: FixedPoint): Int","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"floor","t":"def floor(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"fpow","t":"def fpow(k: FixedPoint)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"gcd","t":"def gcd(rhs: FixedPoint): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"isWhole","t":"def isWhole(implicit scale: FixedScale): Boolean","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"lcm","t":"def lcm(rhs: FixedPoint): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"long","t":"val long: Long","d":"spire/math/extras/FixedPoint","k":"val"},
{"l":"spire/math/extras/FixedPoint.html","n":"nroot","t":"def nroot(k: Int)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"pow","t":"def pow(k: Int)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"round","t":"def round(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"signum","t":"def signum: Int","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"sqrt","t":"def sqrt(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"tmod","t":"def tmod(rhs: FixedPoint): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"tmod","t":"def tmod(rhs: Long)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"toBigDecimal","t":"def toBigDecimal(implicit scale: FixedScale): BigDecimal","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"toDouble","t":"def toDouble(implicit scale: FixedScale): Double","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"toLong","t":"def toLong(implicit scale: FixedScale): Long","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"toRational","t":"def toRational(implicit scale: FixedScale): Rational","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"toReal","t":"def toReal(implicit scale: FixedScale): Real","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"toString","t":"def toString(implicit scale: FixedScale): String","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"tquot","t":"def tquot(rhs: FixedPoint)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"tquotmod","t":"def tquotmod(rhs: FixedPoint)(implicit scale: FixedScale): (FixedPoint, FixedPoint)","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint.html","n":"unary_-","t":"def unary_-: FixedPoint","d":"spire/math/extras/FixedPoint","k":"def"},
{"l":"spire/math/extras/FixedPoint$.html","n":"FixedPoint","t":"object FixedPoint extends FixedPointInstances","d":"spire/math/extras/FixedPoint$","k":"object"},
{"l":"spire/math/extras/FixedPoint$.html","n":"MaxValue","t":"val MaxValue: FixedPoint","d":"spire/math/extras/FixedPoint$","k":"val"},
{"l":"spire/math/extras/FixedPoint$.html","n":"MinValue","t":"val MinValue: FixedPoint","d":"spire/math/extras/FixedPoint$","k":"val"},
{"l":"spire/math/extras/FixedPoint$.html","n":"apply","t":"def apply(n: Long)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint$","k":"def"},
{"l":"spire/math/extras/FixedPoint$.html","n":"apply","t":"def apply(n: Rational)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint$","k":"def"},
{"l":"spire/math/extras/FixedPoint$.html","n":"apply","t":"def apply(s: String)(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint$","k":"def"},
{"l":"spire/math/extras/FixedPoint$.html","n":"apply","t":"def apply[@specialized(Float, Double) A](a: A)(implicit scale: FixedScale, fr: Fractional[A]): FixedPoint","d":"spire/math/extras/FixedPoint$","k":"def"},
{"l":"spire/math/extras/FixedPoint$.html","n":"one","t":"def one(implicit scale: FixedScale): FixedPoint","d":"spire/math/extras/FixedPoint$","k":"def"},
{"l":"spire/math/extras/FixedPoint$.html","n":"zero","t":"val zero: FixedPoint","d":"spire/math/extras/FixedPoint$","k":"val"},
{"l":"spire/math/extras/FixedPointInstances.html","n":"FixedPointInstances","t":"trait FixedPointInstances","d":"spire/math/extras/FixedPointInstances","k":"trait"},
{"l":"spire/math/extras/FixedPointInstances.html","n":"FixedPointTag","t":"val FixedPointTag: CustomTag[FixedPoint]","d":"spire/math/extras/FixedPointInstances","k":"val"},
{"l":"spire/math/extras/FixedPointInstances.html","n":"algebra","t":"def algebra(implicit scale: FixedScale): Fractional[FixedPoint] & Order[FixedPoint] & forCommutativeRing[FixedPoint]","d":"spire/math/extras/FixedPointInstances","k":"def"},
{"l":"spire/math/extras/FixedPointOverflow.html","n":"FixedPointOverflow","t":"class FixedPointOverflow(n: Long) extends Exception","d":"spire/math/extras/FixedPointOverflow","k":"class"},
{"l":"spire/math/extras/FixedScale.html","n":"FixedScale","t":"class FixedScale(denom: Int)","d":"spire/math/extras/FixedScale","k":"class"},
{"l":"spire/math/extras/interval.html","n":"spire.math.extras.interval","t":"package spire.math.extras.interval","d":"spire/math/extras/interval","k":"package"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"IntervalSeq","t":"class IntervalSeq[T] extends IntervalSet[T, IntervalSeq[T]]","d":"spire/math/extras/interval/IntervalSeq","k":"class"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"&","t":"def &(rhs: IntervalSeq[T]): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"^","t":"def ^(rhs: IntervalSeq[T]): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"above","t":"def above(value: T): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"aboveAll","t":"def aboveAll: Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"apply","t":"def apply(value: T): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"at","t":"def at(value: T): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"below","t":"def below(value: T): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"belowAll","t":"val belowAll: Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"val"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"edges","t":"def edges: Iterable[T]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"hull","t":"def hull: Interval[T]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"intersects","t":"def intersects(rhs: IntervalSeq[T]): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"intervalIterator","t":"def intervalIterator: Iterator[Interval[T]]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"intervals","t":"def intervals: Iterable[Interval[T]]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"isContiguous","t":"def isContiguous: Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"isEmpty","t":"def isEmpty: Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"isProperSupersetOf","t":"def isProperSupersetOf(rhs: IntervalSeq[T]): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"isSupersetOf","t":"def isSupersetOf(rhs: IntervalSeq[T]): Boolean","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"unary_~","t":"def unary_~: IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq.html","n":"|","t":"def |(rhs: IntervalSeq[T]): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"IntervalSeq","t":"object IntervalSeq","d":"spire/math/extras/interval/IntervalSeq$","k":"object"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"above","t":"def above[T : Order](value: T): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"algebra","t":"def algebra[T : Order]: Bool[IntervalSeq[T]] & Eq[IntervalSeq[T]]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"all","t":"def all[T : Order]: IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"apply","t":"def apply[T : Order](value: Boolean): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"apply","t":"def apply[T : Order](interval: Interval[T]): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"apply","t":"def apply(text: String): IntervalSeq[Rational]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"atOrAbove","t":"def atOrAbove[T : Order](value: T): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"atOrBelow","t":"def atOrBelow[T : Order](value: T): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"below","t":"def below[T : Order](value: T): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"empty","t":"def empty[T : Order]: IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"hole","t":"def hole[T : Order](value: T): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSeq$.html","n":"point","t":"def point[T : Order](value: T): IntervalSeq[T]","d":"spire/math/extras/interval/IntervalSeq$","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"IntervalSet","t":"class IntervalSet[T, S <: IntervalSet[T, _]] extends T => Boolean","d":"spire/math/extras/interval/IntervalSet","k":"class"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"&","t":"def &(rhs: S): S","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"^","t":"def ^(rhs: S): S","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"above","t":"def above(value: T): Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"aboveAll","t":"def aboveAll: Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"at","t":"def at(value: T): Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"below","t":"def below(value: T): Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"belowAll","t":"def belowAll: Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"edges","t":"def edges: Iterable[T]","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"hull","t":"def hull: Interval[T]","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"intersects","t":"def intersects(rhs: S): Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"intervalIterator","t":"def intervalIterator: Iterator[Interval[T]]","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"intervals","t":"def intervals: Iterable[Interval[T]]","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"isContiguous","t":"def isContiguous: Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"isEmpty","t":"def isEmpty: Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"isProperSupersetOf","t":"def isProperSupersetOf(rhs: S): Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"isSupersetOf","t":"def isSupersetOf(rhs: S): Boolean","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"unary_~","t":"def unary_~: S","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalSet.html","n":"|","t":"def |(rhs: S): S","d":"spire/math/extras/interval/IntervalSet","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie.html","n":"IntervalTrie","t":"class IntervalTrie[T] extends IntervalSet[T, IntervalTrie[T]]","d":"spire/math/extras/interval/IntervalTrie","k":"class"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"IntervalTrie","t":"object IntervalTrie","d":"spire/math/extras/interval/IntervalTrie$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"above","t":"def above[T : Element](value: T): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"algebra","t":"def algebra[T : Element]: Bool[IntervalTrie[T]] & Eq[IntervalTrie[T]]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"all","t":"def all[T : Element]: IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"apply","t":"def apply[T : Element](interval: Interval[T]): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"apply","t":"def apply(text: String): IntervalTrie[Long]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"atOrAbove","t":"def atOrAbove[T : Element](value: T): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"atOrBelow","t":"def atOrBelow[T : Element](value: T): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"below","t":"def below[T : Element](value: T): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"constant","t":"def constant[T : Element](value: Boolean): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"empty","t":"def empty[T : Element]: IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"hole","t":"def hole[T : Element](value: T): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$.html","n":"point","t":"def point[T : Element](value: T): IntervalTrie[T]","d":"spire/math/extras/interval/IntervalTrie$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ByteElement$.html","n":"ByteElement","t":"object ByteElement extends Element[Byte]","d":"spire/math/extras/interval/IntervalTrie$$ByteElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$ByteElement$.html","n":"fromLong","t":"def fromLong(key: Long): Byte","d":"spire/math/extras/interval/IntervalTrie$$ByteElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ByteElement$.html","n":"order","t":"def order: Order[Byte]","d":"spire/math/extras/interval/IntervalTrie$$ByteElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ByteElement$.html","n":"toLong","t":"def toLong(value: Byte): Long","d":"spire/math/extras/interval/IntervalTrie$$ByteElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$CharElement$.html","n":"CharElement","t":"object CharElement extends Element[Char]","d":"spire/math/extras/interval/IntervalTrie$$CharElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$CharElement$.html","n":"fromLong","t":"def fromLong(key: Long): Char","d":"spire/math/extras/interval/IntervalTrie$$CharElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$CharElement$.html","n":"order","t":"def order: Order[Char]","d":"spire/math/extras/interval/IntervalTrie$$CharElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$CharElement$.html","n":"toLong","t":"def toLong(value: Char): Long","d":"spire/math/extras/interval/IntervalTrie$$CharElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$DoubleElement$.html","n":"DoubleElement","t":"object DoubleElement extends Element[Double]","d":"spire/math/extras/interval/IntervalTrie$$DoubleElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$DoubleElement$.html","n":"fromLong","t":"def fromLong(twosComplement: Long): Double","d":"spire/math/extras/interval/IntervalTrie$$DoubleElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$DoubleElement$.html","n":"order","t":"def order: Order[Double]","d":"spire/math/extras/interval/IntervalTrie$$DoubleElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$DoubleElement$.html","n":"toLong","t":"def toLong(value: Double): Long","d":"spire/math/extras/interval/IntervalTrie$$DoubleElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$Element.html","n":"Element","t":"trait Element[@specialized(Float, Int, Long, Double) T]","d":"spire/math/extras/interval/IntervalTrie$$Element","k":"trait"},
{"l":"spire/math/extras/interval/IntervalTrie$$Element.html","n":"fromLong","t":"def fromLong(key: Long): T","d":"spire/math/extras/interval/IntervalTrie$$Element","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$Element.html","n":"order","t":"def order: Order[T]","d":"spire/math/extras/interval/IntervalTrie$$Element","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$Element.html","n":"toLong","t":"def toLong(value: T): Long","d":"spire/math/extras/interval/IntervalTrie$$Element","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$FloatElement$.html","n":"FloatElement","t":"object FloatElement extends Element[Float]","d":"spire/math/extras/interval/IntervalTrie$$FloatElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$FloatElement$.html","n":"fromLong","t":"def fromLong(twosComplement: Long): Float","d":"spire/math/extras/interval/IntervalTrie$$FloatElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$FloatElement$.html","n":"order","t":"def order: Order[Float]","d":"spire/math/extras/interval/IntervalTrie$$FloatElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$FloatElement$.html","n":"toLong","t":"def toLong(value: Float): Long","d":"spire/math/extras/interval/IntervalTrie$$FloatElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$IntElement$.html","n":"IntElement","t":"object IntElement extends Element[Int]","d":"spire/math/extras/interval/IntervalTrie$$IntElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$IntElement$.html","n":"fromLong","t":"def fromLong(key: Long): Int","d":"spire/math/extras/interval/IntervalTrie$$IntElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$IntElement$.html","n":"order","t":"def order: Order[Int]","d":"spire/math/extras/interval/IntervalTrie$$IntElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$IntElement$.html","n":"toLong","t":"def toLong(value: Int): Long","d":"spire/math/extras/interval/IntervalTrie$$IntElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$LongElement$.html","n":"LongElement","t":"object LongElement extends Element[Long]","d":"spire/math/extras/interval/IntervalTrie$$LongElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$LongElement$.html","n":"fromLong","t":"def fromLong(key: Long): Long","d":"spire/math/extras/interval/IntervalTrie$$LongElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$LongElement$.html","n":"order","t":"def order: Order[Long]","d":"spire/math/extras/interval/IntervalTrie$$LongElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$LongElement$.html","n":"toLong","t":"def toLong(value: Long): Long","d":"spire/math/extras/interval/IntervalTrie$$LongElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ShortElement$.html","n":"ShortElement","t":"object ShortElement extends Element[Short]","d":"spire/math/extras/interval/IntervalTrie$$ShortElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$ShortElement$.html","n":"fromLong","t":"def fromLong(key: Long): Short","d":"spire/math/extras/interval/IntervalTrie$$ShortElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ShortElement$.html","n":"order","t":"def order: Order[Short]","d":"spire/math/extras/interval/IntervalTrie$$ShortElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ShortElement$.html","n":"toLong","t":"def toLong(value: Short): Long","d":"spire/math/extras/interval/IntervalTrie$$ShortElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UByteElement$.html","n":"UByteElement","t":"object UByteElement extends Element[UByte]","d":"spire/math/extras/interval/IntervalTrie$$UByteElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$UByteElement$.html","n":"fromLong","t":"def fromLong(key: Long): UByte","d":"spire/math/extras/interval/IntervalTrie$$UByteElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UByteElement$.html","n":"order","t":"def order: Order[UByte]","d":"spire/math/extras/interval/IntervalTrie$$UByteElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UByteElement$.html","n":"toLong","t":"def toLong(value: UByte): Long","d":"spire/math/extras/interval/IntervalTrie$$UByteElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UIntElement$.html","n":"UIntElement","t":"object UIntElement extends Element[UInt]","d":"spire/math/extras/interval/IntervalTrie$$UIntElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$UIntElement$.html","n":"fromLong","t":"def fromLong(key: Long): UInt","d":"spire/math/extras/interval/IntervalTrie$$UIntElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UIntElement$.html","n":"order","t":"def order: Order[UInt]","d":"spire/math/extras/interval/IntervalTrie$$UIntElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UIntElement$.html","n":"toLong","t":"def toLong(value: UInt): Long","d":"spire/math/extras/interval/IntervalTrie$$UIntElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ULongElement$.html","n":"ULongElement","t":"object ULongElement extends Element[ULong]","d":"spire/math/extras/interval/IntervalTrie$$ULongElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$ULongElement$.html","n":"fromLong","t":"def fromLong(key: Long): ULong","d":"spire/math/extras/interval/IntervalTrie$$ULongElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ULongElement$.html","n":"order","t":"def order: Order[ULong]","d":"spire/math/extras/interval/IntervalTrie$$ULongElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$ULongElement$.html","n":"toLong","t":"def toLong(value: ULong): Long","d":"spire/math/extras/interval/IntervalTrie$$ULongElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UShortElement$.html","n":"UShortElement","t":"object UShortElement extends Element[UShort]","d":"spire/math/extras/interval/IntervalTrie$$UShortElement$","k":"object"},
{"l":"spire/math/extras/interval/IntervalTrie$$UShortElement$.html","n":"fromLong","t":"def fromLong(key: Long): UShort","d":"spire/math/extras/interval/IntervalTrie$$UShortElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UShortElement$.html","n":"order","t":"def order: Order[UShort]","d":"spire/math/extras/interval/IntervalTrie$$UShortElement$","k":"def"},
{"l":"spire/math/extras/interval/IntervalTrie$$UShortElement$.html","n":"toLong","t":"def toLong(value: UShort): Long","d":"spire/math/extras/interval/IntervalTrie$$UShortElement$","k":"def"},
{"l":"spire/math/interval.html","n":"spire.math.interval","t":"package spire.math.interval","d":"spire/math/interval","k":"package"},
{"l":"spire/math/interval/Bound.html","n":"Bound","t":"trait Bound[A]","d":"spire/math/interval/Bound","k":"trait"},
{"l":"spire/math/interval/Bound.html","n":"*","t":"def *(a: A)(implicit ev: MultiplicativeSemigroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"*","t":"def *(rhs: Bound[A])(implicit ev: MultiplicativeSemigroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"+","t":"def +(a: A)(implicit ev: AdditiveSemigroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"+","t":"def +(rhs: Bound[A])(implicit ev: AdditiveSemigroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"-","t":"def -(a: A)(implicit ev: AdditiveGroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"-","t":"def -(rhs: Bound[A])(implicit ev: AdditiveGroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"/","t":"def /(a: A)(implicit ev: MultiplicativeGroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"/","t":"def /(rhs: Bound[A])(implicit ev: MultiplicativeGroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"combine","t":"def combine[B](rhs: Bound[A])(f: (A, A) => A): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"map","t":"def map[B](f: A => B): Bound[B]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"reciprocal","t":"def reciprocal(implicit ev: MultiplicativeGroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound.html","n":"unary_-","t":"def unary_-(implicit ev: AdditiveGroup[A]): Bound[A]","d":"spire/math/interval/Bound","k":"def"},
{"l":"spire/math/interval/Bound$.html","n":"Bound","t":"object Bound","d":"spire/math/interval/Bound$","k":"object"},
{"l":"spire/math/interval/Bound$.html","n":"eq","t":"def eq[A](implicit ev: Eq[A]): Eq[Bound[A]]","d":"spire/math/interval/Bound$","k":"def"},
{"l":"spire/math/interval/Closed.html","n":"Closed","t":"class Closed[A](a: A) extends ValueBound[A]","d":"spire/math/interval/Closed","k":"class"},
{"l":"spire/math/interval/Closed.html","n":"isClosed","t":"def isClosed: Boolean","d":"spire/math/interval/Closed","k":"def"},
{"l":"spire/math/interval/EmptyBound.html","n":"EmptyBound","t":"class EmptyBound[A]() extends Bound[A]","d":"spire/math/interval/EmptyBound","k":"class"},
{"l":"spire/math/interval/Open.html","n":"Open","t":"class Open[A](a: A) extends ValueBound[A]","d":"spire/math/interval/Open","k":"class"},
{"l":"spire/math/interval/Open.html","n":"isClosed","t":"def isClosed: Boolean","d":"spire/math/interval/Open","k":"def"},
{"l":"spire/math/interval/Overlap.html","n":"Overlap","t":"class Overlap[A] extends Product with Serializable","d":"spire/math/interval/Overlap","k":"class"},
{"l":"spire/math/interval/Overlap.html","n":"isDisjoint","t":"def isDisjoint: Boolean","d":"spire/math/interval/Overlap","k":"def"},
{"l":"spire/math/interval/Overlap.html","n":"isEqual","t":"def isEqual: Boolean","d":"spire/math/interval/Overlap","k":"def"},
{"l":"spire/math/interval/Overlap.html","n":"isSubset","t":"def isSubset: Boolean","d":"spire/math/interval/Overlap","k":"def"},
{"l":"spire/math/interval/Overlap$.html","n":"Overlap","t":"object Overlap","d":"spire/math/interval/Overlap$","k":"object"},
{"l":"spire/math/interval/Overlap$.html","n":"apply","t":"def apply[A : Order](lhs: Interval[A], rhs: Interval[A]): Overlap[A]","d":"spire/math/interval/Overlap$","k":"def"},
{"l":"spire/math/interval/Overlap$.html","n":"eqOverlap","t":"def eqOverlap[A : Eq]: Eq[Overlap[A]]","d":"spire/math/interval/Overlap$","k":"def"},
{"l":"spire/math/interval/Overlap$$Disjoint.html","n":"Disjoint","t":"class Disjoint[A] extends Overlap[A]","d":"spire/math/interval/Overlap$$Disjoint","k":"class"},
{"l":"spire/math/interval/Overlap$$Disjoint.html","n":"join","t":"def join(implicit o: Order[A]): Interval[A]","d":"spire/math/interval/Overlap$$Disjoint","k":"def"},
{"l":"spire/math/interval/Overlap$$Equal.html","n":"Equal","t":"class Equal[A] extends Overlap[A]","d":"spire/math/interval/Overlap$$Equal","k":"class"},
{"l":"spire/math/interval/Overlap$$PartialOverlap.html","n":"PartialOverlap","t":"class PartialOverlap[A] extends Overlap[A]","d":"spire/math/interval/Overlap$$PartialOverlap","k":"class"},
{"l":"spire/math/interval/Overlap$$Subset.html","n":"Subset","t":"class Subset[A] extends Overlap[A]","d":"spire/math/interval/Overlap$$Subset","k":"class"},
{"l":"spire/math/interval/Unbound.html","n":"Unbound","t":"class Unbound[A]() extends Bound[A]","d":"spire/math/interval/Unbound","k":"class"},
{"l":"spire/math/interval/ValueBound.html","n":"ValueBound","t":"trait ValueBound[A] extends Bound[A]","d":"spire/math/interval/ValueBound","k":"trait"},
{"l":"spire/math/interval/ValueBound.html","n":"*~","t":"def *~(rhs: ValueBound[A])(implicit ev: MultiplicativeSemigroup[A]): ValueBound[A]","d":"spire/math/interval/ValueBound","k":"def"},
{"l":"spire/math/interval/ValueBound.html","n":"+~","t":"def +~(rhs: ValueBound[A])(implicit ev: AdditiveSemigroup[A]): ValueBound[A]","d":"spire/math/interval/ValueBound","k":"def"},
{"l":"spire/math/interval/ValueBound.html","n":"-~","t":"def -~(rhs: ValueBound[A])(implicit ev: AdditiveGroup[A]): ValueBound[A]","d":"spire/math/interval/ValueBound","k":"def"},
{"l":"spire/math/interval/ValueBound.html","n":"/~","t":"def /~(rhs: ValueBound[A])(implicit ev: MultiplicativeGroup[A]): ValueBound[A]","d":"spire/math/interval/ValueBound","k":"def"},
{"l":"spire/math/interval/ValueBound.html","n":"a","t":"def a: A","d":"spire/math/interval/ValueBound","k":"def"},
{"l":"spire/math/interval/ValueBound.html","n":"isClosed","t":"def isClosed: Boolean","d":"spire/math/interval/ValueBound","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"ValueBound","t":"object ValueBound","d":"spire/math/interval/ValueBound$","k":"object"},
{"l":"spire/math/interval/ValueBound$.html","n":"unapply","t":"def unapply[A](b: Bound[A]): Option[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union2","t":"def union2[A : Order](v1: ValueBound[A], v2: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union3","t":"def union3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union3_1approx2","t":"def union3_1approx2[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union3_1approx2_2approx3","t":"def union3_1approx2_2approx3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union3_1approx2_2less3","t":"def union3_1approx2_2less3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union3_1less2","t":"def union3_1less2[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union3_1less2_2approx3","t":"def union3_1less2_2approx3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4","t":"def union4[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1approx2","t":"def union4_1approx2[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1approx2_2approx3","t":"def union4_1approx2_2approx3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1approx2_2approx3_3less4","t":"def union4_1approx2_2approx3_3less4[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1approx2_2less3","t":"def union4_1approx2_2less3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1approx2_2less3_3approx4","t":"def union4_1approx2_2less3_3approx4[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1less2","t":"def union4_1less2[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1less2_1less3","t":"def union4_1less2_1less3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1less2_2approx3","t":"def union4_1less2_2approx3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1less2_2approx3_3approx4","t":"def union4_1less2_2approx3_3approx4[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1less3_2less3","t":"def union4_1less3_2less3[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/interval/ValueBound$.html","n":"union4_1less3_2less3_3approx4","t":"def union4_1less3_2less3_3approx4[A : Order](v1: ValueBound[A], v2: ValueBound[A], v3: ValueBound[A], v4: ValueBound[A]): Interval[A]","d":"spire/math/interval/ValueBound$","k":"def"},
{"l":"spire/math/poly.html","n":"spire.math.poly","t":"package spire.math.poly","d":"spire/math/poly","k":"package"},
{"l":"spire/math/poly/BigDecimalRootRefinement.html","n":"BigDecimalRootRefinement","t":"class BigDecimalRootRefinement(context: ApproximationContext, approximation: Approximation)","d":"spire/math/poly/BigDecimalRootRefinement","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement.html","n":"approximateValue","t":"def approximateValue: BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement.html","n":"refine","t":"def refine(scale: Int): BigDecimalRootRefinement","d":"spire/math/poly/BigDecimalRootRefinement","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement.html","n":"refine","t":"def refine(mc: MathContext): BigDecimalRootRefinement","d":"spire/math/poly/BigDecimalRootRefinement","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement.html","n":"refineApproximation","t":"def refineApproximation(ctx: ApproximationContext): Approximation","d":"spire/math/poly/BigDecimalRootRefinement","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$.html","n":"BigDecimalRootRefinement","t":"object BigDecimalRootRefinement","d":"spire/math/poly/BigDecimalRootRefinement$","k":"object"},
{"l":"spire/math/poly/BigDecimalRootRefinement$.html","n":"apply","t":"def apply(poly: Polynomial[BigDecimal], lowerBound: Rational, upperBound: Rational): BigDecimalRootRefinement","d":"spire/math/poly/BigDecimalRootRefinement$","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$.html","n":"apply","t":"def apply(poly: Polynomial[BigDecimal], lowerBound: Rational, upperBound: Rational, scale: Int): BigDecimalRootRefinement","d":"spire/math/poly/BigDecimalRootRefinement$","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$.html","n":"apply","t":"def apply(poly: Polynomial[BigDecimal], lowerBound: Rational, upperBound: Rational, mc: MathContext): BigDecimalRootRefinement","d":"spire/math/poly/BigDecimalRootRefinement$","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"AbsoluteContext","t":"class AbsoluteContext extends ApproximationContext","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"ceil","t":"def ceil(x: Rational): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"ceil","t":"def ceil(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"evalExact","t":"def evalExact(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"floor","t":"def floor(x: Rational): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"floor","t":"def floor(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext.html","n":"getEps","t":"def getEps(x: BigDecimal): Int","d":"spire/math/poly/BigDecimalRootRefinement$$AbsoluteContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$Approximation.html","n":"Approximation","t":"class Approximation","d":"spire/math/poly/BigDecimalRootRefinement$$Approximation","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"ApproximationContext","t":"class ApproximationContext","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"ceil","t":"def ceil(x: Rational): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"ceil","t":"def ceil(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"evalExact","t":"def evalExact(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"floor","t":"def floor(x: Rational): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"floor","t":"def floor(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"getEps","t":"def getEps(x: BigDecimal): Int","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext.html","n":"poly","t":"def poly: Polynomial[BigDecimal]","d":"spire/math/poly/BigDecimalRootRefinement$$ApproximationContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$Bounded.html","n":"Bounded","t":"class Bounded(lowerBound: BigDecimal, lowerBoundValue: BigDecimal, upperBound: BigDecimal, upperBoundValue: BigDecimal, n: Int) extends Approximation","d":"spire/math/poly/BigDecimalRootRefinement$$Bounded","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$BoundedLeft.html","n":"BoundedLeft","t":"class BoundedLeft(lowerBound: Rational, upperBound: BigDecimal) extends Approximation","d":"spire/math/poly/BigDecimalRootRefinement$$BoundedLeft","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$BoundedRight.html","n":"BoundedRight","t":"class BoundedRight(lowerBound: BigDecimal, upperBound: Rational) extends Approximation","d":"spire/math/poly/BigDecimalRootRefinement$$BoundedRight","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$ExactRoot.html","n":"ExactRoot","t":"class ExactRoot(root: BigDecimal) extends Approximation","d":"spire/math/poly/BigDecimalRootRefinement$$ExactRoot","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"RelativeContext","t":"class RelativeContext extends ApproximationContext","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"class"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"ceil","t":"def ceil(x: Rational): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"ceil","t":"def ceil(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"evalExact","t":"def evalExact(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"floor","t":"def floor(x: Rational): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"floor","t":"def floor(x: BigDecimal): BigDecimal","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext.html","n":"getEps","t":"def getEps(x: BigDecimal): Int","d":"spire/math/poly/BigDecimalRootRefinement$$RelativeContext","k":"def"},
{"l":"spire/math/poly/BigDecimalRootRefinement$$Unbounded.html","n":"Unbounded","t":"class Unbounded(lowerBound: Rational, upperBound: Rational) extends Approximation","d":"spire/math/poly/BigDecimalRootRefinement$$Unbounded","k":"class"},
{"l":"spire/math/poly/PolyDense.html","n":"PolyDense","t":"class PolyDense[@specialized(Double) C] extends Polynomial[C]","d":"spire/math/poly/PolyDense","k":"class"},
{"l":"spire/math/poly/PolyDense.html","n":"*","t":"def *(rhs: Polynomial[C])(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"*:","t":"def *:(k: C)(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"+","t":"def +(rhs: Polynomial[C])(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"apply","t":"def apply(x: C)(implicit ring: Semiring[C]): C","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"coeffs","t":"val coeffs: Array[C]","d":"spire/math/poly/PolyDense","k":"val"},
{"l":"spire/math/poly/PolyDense.html","n":"coeffsArray","t":"def coeffsArray(implicit ring: Semiring[C]): Array[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"ct","t":"val ct: ClassTag[C]","d":"spire/math/poly/PolyDense","k":"val"},
{"l":"spire/math/poly/PolyDense.html","n":"degree","t":"def degree: Int","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"derivative","t":"def derivative(implicit ring: Ring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"foreach","t":"def foreach[U](f: (Int, C) => U): Unit","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"integral","t":"def integral(implicit field: Field[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"maxOrderTermCoeff","t":"def maxOrderTermCoeff(implicit ring: Semiring[C]): C","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"nth","t":"def nth(n: Int)(implicit ring: Semiring[C]): C","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"reductum","t":"def reductum(implicit e: Eq[C], ring: Semiring[C], ct: ClassTag[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"termsIterator","t":"def termsIterator: Iterator[Term[C]]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"toDense","t":"def toDense(implicit ring: Semiring[C], eq: Eq[C]): PolyDense[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"toSparse","t":"def toSparse(implicit ring: Semiring[C], eq: Eq[C]): PolySparse[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense.html","n":"unary_-","t":"def unary_-(implicit ring: Rng[C]): Polynomial[C]","d":"spire/math/poly/PolyDense","k":"def"},
{"l":"spire/math/poly/PolyDense$TermIterator.html","n":"TermIterator","t":"class TermIterator extends Iterator[Term[C]]","d":"spire/math/poly/PolyDense$TermIterator","k":"class"},
{"l":"spire/math/poly/PolyDense$TermIterator.html","n":"hasNext","t":"def hasNext: Boolean","d":"spire/math/poly/PolyDense$TermIterator","k":"def"},
{"l":"spire/math/poly/PolyDense$.html","n":"PolyDense","t":"object PolyDense","d":"spire/math/poly/PolyDense$","k":"object"},
{"l":"spire/math/poly/PolySparse.html","n":"PolySparse","t":"class PolySparse[@specialized(Double) C] extends Polynomial[C]","d":"spire/math/poly/PolySparse","k":"class"},
{"l":"spire/math/poly/PolySparse.html","n":"*","t":"def *(rhs0: Polynomial[C])(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"*:","t":"def *:(k: C)(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"+","t":"def +(rhs0: Polynomial[C])(implicit ring: Semiring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"apply","t":"def apply(x: C)(implicit ring: Semiring[C]): C","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"coeffsArray","t":"def coeffsArray(implicit ring: Semiring[C]): Array[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"ct","t":"val ct: ClassTag[C]","d":"spire/math/poly/PolySparse","k":"val"},
{"l":"spire/math/poly/PolySparse.html","n":"degree","t":"def degree: Int","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"derivative","t":"def derivative(implicit ring: Ring[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"foreach","t":"def foreach[U](f: (Int, C) => U): Unit","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"integral","t":"def integral(implicit field: Field[C], eq: Eq[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"isZero","t":"def isZero: Boolean","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"maxOrderTermCoeff","t":"def maxOrderTermCoeff(implicit ring: Semiring[C]): C","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"nth","t":"def nth(n: Int)(implicit ring: Semiring[C]): C","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"reductum","t":"def reductum(implicit e: Eq[C], ring: Semiring[C], ct: ClassTag[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"termsIterator","t":"def termsIterator: Iterator[Term[C]]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"toDense","t":"def toDense(implicit ring: Semiring[C], eq: Eq[C]): PolyDense[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"toSparse","t":"def toSparse(implicit ring: Semiring[C], eq: Eq[C]): PolySparse[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse.html","n":"unary_-","t":"def unary_-(implicit ring: Rng[C]): Polynomial[C]","d":"spire/math/poly/PolySparse","k":"def"},
{"l":"spire/math/poly/PolySparse$TermIterator.html","n":"TermIterator","t":"class TermIterator extends Iterator[Term[C]]","d":"spire/math/poly/PolySparse$TermIterator","k":"class"},
{"l":"spire/math/poly/PolySparse$TermIterator.html","n":"hasNext","t":"def hasNext: Boolean","d":"spire/math/poly/PolySparse$TermIterator","k":"def"},
{"l":"spire/math/poly/PolySparse$.html","n":"PolySparse","t":"object PolySparse","d":"spire/math/poly/PolySparse$","k":"object"},
{"l":"spire/math/poly/PolySparse$.html","n":"apply","t":"def apply[@specialized(Double) C : ClassTag](data: IterableOnce[Term[C]]): PolySparse[C]","d":"spire/math/poly/PolySparse$","k":"def"},
{"l":"spire/math/poly/PolySparse$.html","n":"apply","t":"def apply[@specialized(Double) C : ClassTag](data: Map[Int, C]): PolySparse[C]","d":"spire/math/poly/PolySparse$","k":"def"},
{"l":"spire/math/poly/PolySparse$.html","n":"apply","t":"def apply[@specialized(Double) C : ClassTag](poly: Polynomial[C]): PolySparse[C]","d":"spire/math/poly/PolySparse$","k":"def"},
{"l":"spire/math/poly/PolySparse$.html","n":"zero","t":"def zero[@specialized(Double) C : ClassTag]: PolySparse[C]","d":"spire/math/poly/PolySparse$","k":"def"},
{"l":"spire/math/poly/RootFinder.html","n":"RootFinder","t":"trait RootFinder[A]","d":"spire/math/poly/RootFinder","k":"trait"},
{"l":"spire/math/poly/RootFinder.html","n":"findRoots","t":"def findRoots(poly: Polynomial[A]): Roots[A]","d":"spire/math/poly/RootFinder","k":"def"},
{"l":"spire/math/poly/RootFinder$.html","n":"RootFinder","t":"object RootFinder","d":"spire/math/poly/RootFinder$","k":"object"},
{"l":"spire/math/poly/RootFinder$.html","n":"BigDecimalMathContextRootFinder","t":"def BigDecimalMathContextRootFinder(mc: MathContext): RootFinder[BigDecimal]","d":"spire/math/poly/RootFinder$","k":"def"},
{"l":"spire/math/poly/RootFinder$.html","n":"BigDecimalScaleRootFinder","t":"def BigDecimalScaleRootFinder(scale: Int): RootFinder[BigDecimal]","d":"spire/math/poly/RootFinder$","k":"def"},
{"l":"spire/math/poly/RootFinder$.html","n":"NumberRootFinder","t":"val NumberRootFinder: RootFinder[Number]","d":"spire/math/poly/RootFinder$","k":"val"},
{"l":"spire/math/poly/RootFinder$.html","n":"RealRootFinder","t":"val RealRootFinder: RootFinder[Real]","d":"spire/math/poly/RootFinder$","k":"val"},
{"l":"spire/math/poly/RootFinder$.html","n":"apply","t":"def apply[A](implicit finder: RootFinder[A]): RootFinder[A]","d":"spire/math/poly/RootFinder$","k":"def"},
{"l":"spire/math/poly/RootIsolator.html","n":"RootIsolator","t":"trait RootIsolator[A]","d":"spire/math/poly/RootIsolator","k":"trait"},
{"l":"spire/math/poly/RootIsolator.html","n":"isolateRoots","t":"def isolateRoots(poly: Polynomial[A]): Vector[Interval[Rational]]","d":"spire/math/poly/RootIsolator","k":"def"},
{"l":"spire/math/poly/RootIsolator$.html","n":"RootIsolator","t":"object RootIsolator","d":"spire/math/poly/RootIsolator$","k":"object"},
{"l":"spire/math/poly/RootIsolator$.html","n":"BigDecimalRootIsolator","t":"val BigDecimalRootIsolator: RootIsolator[BigDecimal]","d":"spire/math/poly/RootIsolator$","k":"val"},
{"l":"spire/math/poly/RootIsolator$.html","n":"BigIntRootIsolator","t":"val BigIntRootIsolator: RootIsolator[BigInt]","d":"spire/math/poly/RootIsolator$","k":"val"},
{"l":"spire/math/poly/RootIsolator$.html","n":"RationalRootIsolator","t":"val RationalRootIsolator: RootIsolator[Rational]","d":"spire/math/poly/RootIsolator$","k":"val"},
{"l":"spire/math/poly/Roots.html","n":"Roots","t":"trait Roots[A] extends Iterable[A]","d":"spire/math/poly/Roots","k":"trait"},
{"l":"spire/math/poly/Roots.html","n":"count","t":"def count: Int","d":"spire/math/poly/Roots","k":"def"},
{"l":"spire/math/poly/Roots.html","n":"get","t":"def get(i: Int): A","d":"spire/math/poly/Roots","k":"def"},
{"l":"spire/math/poly/Roots.html","n":"iterator","t":"def iterator: Iterator[A]","d":"spire/math/poly/Roots","k":"def"},
{"l":"spire/math/poly/Roots.html","n":"poly","t":"def poly: Polynomial[A]","d":"spire/math/poly/Roots","k":"def"},
{"l":"spire/math/poly/Roots$.html","n":"Roots","t":"object Roots","d":"spire/math/poly/Roots$","k":"object"},
{"l":"spire/math/poly/Roots$.html","n":"isolateRoots","t":"def isolateRoots[A](poly: Polynomial[A])(implicit isolator: RootIsolator[A]): Vector[Interval[Rational]]","d":"spire/math/poly/Roots$","k":"def"},
{"l":"spire/math/poly/Roots$.html","n":"lowerBound","t":"def lowerBound(p: Polynomial[BigInt]): Int","d":"spire/math/poly/Roots$","k":"def"},
{"l":"spire/math/poly/Roots$.html","n":"removeDecimal","t":"def removeDecimal(poly: Polynomial[BigDecimal]): Polynomial[BigInt]","d":"spire/math/poly/Roots$","k":"def"},
{"l":"spire/math/poly/Roots$.html","n":"removeFractions","t":"def removeFractions(poly: Polynomial[Rational]): Polynomial[BigInt]","d":"spire/math/poly/Roots$","k":"def"},
{"l":"spire/math/poly/Roots$.html","n":"upperBound","t":"def upperBound(p: Polynomial[BigInt]): Int","d":"spire/math/poly/Roots$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"SpecialPolynomials","t":"object SpecialPolynomials","d":"spire/math/poly/SpecialPolynomials$","k":"object"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"chebyshevsFirstKind","t":"def chebyshevsFirstKind[C : ClassTag](num: Int): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"chebyshevsSecondKind","t":"def chebyshevsSecondKind[C : ClassTag](num: Int): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"hornerScheme","t":"def hornerScheme[C : ClassTag](zero: Polynomial[C], one: Polynomial[C], fn: (Polynomial[C], Polynomial[C], Int) => Polynomial[C]): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"laguerres","t":"def laguerres[C : ClassTag](num: Int)(implicit evidence$20: Eq[C], evidence$21: ClassTag[C], f: Field[C]): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"legendres","t":"def legendres[C : ClassTag](num: Int): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"physHermites","t":"def physHermites[C : ClassTag](num: Int): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/SpecialPolynomials$.html","n":"probHermites","t":"def probHermites[C : ClassTag](num: Int): LazyList[Polynomial[C]]","d":"spire/math/poly/SpecialPolynomials$","k":"def"},
{"l":"spire/math/poly/Term.html","n":"Term","t":"class Term[@specialized(Float, Double) C](coeff: C, exp: Int)","d":"spire/math/poly/Term","k":"class"},
{"l":"spire/math/poly/Term.html","n":"*","t":"def *(rhs: Term[C])(implicit r: Semiring[C]): Term[C]","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"+","t":"def +(rhs: Term[C])(implicit r: Semiring[C]): Term[C]","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"der","t":"def der(implicit r: Ring[C]): Term[C]","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"divideBy","t":"def divideBy(x: C)(implicit f: Field[C]): Term[C]","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"eval","t":"def eval(x: C)(implicit r: Semiring[C]): C","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"int","t":"def int(implicit f: Field[C]): Term[C]","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"isIndexZero","t":"def isIndexZero: Boolean","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"isZero","t":"def isZero(implicit ring: Semiring[C], eq: Eq[C]): Boolean","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"toTuple","t":"def toTuple: (Int, C)","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term.html","n":"unary_-","t":"def unary_-(implicit r: Rng[C]): Term[C]","d":"spire/math/poly/Term","k":"def"},
{"l":"spire/math/poly/Term$.html","n":"Term","t":"object Term","d":"spire/math/poly/Term$","k":"object"},
{"l":"spire/math/poly/Term$.html","n":"fromTuple","t":"def fromTuple[@specialized(Float, Double) C](tpl: (Int, C)): Term[C]","d":"spire/math/poly/Term$","k":"def"},
{"l":"spire/math/poly/Term$.html","n":"one","t":"def one[@specialized(Float, Double) C](implicit r: Rig[C]): Term[C]","d":"spire/math/poly/Term$","k":"def"},
{"l":"spire/math/poly/Term$.html","n":"ordering","t":"def ordering[C]: Order[Term[C]]","d":"spire/math/poly/Term$","k":"def"},
{"l":"spire/math/poly/Term$.html","n":"zero","t":"def zero[@specialized(Float, Double) C](implicit r: Semiring[C]): Term[C]","d":"spire/math/poly/Term$","k":"def"},
{"l":"spire/math/prime.html","n":"spire.math.prime","t":"package spire.math.prime","d":"spire/math/prime","k":"package"},
{"l":"spire/math/prime.html","n":"factor","t":"def factor(n: SafeLong): Factors","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"factorPollardRho","t":"def factorPollardRho(n0: SafeLong): Factors","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"factorTrialDivision","t":"def factorTrialDivision(n0: SafeLong): Factors","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"factorWheelDivision","t":"def factorWheelDivision(n0: SafeLong): Factors","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"fill","t":"def fill(n: Int): Array[SafeLong]","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"fill","t":"def fill(start: Int, limit: Int): Array[SafeLong]","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"isPrime","t":"def isPrime(n: SafeLong): Boolean","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"lazyList","t":"def lazyList: LazyList[SafeLong]","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"lazyList","t":"def lazyList(chunkSize: Int, cutoff: SafeLong): LazyList[SafeLong]","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"nth","t":"def nth(n: Long): SafeLong","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"sieverUpToNth","t":"def sieverUpToNth(n: Long): Siever","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"stream","t":"def stream: Stream[SafeLong]","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime.html","n":"stream","t":"def stream(chunkSize: Int, cutoff: SafeLong): Stream[SafeLong]","d":"spire/math/prime","k":"def"},
{"l":"spire/math/prime/BitSet$.html","n":"BitSet","t":"object BitSet","d":"spire/math/prime/BitSet$","k":"object"},
{"l":"spire/math/prime/BitSet$.html","n":"alloc","t":"def alloc(length: Int): BitSet","d":"spire/math/prime/BitSet$","k":"def"},
{"l":"spire/math/prime/BitSet.html","n":"BitSet","t":"class BitSet(length: Int, array: Array[Int])","d":"spire/math/prime/BitSet","k":"class"},
{"l":"spire/math/prime/BitSet.html","n":"+=","t":"def +=(n: Int): Unit","d":"spire/math/prime/BitSet","k":"def"},
{"l":"spire/math/prime/BitSet.html","n":"-=","t":"def -=(n: Int): Unit","d":"spire/math/prime/BitSet","k":"def"},
{"l":"spire/math/prime/BitSet.html","n":"apply","t":"def apply(n: Int): Boolean","d":"spire/math/prime/BitSet","k":"def"},
{"l":"spire/math/prime/BitSet.html","n":"clear","t":"def clear(): Unit","d":"spire/math/prime/BitSet","k":"def"},
{"l":"spire/math/prime/BitSet.html","n":"update","t":"def update(n: Int, b: Boolean): Unit","d":"spire/math/prime/BitSet","k":"def"},
{"l":"spire/math/prime/FactorHeap.html","n":"FactorHeap","t":"class FactorHeap","d":"spire/math/prime/FactorHeap","k":"class"},
{"l":"spire/math/prime/FactorHeap.html","n":"+=","t":"def +=(factor: Factor): Unit","d":"spire/math/prime/FactorHeap","k":"def"},
{"l":"spire/math/prime/FactorHeap.html","n":"dequeue","t":"def dequeue(): Factor","d":"spire/math/prime/FactorHeap","k":"def"},
{"l":"spire/math/prime/FactorHeap.html","n":"isEmpty","t":"def isEmpty: Boolean","d":"spire/math/prime/FactorHeap","k":"def"},
{"l":"spire/math/prime/FactorHeap.html","n":"nonEmpty","t":"def nonEmpty: Boolean","d":"spire/math/prime/FactorHeap","k":"def"},
{"l":"spire/math/prime/FactorHeap.html","n":"resizeIfNecessary","t":"def resizeIfNecessary(): Unit","d":"spire/math/prime/FactorHeap","k":"def"},
{"l":"spire/math/prime/FactorHeap.html","n":"size","t":"def size: Int","d":"spire/math/prime/FactorHeap","k":"def"},
{"l":"spire/math/prime/Factors$.html","n":"Factors","t":"object Factors","d":"spire/math/prime/Factors$","k":"object"},
{"l":"spire/math/prime/Factors$.html","n":"apply","t":"def apply(n: Long): Factors","d":"spire/math/prime/Factors$","k":"def"},
{"l":"spire/math/prime/Factors$.html","n":"apply","t":"def apply(n: BigInt): Factors","d":"spire/math/prime/Factors$","k":"def"},
{"l":"spire/math/prime/Factors$.html","n":"apply","t":"def apply(n: SafeLong): Factors","d":"spire/math/prime/Factors$","k":"def"},
{"l":"spire/math/prime/Factors$.html","n":"apply","t":"def apply(s: String): Factors","d":"spire/math/prime/Factors$","k":"def"},
{"l":"spire/math/prime/Factors$.html","n":"one","t":"val one: Factors","d":"spire/math/prime/Factors$","k":"val"},
{"l":"spire/math/prime/Factors$.html","n":"zero","t":"val zero: Factors","d":"spire/math/prime/Factors$","k":"val"},
{"l":"spire/math/prime/Factors.html","n":"Factors","t":"class Factors(elements: Map[SafeLong, Int], sign: Sign) extends Decomposition[SafeLong] with Iterable[(SafeLong, Int)] with Ordered[Factors]","d":"spire/math/prime/Factors","k":"class"},
{"l":"spire/math/prime/Factors.html","n":"%","t":"def %(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"%","t":"def %(rhs: SafeLong): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"*","t":"def *(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"*","t":"def *(rhs: SafeLong): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"+","t":"def +(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"+","t":"def +(rhs: SafeLong): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"-","t":"def -(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"-","t":"def -(rhs: SafeLong): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"/","t":"def /(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"/","t":"def /(rhs: SafeLong): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"/%","t":"def /%(rhs: Factors): (Factors, Factors)","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"/%","t":"def /%(rhs: SafeLong): (Factors, Factors)","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"compare","t":"def compare(rhs: Factors): Int","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"compare","t":"def compare(rhs: Int): Int","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"contains","t":"def contains(p: SafeLong): Boolean","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"gcd","t":"def gcd(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"get","t":"def get(p: SafeLong): Int","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"iterator","t":"def iterator: Iterator[(SafeLong, Int)]","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"lcm","t":"def lcm(rhs: Factors): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"pow","t":"def pow(rhs: Int): Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"signum","t":"def signum: Int","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"toMap","t":"def toMap: Map[SafeLong, Int]","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"unary_-","t":"def unary_-: Factors","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"uniqueFactors","t":"def uniqueFactors: Set[SafeLong]","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"unit","t":"def unit: SafeLong","d":"spire/math/prime/Factors","k":"def"},
{"l":"spire/math/prime/Factors.html","n":"value","t":"val value: SafeLong","d":"spire/math/prime/Factors","k":"val"},
{"l":"spire/math/prime/SieveSegment$.html","n":"SieveSegment","t":"object SieveSegment","d":"spire/math/prime/SieveSegment$","k":"object"},
{"l":"spire/math/prime/SieveSegment$.html","n":"wheel30","t":"val wheel30: Array[Int]","d":"spire/math/prime/SieveSegment$","k":"val"},
{"l":"spire/math/prime/SieveSegment.html","n":"SieveSegment","t":"class SieveSegment(start: SafeLong, primes: BitSet, cutoff: SafeLong)","d":"spire/math/prime/SieveSegment","k":"class"},
{"l":"spire/math/prime/SieveSegment.html","n":"init","t":"def init(fastq: FastFactors, slowq: FactorHeap): Unit","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"initFirst","t":"def initFirst(fastq: FastFactors, slowq: FactorHeap): Unit","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"initMod30","t":"def initMod30(): Unit","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"initRest","t":"def initRest(slowq: FactorHeap): Unit","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"isComposite","t":"def isComposite(n: SafeLong): Boolean","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"isPrime","t":"def isPrime(n: SafeLong): Boolean","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"nextAfter","t":"def nextAfter(n: SafeLong): SafeLong","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"set","t":"def set(n: SafeLong): Unit","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveSegment.html","n":"unset","t":"def unset(n: SafeLong): Unit","d":"spire/math/prime/SieveSegment","k":"def"},
{"l":"spire/math/prime/SieveUtil$.html","n":"SieveUtil","t":"object SieveUtil","d":"spire/math/prime/SieveUtil$","k":"object"},
{"l":"spire/math/prime/SieveUtil$$Factor.html","n":"Factor","t":"class Factor(p: SafeLong, var next: SafeLong) extends Ordered[Factor]","d":"spire/math/prime/SieveUtil$$Factor","k":"class"},
{"l":"spire/math/prime/SieveUtil$$Factor.html","n":"compare","t":"def compare(that: Factor): Int","d":"spire/math/prime/SieveUtil$$Factor","k":"def"},
{"l":"spire/math/prime/SieveUtil$$FastFactor.html","n":"FastFactor","t":"class FastFactor(p: Int, var m: SafeLong)","d":"spire/math/prime/SieveUtil$$FastFactor","k":"class"},
{"l":"spire/math/prime/SieveUtil$$FastFactors.html","n":"FastFactors","t":"class FastFactors(var arr: Array[FastFactor])","d":"spire/math/prime/SieveUtil$$FastFactors","k":"class"},
{"l":"spire/math/prime/SieveUtil$$FastFactors$.html","n":"FastFactors","t":"object FastFactors","d":"spire/math/prime/SieveUtil$$FastFactors$","k":"object"},
{"l":"spire/math/prime/SieveUtil$$FastFactors$.html","n":"empty","t":"def empty: FastFactors","d":"spire/math/prime/SieveUtil$$FastFactors$","k":"def"},
{"l":"spire/math/prime/Siever.html","n":"Siever","t":"class Siever(chunkSize: Int, cutoff: SafeLong)","d":"spire/math/prime/Siever","k":"class"},
{"l":"spire/math/prime/Siever.html","n":"arr","t":"val arr: BitSet","d":"spire/math/prime/Siever","k":"val"},
{"l":"spire/math/prime/Siever.html","n":"arrayAt","t":"def arrayAt(p: SafeLong, size: Int): Array[SafeLong]","d":"spire/math/prime/Siever","k":"def"},
{"l":"spire/math/prime/Siever.html","n":"fastq","t":"val fastq: FastFactors","d":"spire/math/prime/Siever","k":"val"},
{"l":"spire/math/prime/Siever.html","n":"largestBelow","t":"def largestBelow(n: SafeLong): SafeLong","d":"spire/math/prime/Siever","k":"def"},
{"l":"spire/math/prime/Siever.html","n":"lazyListAfter","t":"def lazyListAfter(p0: SafeLong): LazyList[SafeLong]","d":"spire/math/prime/Siever","k":"def"},
{"l":"spire/math/prime/Siever.html","n":"limit","t":"var limit: SafeLong","d":"spire/math/prime/Siever","k":"var"},
{"l":"spire/math/prime/Siever.html","n":"nextAfter","t":"def nextAfter(n: SafeLong): SafeLong","d":"spire/math/prime/Siever","k":"def"},
{"l":"spire/math/prime/Siever.html","n":"nth","t":"def nth(n: Long): SafeLong","d":"spire/math/prime/Siever","k":"def"},
{"l":"spire/math/prime/Siever.html","n":"sieve","t":"var sieve: SieveSegment","d":"spire/math/prime/Siever","k":"var"},
{"l":"spire/math/prime/Siever.html","n":"slowq","t":"val slowq: FactorHeap","d":"spire/math/prime/Siever","k":"val"},
{"l":"spire/math/prime/Siever.html","n":"start","t":"var start: SafeLong","d":"spire/math/prime/Siever","k":"var"},
{"l":"spire/math/prime/Siever.html","n":"streamAfter","t":"def streamAfter(p0: SafeLong): Stream[SafeLong]","d":"spire/math/prime/Siever","k":"def"},
{"l":"spire/optional.html","n":"spire.optional","t":"package spire.optional","d":"spire/optional","k":"package"},
{"l":"spire/optional/IterableGroupoid.html","n":"IterableGroupoid","t":"class IterableGroupoid[A, SA <: IterableOps[A, Iterable, SA]](implicit cbf: Factory[A, SA], A: Group[A]) extends Groupoid[SA]","d":"spire/optional/IterableGroupoid","k":"class"},
{"l":"spire/optional/IterableGroupoid.html","n":"inverse","t":"def inverse(a: SA): SA","d":"spire/optional/IterableGroupoid","k":"def"},
{"l":"spire/optional/IterableGroupoid.html","n":"partialOp","t":"def partialOp(x: SA, y: SA): Opt[SA]","d":"spire/optional/IterableGroupoid","k":"def"},
{"l":"spire/optional/IterableSemigroupoid.html","n":"IterableSemigroupoid","t":"class IterableSemigroupoid[A, SA <: IterableOps[A, Iterable, SA]](implicit cbf: Factory[A, SA], A: Semigroup[A]) extends Semigroupoid[SA]","d":"spire/optional/IterableSemigroupoid","k":"class"},
{"l":"spire/optional/IterableSemigroupoid.html","n":"partialOp","t":"def partialOp(x: SA, y: SA): Opt[SA]","d":"spire/optional/IterableSemigroupoid","k":"def"},
{"l":"spire/optional/PartialIterable0.html","n":"PartialIterable0","t":"trait PartialIterable0","d":"spire/optional/PartialIterable0","k":"trait"},
{"l":"spire/optional/PartialIterable0.html","n":"IterableSemigroupoid","t":"def IterableSemigroupoid[A : Semigroup, CC <: (IterableOps)](implicit evidence$1: Semigroup[A], cbf: Factory[A, CC[A]]): Semigroupoid[CC[A]]","d":"spire/optional/PartialIterable0","k":"def"},
{"l":"spire/optional/PartialIterable1.html","n":"PartialIterable1","t":"trait PartialIterable1 extends PartialIterable0","d":"spire/optional/PartialIterable1","k":"trait"},
{"l":"spire/optional/PartialIterable1.html","n":"IterableGroupoid","t":"def IterableGroupoid[A : Group, CC <: (IterableOps)](implicit evidence$2: Group[A], cbf: Factory[A, CC[A]]): Groupoid[CC[A]]","d":"spire/optional/PartialIterable1","k":"def"},
{"l":"spire/optional/Perm.html","n":"Perm","t":"class Perm extends Int => Int","d":"spire/optional/Perm","k":"class"},
{"l":"spire/optional/Perm.html","n":"andThen","t":"def andThen(that: Perm): Perm","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm.html","n":"apply","t":"def apply(n0: Int, n1: Int, ns: Int*): Perm","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm.html","n":"compose","t":"def compose(that: Perm): Perm","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm.html","n":"image","t":"def image: Set[Int]","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm.html","n":"inverse","t":"def inverse: Perm","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm.html","n":"invert","t":"def invert(k: Int): Int","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm.html","n":"permute","t":"def permute[A, SA](seq: SeqOps[A, Seq, SA])(implicit cbf: Factory[A, SA]): Opt[SA]","d":"spire/optional/Perm","k":"def"},
{"l":"spire/optional/Perm$.html","n":"Perm","t":"object Perm","d":"spire/optional/Perm$","k":"object"},
{"l":"spire/optional/Perm$.html","n":"PermEq","t":"val PermEq: Eq[Perm]","d":"spire/optional/Perm$","k":"val"},
{"l":"spire/optional/Perm$.html","n":"PermGroup","t":"val PermGroup: Group[Perm]","d":"spire/optional/Perm$","k":"val"},
{"l":"spire/optional/Perm$.html","n":"PermIntAction","t":"val PermIntAction: Action[Int, Perm]","d":"spire/optional/Perm$","k":"val"},
{"l":"spire/optional/Perm$.html","n":"PermSeqPartialAction","t":"def PermSeqPartialAction[A, CC <: (SeqOps)](implicit cbf: Factory[A, CC[A]]): PartialAction[CC[A], Perm]","d":"spire/optional/Perm$","k":"def"},
{"l":"spire/optional/Perm$.html","n":"apply","t":"def apply(mapping: Map[Int, Int]): Perm","d":"spire/optional/Perm$","k":"def"},
{"l":"spire/optional/Perm$.html","n":"apply","t":"def apply(pairs: (Int, Int)*): Perm","d":"spire/optional/Perm$","k":"def"},
{"l":"spire/optional/Perm$.html","n":"apply","t":"def apply(n0: Int, n1: Int, ns: Int*): Perm","d":"spire/optional/Perm$","k":"def"},
{"l":"spire/optional/PermGroup.html","n":"PermGroup","t":"class PermGroup extends Group[Perm]","d":"spire/optional/PermGroup","k":"class"},
{"l":"spire/optional/PermGroup.html","n":"combine","t":"def combine(x: Perm, y: Perm): Perm","d":"spire/optional/PermGroup","k":"def"},
{"l":"spire/optional/PermGroup.html","n":"empty","t":"def empty: Perm","d":"spire/optional/PermGroup","k":"def"},
{"l":"spire/optional/PermGroup.html","n":"inverse","t":"def inverse(a: Perm): Perm","d":"spire/optional/PermGroup","k":"def"},
{"l":"spire/optional/PermIntAction.html","n":"PermIntAction","t":"class PermIntAction extends Action[Int, Perm]","d":"spire/optional/PermIntAction","k":"class"},
{"l":"spire/optional/PermIntAction.html","n":"actl","t":"def actl(perm: Perm, k: Int): Int","d":"spire/optional/PermIntAction","k":"def"},
{"l":"spire/optional/PermIntAction.html","n":"actr","t":"def actr(k: Int, perm: Perm): Int","d":"spire/optional/PermIntAction","k":"def"},
{"l":"spire/optional/PermSeqPartialAction.html","n":"PermSeqPartialAction","t":"class PermSeqPartialAction[A, SA <: SeqOps[A, Seq, SA]](implicit cbf: Factory[A, SA]) extends PartialAction[SA, Perm]","d":"spire/optional/PermSeqPartialAction","k":"class"},
{"l":"spire/optional/PermSeqPartialAction.html","n":"partialActl","t":"def partialActl(perm: Perm, sa: SA): Opt[SA]","d":"spire/optional/PermSeqPartialAction","k":"def"},
{"l":"spire/optional/PermSeqPartialAction.html","n":"partialActr","t":"def partialActr(sa: SA, perm: Perm): Opt[SA]","d":"spire/optional/PermSeqPartialAction","k":"def"},
{"l":"spire/optional/VectorOrderLow.html","n":"VectorOrderLow","t":"trait VectorOrderLow","d":"spire/optional/VectorOrderLow","k":"trait"},
{"l":"spire/optional/VectorOrderLow.html","n":"arrayEq","t":"def arrayEq[@specialized(Int, Long, Float, Double) A](implicit ev: Eq[A], module: CModule[Array[A], A]): ArrayVectorEq[A]","d":"spire/optional/VectorOrderLow","k":"def"},
{"l":"spire/optional/VectorOrderLow.html","n":"mapEq","t":"def mapEq[K, V](implicit V0: Eq[V], module: CModule[Map[K, V], V]): MapVectorEq[K, V]","d":"spire/optional/VectorOrderLow","k":"def"},
{"l":"spire/optional/VectorOrderLow.html","n":"seqEq","t":"def seqEq[A, CC <: (SeqOps)](implicit A0: Eq[A], module: CModule[CC[A], A]): SeqVectorEq[A, CC[A]]","d":"spire/optional/VectorOrderLow","k":"def"},
{"l":"spire/optional/genericEq$.html","n":"genericEq","t":"object genericEq","d":"spire/optional/genericEq$","k":"object"},
{"l":"spire/optional/genericEq$.html","n":"generic","t":"def generic[@specialized A]: Eq[A]","d":"spire/optional/genericEq$","k":"def"},
{"l":"spire/optional/intervalGeometricPartialOrder$.html","n":"intervalGeometricPartialOrder","t":"object intervalGeometricPartialOrder","d":"spire/optional/intervalGeometricPartialOrder$","k":"object"},
{"l":"spire/optional/intervalGeometricPartialOrder$.html","n":"intervalGeometricPartialOrder","t":"def intervalGeometricPartialOrder[A : Order]: PartialOrder[Interval[A]]","d":"spire/optional/intervalGeometricPartialOrder$","k":"def"},
{"l":"spire/optional/intervalGeometricPartialOrder$$IntervalGeometricPartialOrder.html","n":"IntervalGeometricPartialOrder","t":"class IntervalGeometricPartialOrder[A] extends PartialOrder[Interval[A]]","d":"spire/optional/intervalGeometricPartialOrder$$IntervalGeometricPartialOrder","k":"class"},
{"l":"spire/optional/intervalGeometricPartialOrder$$IntervalGeometricPartialOrder.html","n":"partialCompare","t":"def partialCompare(i: Interval[A], j: Interval[A]): Double","d":"spire/optional/intervalGeometricPartialOrder$$IntervalGeometricPartialOrder","k":"def"},
{"l":"spire/optional/intervalSubsetPartialOrder$.html","n":"intervalSubsetPartialOrder","t":"object intervalSubsetPartialOrder","d":"spire/optional/intervalSubsetPartialOrder$","k":"object"},
{"l":"spire/optional/intervalSubsetPartialOrder$.html","n":"intervalSubsetPartialOrder","t":"def intervalSubsetPartialOrder[A : Order]: PartialOrder[Interval[A]]","d":"spire/optional/intervalSubsetPartialOrder$","k":"def"},
{"l":"spire/optional/intervalSubsetPartialOrder$$IntervalSubsetPartialOrder.html","n":"IntervalSubsetPartialOrder","t":"class IntervalSubsetPartialOrder[A] extends PartialOrder[Interval[A]]","d":"spire/optional/intervalSubsetPartialOrder$$IntervalSubsetPartialOrder","k":"class"},
{"l":"spire/optional/intervalSubsetPartialOrder$$IntervalSubsetPartialOrder.html","n":"partialCompare","t":"def partialCompare(x: Interval[A], y: Interval[A]): Double","d":"spire/optional/intervalSubsetPartialOrder$$IntervalSubsetPartialOrder","k":"def"},
{"l":"spire/optional/intervalValuePartialOrder$.html","n":"intervalValuePartialOrder","t":"object intervalValuePartialOrder","d":"spire/optional/intervalValuePartialOrder$","k":"object"},
{"l":"spire/optional/intervalValuePartialOrder$.html","n":"intervalValuePartialOrder","t":"def intervalValuePartialOrder[A : Order]: PartialOrder[Interval[A]]","d":"spire/optional/intervalValuePartialOrder$","k":"def"},
{"l":"spire/optional/intervalValuePartialOrder$$IntervalValuePartialOrder.html","n":"IntervalValuePartialOrder","t":"class IntervalValuePartialOrder[A] extends PartialOrder[Interval[A]]","d":"spire/optional/intervalValuePartialOrder$$IntervalValuePartialOrder","k":"class"},
{"l":"spire/optional/intervalValuePartialOrder$$IntervalValuePartialOrder.html","n":"partialCompare","t":"def partialCompare(x: Interval[A], y: Interval[A]): Double","d":"spire/optional/intervalValuePartialOrder$$IntervalValuePartialOrder","k":"def"},
{"l":"spire/optional/partialIterable$.html","n":"partialIterable","t":"object partialIterable extends PartialIterable1","d":"spire/optional/partialIterable$","k":"object"},
{"l":"spire/optional/powerSetPartialOrder$.html","n":"powerSetPartialOrder","t":"object powerSetPartialOrder","d":"spire/optional/powerSetPartialOrder$","k":"object"},
{"l":"spire/optional/powerSetPartialOrder$.html","n":"powerSetPartialOrder","t":"def powerSetPartialOrder[A]: PartialOrder[Set[A]]","d":"spire/optional/powerSetPartialOrder$","k":"def"},
{"l":"spire/optional/powerSetPartialOrder$$PowerSetPartialOrder.html","n":"PowerSetPartialOrder","t":"class PowerSetPartialOrder[A] extends PartialOrder[Set[A]]","d":"spire/optional/powerSetPartialOrder$$PowerSetPartialOrder","k":"class"},
{"l":"spire/optional/powerSetPartialOrder$$PowerSetPartialOrder.html","n":"partialCompare","t":"def partialCompare(x: Set[A], y: Set[A]): Double","d":"spire/optional/powerSetPartialOrder$$PowerSetPartialOrder","k":"def"},
{"l":"spire/optional/rationalTrig$.html","n":"rationalTrig","t":"object rationalTrig","d":"spire/optional/rationalTrig$","k":"object"},
{"l":"spire/optional/rationalTrig$.html","n":"trigRational","t":"val trigRational: Trig[Rational]","d":"spire/optional/rationalTrig$","k":"val"},
{"l":"spire/optional/totalfloat$.html","n":"totalfloat","t":"object totalfloat","d":"spire/optional/totalfloat$","k":"object"},
{"l":"spire/optional/totalfloat$.html","n":"TotalDoubleOrder","t":"val TotalDoubleOrder: Order[Double]","d":"spire/optional/totalfloat$","k":"val"},
{"l":"spire/optional/totalfloat$.html","n":"TotalFloatOrder","t":"val TotalFloatOrder: Order[Float]","d":"spire/optional/totalfloat$","k":"val"},
{"l":"spire/optional/totalfloat$$TotalDoubleOrder.html","n":"TotalDoubleOrder","t":"trait TotalDoubleOrder extends Order[Double]","d":"spire/optional/totalfloat$$TotalDoubleOrder","k":"trait"},
{"l":"spire/optional/totalfloat$$TotalDoubleOrder.html","n":"compare","t":"def compare(x: Double, y: Double): Int","d":"spire/optional/totalfloat$$TotalDoubleOrder","k":"def"},
{"l":"spire/optional/totalfloat$$TotalFloatOrder.html","n":"TotalFloatOrder","t":"trait TotalFloatOrder extends Order[Float]","d":"spire/optional/totalfloat$$TotalFloatOrder","k":"trait"},
{"l":"spire/optional/totalfloat$$TotalFloatOrder.html","n":"compare","t":"def compare(x: Float, y: Float): Int","d":"spire/optional/totalfloat$$TotalFloatOrder","k":"def"},
{"l":"spire/optional/vectorOrder$.html","n":"vectorOrder","t":"object vectorOrder extends VectorOrderLow","d":"spire/optional/vectorOrder$","k":"object"},
{"l":"spire/optional/vectorOrder$.html","n":"arrayOrder","t":"def arrayOrder[@specialized(Int, Long, Float, Double) A](implicit ev: Order[A], module: CModule[Array[A], A]): ArrayVectorOrder[A]","d":"spire/optional/vectorOrder$","k":"def"},
{"l":"spire/optional/vectorOrder$.html","n":"seqOrder","t":"def seqOrder[A, CC <: (SeqOps)](implicit A0: Order[A], module: CModule[CC[A], A]): SeqVectorOrder[A, CC[A]]","d":"spire/optional/vectorOrder$","k":"def"},
{"l":"spire/optional/unicode.html","n":"spire.optional.unicode","t":"package spire.optional.unicode","d":"spire/optional/unicode","k":"package"},
{"l":"spire/optional/unicode.html","n":"\\","t":"def \\(rhs: Set[A]): Set[A]","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"¬","t":"def ¬[A](a: A)(using ev: Heyting[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"Π","t":"def Π[A](as: Iterable[A])(using ev: MultiplicativeMonoid[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"Σ","t":"def Σ[A](as: Iterable[A])(using ev: AdditiveMonoid[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"π","t":"val π: Real","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"φ","t":"val φ: Real","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ℂ","t":"type ℂ = Complex[Real]","d":"spire/optional/unicode","k":"type"},
{"l":"spire/optional/unicode.html","n":"ℍ","t":"type ℍ = Quaternion[Real]","d":"spire/optional/unicode","k":"type"},
{"l":"spire/optional/unicode.html","n":"ℕ","t":"type ℕ = Natural","d":"spire/optional/unicode","k":"type"},
{"l":"spire/optional/unicode.html","n":"ℕ","t":"val ℕ: Natural","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ℚ","t":"type ℚ = Rational","d":"spire/optional/unicode","k":"type"},
{"l":"spire/optional/unicode.html","n":"ℚ","t":"val ℚ: Rational","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ℝ","t":"type ℝ = Real","d":"spire/optional/unicode","k":"type"},
{"l":"spire/optional/unicode.html","n":"ℝ","t":"val ℝ: Real","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ℤ","t":"type ℤ = SafeLong","d":"spire/optional/unicode","k":"type"},
{"l":"spire/optional/unicode.html","n":"ℤ","t":"val ℤ: SafeLong","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ⅇ","t":"val ⅇ: Real","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ⅈ","t":"val ⅈ: Complex[Real]","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"ⅉ","t":"val ⅉ: Quaternion[Real]","d":"spire/optional/unicode","k":"val"},
{"l":"spire/optional/unicode.html","n":"∈:","t":"def ∈:[A]: Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∉:","t":"def ∉:[A]: Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∋","t":"def ∋(a: A): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∌","t":"def ∌(a: A): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∙","t":"def ∙(using ev: MultiplicativeSemigroup[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"√","t":"def √[A](a: A)(using ev: NRoot[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∛","t":"def ∛[A](a: A)(using ev: NRoot[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∜","t":"def ∜[A](a: A)(using ev: NRoot[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∧","t":"def ∧(using ev: MeetSemilattice[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∨","t":"def ∨(using ev: JoinSemilattice[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∩","t":"def ∩(rhs: Set[A]): Set[A]","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"∪","t":"def ∪(rhs: Set[A]): Set[A]","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"≠","t":"def ≠(using ev: Eq[A])(rhs: A): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"≡","t":"def ≡(using ev: Eq[A])(rhs: A): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"≤","t":"def ≤(using ev: PartialOrder[A])(rhs: A): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"≥","t":"def ≥(using ev: PartialOrder[A])(rhs: A): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊂","t":"def ⊂(rhs: Set[A]): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊃","t":"def ⊃(using ev: Heyting[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊃","t":"def ⊃(rhs: Set[A]): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊆","t":"def ⊆(rhs: Set[A]): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊇","t":"def ⊇(rhs: Set[A]): Boolean","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊤","t":"def ⊤[A](using ev: Heyting[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊥","t":"def ⊥[A](using ev: Heyting[A]): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊻","t":"def ⊻(using ev: Bool[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊼","t":"def ⊼(using ev: Bool[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/optional/unicode.html","n":"⊽","t":"def ⊽(using ev: Bool[A])(rhs: A): A","d":"spire/optional/unicode","k":"def"},
{"l":"spire/random.html","n":"spire.random","t":"package spire.random","d":"spire/random","k":"package"},
{"l":"spire/random/Const.html","n":"Const","t":"class Const[+A](a: A) extends Op[A]","d":"spire/random/Const","k":"class"},
{"l":"spire/random/Dist.html","n":"Dist","t":"trait Dist[@specialized A]","d":"spire/random/Dist","k":"trait"},
{"l":"spire/random/Dist.html","n":"apply","t":"def apply(gen: Generator): A","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"count","t":"def count(pred: A => Boolean, n: Int)(implicit gen: Generator): Int","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"ev","t":"def ev(n: Int)(implicit gen: Generator, alg: Field[A]): A","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"fill","t":"def fill(gen: Generator, arr: Array[A]): Unit","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"filter","t":"def filter(pred: A => Boolean): Dist[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"flatMap","t":"def flatMap[B](f: A => Dist[B]): Dist[B]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"foldn","t":"def foldn[B](init: B, n: Int)(f: (B, A) => B): Dist[B]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"given","t":"def given(pred: A => Boolean): Dist[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"histogram","t":"def histogram(n: Int)(implicit gen: Generator): Map[A, Double]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"iterate","t":"def iterate(n: Int, f: A => Dist[A]): Dist[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"iterateUntil","t":"def iterateUntil(pred: A => Boolean, f: A => Dist[A]): Dist[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"map","t":"def map[B](f: A => B): Dist[B]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"pack","t":"def pack(n: Int)(implicit ct: ClassTag[A]): Dist[Array[A]]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"pr","t":"def pr(pred: A => Boolean, n: Int)(implicit gen: Generator): Double","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"rawHistogram","t":"def rawHistogram(n: Int)(implicit gen: Generator): Map[A, Int]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"repeat","t":"def repeat[CC <: (Seq)](n: Int)(implicit cbf: Factory[A, CC[A]]): Dist[CC[A]]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"sample","t":"def sample[CC <: (Iterable)](n: Int)(implicit gen: Generator, cbf: Factory[A, CC[A]]): CC[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"sum","t":"def sum(n: Int)(implicit gen: Generator, alg: Rig[A]): A","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"toIterator","t":"def toIterator(gen: Generator): Iterator[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"toLazyList","t":"def toLazyList(gen: Generator): LazyList[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"toStream","t":"def toStream(gen: Generator): Stream[A]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"unfold","t":"def unfold[B](init: B)(f: (B, A) => B)(pred: B => Boolean): Dist[B]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"until","t":"def until(pred: A => Boolean): Dist[Seq[A]]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"zip","t":"def zip[B](that: Dist[B]): Dist[(A, B)]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist.html","n":"zipWith","t":"def zipWith[B, C](that: Dist[B])(f: (A, B) => C): Dist[C]","d":"spire/random/Dist","k":"def"},
{"l":"spire/random/Dist$.html","n":"Dist","t":"object Dist extends DistInstances9","d":"spire/random/Dist$","k":"object"},
{"l":"spire/random/Dist$.html","n":"always","t":"def always[A](a: A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"apply","t":"def apply[A](implicit na: Dist[A]): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"apply","t":"def apply[A, B](f: A => B)(implicit na: Dist[A]): Dist[B]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"apply","t":"def apply[A, B, C](f: (A, B) => C)(implicit na: Dist[A], nb: Dist[B]): Dist[C]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"array","t":"def array[A : ClassTag](minSize: Int, maxSize: Int): Dist[Array[A]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"bigdecimal","t":"def bigdecimal(maxBytes: Int, maxScale: Int): Dist[BigDecimal]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"bigint","t":"def bigint(maxBytes: Int): Dist[BigInt]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"bigrational","t":"def bigrational(maxBytes: Int): Dist[Rational]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"boolean","t":"val boolean: Dist[Boolean]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"byte","t":"val byte: Dist[Byte]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"char","t":"val char: Dist[Char]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"complex","t":"def complex[A : Dist]: Dist[Complex[A]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"constant","t":"def constant[A](a: A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"cycleOf","t":"def cycleOf[A : ClassTag](as: A*): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"double","t":"val double: Dist[Double]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"either","t":"def either[A, B](implicit no: Dist[Boolean], na: Dist[A], nb: Dist[B]): Dist[Either[A, B]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"float","t":"val float: Dist[Float]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"fromBytes","t":"def fromBytes[A](n: Int)(f: Array[Byte] => A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"fromInts","t":"def fromInts[A](n: Int)(f: Array[Int] => A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"fromLongs","t":"def fromLongs[A](n: Int)(f: Array[Long] => A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"gaussian","t":"def gaussian[A : Gaussian](mean: A, stdDev: A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"gaussianFromDouble","t":"def gaussianFromDouble[A : Field]: DistFromGen[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"gen","t":"def gen[A](f: Generator => A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"int","t":"val int: Dist[Int]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"interval","t":"def interval[A : Order]: Dist[Interval[A]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"intrange","t":"def intrange(from: Int, to: Int): Dist[Int]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"list","t":"def list[A : Dist](minSize: Int, maxSize: Int): Dist[List[A]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"long","t":"val long: Dist[Long]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"longrational","t":"def longrational: Dist[Rational]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"map","t":"def map[A : Dist, B : Dist](minInputs: Int, maxInputs: Int): Dist[Map[A, B]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"mix","t":"def mix[A](ds: Dist[A]*): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"natural","t":"def natural(maxDigits: Int): Dist[Natural]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"oneOf","t":"def oneOf[A : ClassTag](as: A*): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"option","t":"def option[A](implicit no: Dist[Boolean], na: Dist[A]): Dist[Option[A]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"rational","t":"def rational(implicit next: Dist[BigInt]): Dist[Rational]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"reduce","t":"def reduce[A](ns: Dist[A]*)(f: (A, A) => A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"safelong","t":"def safelong(maxBytes: Int): Dist[SafeLong]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"set","t":"def set[A : Dist](minInputs: Int, maxInputs: Int): Dist[Set[A]]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"short","t":"val short: Dist[Short]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"tuple2","t":"def tuple2[A : Dist, B : Dist]: Dist[(A, B)]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"ubyte","t":"val ubyte: Dist[UByte]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"uint","t":"val uint: Dist[UInt]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"ulong","t":"val ulong: Dist[ULong]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"uniform","t":"def uniform[A : Uniform](low: A, high: A): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/Dist$.html","n":"unit","t":"val unit: Dist[Unit]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"ushort","t":"val ushort: Dist[UShort]","d":"spire/random/Dist$","k":"val"},
{"l":"spire/random/Dist$.html","n":"weightedMix","t":"def weightedMix[A](tpls: (Double, Dist[A])*): Dist[A]","d":"spire/random/Dist$","k":"def"},
{"l":"spire/random/DistCModule.html","n":"DistCModule","t":"trait DistCModule[V, K] extends CModule[Dist[V], Dist[K]]","d":"spire/random/DistCModule","k":"trait"},
{"l":"spire/random/DistCModule.html","n":"alg","t":"def alg: CModule[V, K]","d":"spire/random/DistCModule","k":"def"},
{"l":"spire/random/DistCModule.html","n":"negate","t":"def negate(x: Dist[V]): Dist[V]","d":"spire/random/DistCModule","k":"def"},
{"l":"spire/random/DistCModule.html","n":"plus","t":"def plus(x: Dist[V], y: Dist[V]): Dist[V]","d":"spire/random/DistCModule","k":"def"},
{"l":"spire/random/DistCModule.html","n":"scalar","t":"def scalar: CommutativeRing[Dist[K]]","d":"spire/random/DistCModule","k":"def"},
{"l":"spire/random/DistCModule.html","n":"timesl","t":"def timesl(k: Dist[K], v: Dist[V]): Dist[V]","d":"spire/random/DistCModule","k":"def"},
{"l":"spire/random/DistCModule.html","n":"zero","t":"def zero: Dist[V]","d":"spire/random/DistCModule","k":"def"},
{"l":"spire/random/DistCRig.html","n":"DistCRig","t":"trait DistCRig[A] extends DistCSemiring[A] with CommutativeRig[Dist[A]]","d":"spire/random/DistCRig","k":"trait"},
{"l":"spire/random/DistCRig.html","n":"alg","t":"def alg: CommutativeRig[A]","d":"spire/random/DistCRig","k":"def"},
{"l":"spire/random/DistCRig.html","n":"one","t":"def one: Dist[A]","d":"spire/random/DistCRig","k":"def"},
{"l":"spire/random/DistCRing.html","n":"DistCRing","t":"trait DistCRing[A] extends DistCRng[A] with CommutativeRing[Dist[A]]","d":"spire/random/DistCRing","k":"trait"},
{"l":"spire/random/DistCRing.html","n":"alg","t":"def alg: CommutativeRing[A]","d":"spire/random/DistCRing","k":"def"},
{"l":"spire/random/DistCRing.html","n":"one","t":"def one: Dist[A]","d":"spire/random/DistCRing","k":"def"},
{"l":"spire/random/DistCRng.html","n":"DistCRng","t":"trait DistCRng[A] extends DistCSemiring[A] with CommutativeRng[Dist[A]]","d":"spire/random/DistCRng","k":"trait"},
{"l":"spire/random/DistCRng.html","n":"alg","t":"def alg: CommutativeRng[A]","d":"spire/random/DistCRng","k":"def"},
{"l":"spire/random/DistCRng.html","n":"negate","t":"def negate(x: Dist[A]): Dist[A]","d":"spire/random/DistCRng","k":"def"},
{"l":"spire/random/DistCSemiring.html","n":"DistCSemiring","t":"trait DistCSemiring[A] extends CommutativeSemiring[Dist[A]]","d":"spire/random/DistCSemiring","k":"trait"},
{"l":"spire/random/DistCSemiring.html","n":"alg","t":"def alg: CommutativeSemiring[A]","d":"spire/random/DistCSemiring","k":"def"},
{"l":"spire/random/DistCSemiring.html","n":"plus","t":"def plus(x: Dist[A], y: Dist[A]): Dist[A]","d":"spire/random/DistCSemiring","k":"def"},
{"l":"spire/random/DistCSemiring.html","n":"times","t":"def times(x: Dist[A], y: Dist[A]): Dist[A]","d":"spire/random/DistCSemiring","k":"def"},
{"l":"spire/random/DistCSemiring.html","n":"zero","t":"def zero: Dist[A]","d":"spire/random/DistCSemiring","k":"def"},
{"l":"spire/random/DistEuclideanRing.html","n":"DistEuclideanRing","t":"trait DistEuclideanRing[A] extends DistGCDRing[A] with EuclideanRing[Dist[A]]","d":"spire/random/DistEuclideanRing","k":"trait"},
{"l":"spire/random/DistEuclideanRing.html","n":"alg","t":"def alg: EuclideanRing[A]","d":"spire/random/DistEuclideanRing","k":"def"},
{"l":"spire/random/DistEuclideanRing.html","n":"emod","t":"def emod(x: Dist[A], y: Dist[A]): Dist[A]","d":"spire/random/DistEuclideanRing","k":"def"},
{"l":"spire/random/DistEuclideanRing.html","n":"equot","t":"def equot(x: Dist[A], y: Dist[A]): Dist[A]","d":"spire/random/DistEuclideanRing","k":"def"},
{"l":"spire/random/DistField.html","n":"DistField","t":"trait DistField[A] extends DistEuclideanRing[A] with Field[Dist[A]]","d":"spire/random/DistField","k":"trait"},
{"l":"spire/random/DistField.html","n":"alg","t":"def alg: Field[A]","d":"spire/random/DistField","k":"def"},
{"l":"spire/random/DistField.html","n":"div","t":"def div(x: Dist[A], y: Dist[A]): Dist[A]","d":"spire/random/DistField","k":"def"},
{"l":"spire/random/DistFromGen.html","n":"DistFromGen","t":"class DistFromGen[@specialized A](f: Generator => A) extends Dist[A]","d":"spire/random/DistFromGen","k":"class"},
{"l":"spire/random/DistFromGen.html","n":"apply","t":"def apply(gen: Generator): A","d":"spire/random/DistFromGen","k":"def"},
{"l":"spire/random/DistGCDRing.html","n":"DistGCDRing","t":"trait DistGCDRing[A] extends DistCRing[A] with GCDRing[Dist[A]]","d":"spire/random/DistGCDRing","k":"trait"},
{"l":"spire/random/DistGCDRing.html","n":"alg","t":"def alg: GCDRing[A]","d":"spire/random/DistGCDRing","k":"def"},
{"l":"spire/random/DistGCDRing.html","n":"eqA","t":"def eqA: Eq[A]","d":"spire/random/DistGCDRing","k":"def"},
{"l":"spire/random/DistGCDRing.html","n":"gcd","t":"def gcd(x: Dist[A], y: Dist[A])(implicit ev: Eq[Dist[A]]): Dist[A]","d":"spire/random/DistGCDRing","k":"def"},
{"l":"spire/random/DistGCDRing.html","n":"lcm","t":"def lcm(x: Dist[A], y: Dist[A])(implicit ev: Eq[Dist[A]]): Dist[A]","d":"spire/random/DistGCDRing","k":"def"},
{"l":"spire/random/DistInnerProductSpace.html","n":"DistInnerProductSpace","t":"trait DistInnerProductSpace[V, K] extends DistVectorSpace[V, K] with InnerProductSpace[Dist[V], Dist[K]]","d":"spire/random/DistInnerProductSpace","k":"trait"},
{"l":"spire/random/DistInnerProductSpace.html","n":"alg","t":"def alg: InnerProductSpace[V, K]","d":"spire/random/DistInnerProductSpace","k":"def"},
{"l":"spire/random/DistInnerProductSpace.html","n":"dot","t":"def dot(v: Dist[V], w: Dist[V]): Dist[K]","d":"spire/random/DistInnerProductSpace","k":"def"},
{"l":"spire/random/DistInstances0.html","n":"DistInstances0","t":"trait DistInstances0","d":"spire/random/DistInstances0","k":"trait"},
{"l":"spire/random/DistInstances0.html","n":"cSemiring","t":"def cSemiring[A](implicit ev: CommutativeSemiring[A]): CommutativeSemiring[Dist[A]]","d":"spire/random/DistInstances0","k":"def"},
{"l":"spire/random/DistInstances1.html","n":"DistInstances1","t":"trait DistInstances1 extends DistInstances0","d":"spire/random/DistInstances1","k":"trait"},
{"l":"spire/random/DistInstances1.html","n":"rig","t":"def rig[A](implicit ev: CommutativeRig[A]): CommutativeRig[Dist[A]]","d":"spire/random/DistInstances1","k":"def"},
{"l":"spire/random/DistInstances1.html","n":"rng","t":"def rng[A](implicit ev: CommutativeRng[A]): CommutativeRng[Dist[A]]","d":"spire/random/DistInstances1","k":"def"},
{"l":"spire/random/DistInstances2.html","n":"DistInstances2","t":"trait DistInstances2 extends DistInstances1","d":"spire/random/DistInstances2","k":"trait"},
{"l":"spire/random/DistInstances2.html","n":"cRing","t":"def cRing[A](implicit ev: CommutativeRing[A]): CommutativeRing[Dist[A]]","d":"spire/random/DistInstances2","k":"def"},
{"l":"spire/random/DistInstances3.html","n":"DistInstances3","t":"trait DistInstances3 extends DistInstances2","d":"spire/random/DistInstances3","k":"trait"},
{"l":"spire/random/DistInstances3.html","n":"gcdRing","t":"def gcdRing[A](implicit ev1: Eq[A], ev2: GCDRing[A]): GCDRing[Dist[A]]","d":"spire/random/DistInstances3","k":"def"},
{"l":"spire/random/DistInstances4.html","n":"DistInstances4","t":"trait DistInstances4 extends DistInstances3","d":"spire/random/DistInstances4","k":"trait"},
{"l":"spire/random/DistInstances4.html","n":"euclideanRing","t":"def euclideanRing[A](implicit ev1: Eq[A], ev2: EuclideanRing[A]): EuclideanRing[Dist[A]]","d":"spire/random/DistInstances4","k":"def"},
{"l":"spire/random/DistInstances5.html","n":"DistInstances5","t":"trait DistInstances5 extends DistInstances4","d":"spire/random/DistInstances5","k":"trait"},
{"l":"spire/random/DistInstances5.html","n":"field","t":"def field[A](implicit ev1: Eq[A], ev2: Field[A]): Field[Dist[A]]","d":"spire/random/DistInstances5","k":"def"},
{"l":"spire/random/DistInstances6.html","n":"DistInstances6","t":"trait DistInstances6 extends DistInstances5","d":"spire/random/DistInstances6","k":"trait"},
{"l":"spire/random/DistInstances6.html","n":"module","t":"def module[V, K](implicit ev2: CModule[V, K]): CModule[Dist[V], Dist[K]]","d":"spire/random/DistInstances6","k":"def"},
{"l":"spire/random/DistInstances7.html","n":"DistInstances7","t":"trait DistInstances7 extends DistInstances6","d":"spire/random/DistInstances7","k":"trait"},
{"l":"spire/random/DistInstances7.html","n":"vectorSpace","t":"def vectorSpace[V, K](implicit ev1: Eq[K], ev2: VectorSpace[V, K]): VectorSpace[Dist[V], Dist[K]]","d":"spire/random/DistInstances7","k":"def"},
{"l":"spire/random/DistInstances8.html","n":"DistInstances8","t":"trait DistInstances8 extends DistInstances7","d":"spire/random/DistInstances8","k":"trait"},
{"l":"spire/random/DistInstances8.html","n":"NormedVectorSpace","t":"def NormedVectorSpace[V, K](implicit ev1: Eq[K], ev2: NormedVectorSpace[V, K]): NormedVectorSpace[Dist[V], Dist[K]]","d":"spire/random/DistInstances8","k":"def"},
{"l":"spire/random/DistInstances9.html","n":"DistInstances9","t":"trait DistInstances9 extends DistInstances8","d":"spire/random/DistInstances9","k":"trait"},
{"l":"spire/random/DistInstances9.html","n":"InnerProductSpace","t":"def InnerProductSpace[V, K](implicit ev1: Eq[K], ev2: InnerProductSpace[V, K]): InnerProductSpace[Dist[V], Dist[K]]","d":"spire/random/DistInstances9","k":"def"},
{"l":"spire/random/DistIterator.html","n":"DistIterator","t":"class DistIterator[A](_next: Dist[A], gen: Generator) extends Iterator[A]","d":"spire/random/DistIterator","k":"class"},
{"l":"spire/random/DistIterator.html","n":"hasNext","t":"def hasNext: Boolean","d":"spire/random/DistIterator","k":"def"},
{"l":"spire/random/DistIterator.html","n":"next","t":"def next(): A","d":"spire/random/DistIterator","k":"def"},
{"l":"spire/random/DistNormedVectorSpace.html","n":"DistNormedVectorSpace","t":"trait DistNormedVectorSpace[V, K] extends DistVectorSpace[V, K] with NormedVectorSpace[Dist[V], Dist[K]]","d":"spire/random/DistNormedVectorSpace","k":"trait"},
{"l":"spire/random/DistNormedVectorSpace.html","n":"alg","t":"def alg: NormedVectorSpace[V, K]","d":"spire/random/DistNormedVectorSpace","k":"def"},
{"l":"spire/random/DistNormedVectorSpace.html","n":"norm","t":"def norm(v: Dist[V]): Dist[K]","d":"spire/random/DistNormedVectorSpace","k":"def"},
{"l":"spire/random/DistVectorSpace.html","n":"DistVectorSpace","t":"trait DistVectorSpace[V, K] extends DistCModule[V, K] with VectorSpace[Dist[V], Dist[K]]","d":"spire/random/DistVectorSpace","k":"trait"},
{"l":"spire/random/DistVectorSpace.html","n":"alg","t":"def alg: VectorSpace[V, K]","d":"spire/random/DistVectorSpace","k":"def"},
{"l":"spire/random/DistVectorSpace.html","n":"eqK","t":"def eqK: Eq[K]","d":"spire/random/DistVectorSpace","k":"def"},
{"l":"spire/random/Exponential.html","n":"Exponential","t":"trait Exponential[@specialized(Float, Double) A]","d":"spire/random/Exponential","k":"trait"},
{"l":"spire/random/Exponential.html","n":"apply","t":"def apply(rate: A): Dist[A]","d":"spire/random/Exponential","k":"def"},
{"l":"spire/random/Exponential$.html","n":"Exponential","t":"object Exponential extends ExponentialInstances","d":"spire/random/Exponential$","k":"object"},
{"l":"spire/random/Exponential$.html","n":"apply","t":"def apply[@specialized(Float, Double) A](implicit e: Exponential[A]): Exponential[A]","d":"spire/random/Exponential$","k":"def"},
{"l":"spire/random/Exponential$.html","n":"apply","t":"def apply[@specialized(Float, Double) A](rate: A)(implicit e: Exponential[A]): Dist[A]","d":"spire/random/Exponential$","k":"def"},
{"l":"spire/random/ExponentialInstances.html","n":"ExponentialInstances","t":"trait ExponentialInstances","d":"spire/random/ExponentialInstances","k":"trait"},
{"l":"spire/random/ExponentialInstances.html","n":"double","t":"val double: Exponential[Double]","d":"spire/random/ExponentialInstances","k":"val"},
{"l":"spire/random/ExponentialInstances.html","n":"float","t":"val float: Exponential[Float]","d":"spire/random/ExponentialInstances","k":"val"},
{"l":"spire/random/FlatMap.html","n":"FlatMap","t":"class FlatMap[A, +B](sub: Op[A], k: A => Op[B]) extends Op[B]","d":"spire/random/FlatMap","k":"class"},
{"l":"spire/random/Gaussian.html","n":"Gaussian","t":"trait Gaussian[@specialized(Float, Double) A]","d":"spire/random/Gaussian","k":"trait"},
{"l":"spire/random/Gaussian.html","n":"apply","t":"def apply(mean: A, stdDev: A): Dist[A]","d":"spire/random/Gaussian","k":"def"},
{"l":"spire/random/Gaussian$.html","n":"Gaussian","t":"object Gaussian extends GaussianInstances","d":"spire/random/Gaussian$","k":"object"},
{"l":"spire/random/Gaussian$.html","n":"apply","t":"def apply[@specialized(Float, Double) A](implicit g: Gaussian[A]): Gaussian[A]","d":"spire/random/Gaussian$","k":"def"},
{"l":"spire/random/Gaussian$.html","n":"apply","t":"def apply[@specialized A](mean: A, stdDev: A)(implicit g: Gaussian[A]): Dist[A]","d":"spire/random/Gaussian$","k":"def"},
{"l":"spire/random/GaussianInstances.html","n":"GaussianInstances","t":"trait GaussianInstances","d":"spire/random/GaussianInstances","k":"trait"},
{"l":"spire/random/GaussianInstances.html","n":"bigDecimal","t":"def bigDecimal(implicit mc: MathContext): Gaussian[BigDecimal]","d":"spire/random/GaussianInstances","k":"def"},
{"l":"spire/random/GaussianInstances.html","n":"double","t":"val double: Gaussian[Double]","d":"spire/random/GaussianInstances","k":"val"},
{"l":"spire/random/GaussianInstances.html","n":"float","t":"val float: Gaussian[Float]","d":"spire/random/GaussianInstances","k":"val"},
{"l":"spire/random/Generator.html","n":"Generator","t":"class Generator","d":"spire/random/Generator","k":"class"},
{"l":"spire/random/Generator.html","n":"chooseFromArray","t":"def chooseFromArray[@specialized A](arr: Array[A])(implicit gen: Generator): A","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"chooseFromIterable","t":"def chooseFromIterable[A](as: Iterable[A])(implicit gen: Generator): A","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"chooseFromSeq","t":"def chooseFromSeq[A](seq: Seq[A])(implicit gen: Generator): A","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"copy","t":"def copy: Generator","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillArray","t":"def fillArray[@specialized A : Dist](arr: Array[A]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillBytes","t":"def fillBytes(arr: Array[Byte]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillGaussians","t":"def fillGaussians(arr: Array[Double]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillGaussians","t":"def fillGaussians(arr: Array[Double], mean: Double, stddev: Double): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillInts","t":"def fillInts(arr: Array[Int]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillLongs","t":"def fillLongs(arr: Array[Long]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"fillShorts","t":"def fillShorts(arr: Array[Short]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateArray","t":"def generateArray[@specialized A : ClassTag](n: Int): Array[A]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateBytes","t":"def generateBytes(n: Int): Array[Byte]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateGaussians","t":"def generateGaussians(n: Int): Array[Double]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateGaussians","t":"def generateGaussians(n: Int, mean: Double, stddev: Double): Array[Double]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateInts","t":"def generateInts(n: Int): Array[Int]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateLongs","t":"def generateLongs(n: Int): Array[Long]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"generateShorts","t":"def generateShorts(n: Int): Array[Short]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"iterator","t":"def iterator[A](implicit next: Dist[A]): Iterator[A]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"next","t":"def next[A](implicit next: Dist[A]): A","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextBits","t":"def nextBits(n: Int): Int","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextBoolean","t":"def nextBoolean(): Boolean","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextDouble","t":"def nextDouble(): Double","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextDouble","t":"def nextDouble(n: Double): Double","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextDouble","t":"def nextDouble(from: Double, until: Double): Double","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextFloat","t":"def nextFloat(): Float","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextFloat","t":"def nextFloat(n: Float): Float","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextFloat","t":"def nextFloat(from: Float, until: Float): Float","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextGaussian","t":"def nextGaussian: Double","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextGaussian","t":"def nextGaussian(mean: Double, stddev: Double): Double","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextInt","t":"def nextInt(n: Int): Int","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextInt","t":"def nextInt(from: Int, to: Int): Int","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextLong","t":"def nextLong(n: Long): Long","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"nextLong","t":"def nextLong(from: Long, to: Long): Long","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"oneOf","t":"def oneOf[A](as: A*): A","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"sampleFromArray","t":"def sampleFromArray[@specialized A : ClassTag](as: Array[A], size: Int)(implicit evidence$4: ClassTag[A], gen: Generator): Array[A]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"sampleFromIterable","t":"def sampleFromIterable[@specialized A : ClassTag](as: Iterable[A], size: Int)(implicit evidence$5: ClassTag[A], gen: Generator): Array[A]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"sampleFromTraversable","t":"def sampleFromTraversable[@specialized A : ClassTag](as: Iterable[A], size: Int)(implicit evidence$6: ClassTag[A], gen: Generator): Array[A]","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"shuffle","t":"def shuffle[@specialized A](as: Array[A])(implicit gen: Generator): Unit","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator.html","n":"sync","t":"def sync: SyncGenerator","d":"spire/random/Generator","k":"def"},
{"l":"spire/random/Generator$.html","n":"Generator","t":"object Generator","d":"spire/random/Generator$","k":"object"},
{"l":"spire/random/Generator$.html","n":"rng","t":"val rng: Generator","d":"spire/random/Generator$","k":"val"},
{"l":"spire/random/GeneratorCompanion.html","n":"GeneratorCompanion","t":"trait GeneratorCompanion[G, @specialized(Int, Long) S]","d":"spire/random/GeneratorCompanion","k":"trait"},
{"l":"spire/random/GeneratorCompanion.html","n":"apply","t":"def apply(): G","d":"spire/random/GeneratorCompanion","k":"def"},
{"l":"spire/random/GeneratorCompanion.html","n":"apply","t":"def apply(seed: S): G","d":"spire/random/GeneratorCompanion","k":"def"},
{"l":"spire/random/GeneratorCompanion.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): G","d":"spire/random/GeneratorCompanion","k":"def"},
{"l":"spire/random/GeneratorCompanion.html","n":"fromSeed","t":"def fromSeed(seed: S): G","d":"spire/random/GeneratorCompanion","k":"def"},
{"l":"spire/random/GeneratorCompanion.html","n":"fromTime","t":"def fromTime(time: Long): G","d":"spire/random/GeneratorCompanion","k":"def"},
{"l":"spire/random/GeneratorCompanion.html","n":"randomSeed","t":"def randomSeed(): S","d":"spire/random/GeneratorCompanion","k":"def"},
{"l":"spire/random/GlobalRng$.html","n":"GlobalRng","t":"object GlobalRng extends LongBasedGenerator","d":"spire/random/GlobalRng$","k":"object"},
{"l":"spire/random/GlobalRng$.html","n":"copyInit","t":"def copyInit: Generator","d":"spire/random/GlobalRng$","k":"def"},
{"l":"spire/random/GlobalRng$.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/GlobalRng$","k":"def"},
{"l":"spire/random/GlobalRng$.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/GlobalRng$","k":"def"},
{"l":"spire/random/IntBasedGenerator.html","n":"IntBasedGenerator","t":"class IntBasedGenerator extends Generator","d":"spire/random/IntBasedGenerator","k":"class"},
{"l":"spire/random/IntBasedGenerator.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/IntBasedGenerator","k":"def"},
{"l":"spire/random/LongBasedGenerator.html","n":"LongBasedGenerator","t":"class LongBasedGenerator extends Generator","d":"spire/random/LongBasedGenerator","k":"class"},
{"l":"spire/random/LongBasedGenerator.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/LongBasedGenerator","k":"def"},
{"l":"spire/random/MarsagliaGaussian.html","n":"MarsagliaGaussian","t":"class MarsagliaGaussian[@specialized(Float, Double) A] extends Gaussian[A]","d":"spire/random/MarsagliaGaussian","k":"class"},
{"l":"spire/random/MarsagliaGaussian.html","n":"apply","t":"def apply(mean: A, stdDev: A): Dist[A]","d":"spire/random/MarsagliaGaussian","k":"def"},
{"l":"spire/random/More.html","n":"More","t":"class More[+A](k: () => Op[A]) extends Op[A]","d":"spire/random/More","k":"class"},
{"l":"spire/random/Next.html","n":"Next","t":"class Next[+A](f: Generator => A) extends Op[A]","d":"spire/random/Next","k":"class"},
{"l":"spire/random/Op.html","n":"Op","t":"trait Op[+A]","d":"spire/random/Op","k":"trait"},
{"l":"spire/random/Op.html","n":"flatMap","t":"def flatMap[B](f: A => Op[B]): Op[B]","d":"spire/random/Op","k":"def"},
{"l":"spire/random/Op.html","n":"map","t":"def map[B](f: A => B): Op[B]","d":"spire/random/Op","k":"def"},
{"l":"spire/random/Op.html","n":"resume","t":"def resume(gen: Generator): Either[() => Op[A], A]","d":"spire/random/Op","k":"def"},
{"l":"spire/random/Op.html","n":"run","t":"def run(gen: Generator): A","d":"spire/random/Op","k":"def"},
{"l":"spire/random/Random$.html","n":"Random","t":"object Random extends RandomCompanion[Cmwc5]","d":"spire/random/Random$","k":"object"},
{"l":"spire/random/Random$.html","n":"initGenerator","t":"def initGenerator: Cmwc5","d":"spire/random/Random$","k":"def"},
{"l":"spire/random/Random$.html","n":"spawn","t":"def spawn[B](op: Op[B]): RandomCmwc5[B]","d":"spire/random/Random$","k":"def"},
{"l":"spire/random/Random.html","n":"Random","t":"class Random[+A, G <: Generator](val op: Op[A])","d":"spire/random/Random","k":"class"},
{"l":"spire/random/Random.html","n":"and","t":"def and[B](that: Random[B, G]): Random[(A, B), G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"companion","t":"def companion: RandomCompanion[G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"flatMap","t":"def flatMap[B](f: A => Random[B, G]): Random[B, G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"left","t":"def left: Random[Left[A, Nothing], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"list","t":"def list(size: Size): Random[List[A], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"listOfSize","t":"def listOfSize(n: Int): Random[List[A], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"map","t":"def map[B](f: A => B): Random[B, G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"op","t":"val op: Op[A]","d":"spire/random/Random","k":"val"},
{"l":"spire/random/Random.html","n":"option","t":"def option: Random[Option[A], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"or","t":"def or[B](that: Random[B, G]): Random[Either[A, B], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"recurse","t":"def recurse[B](body: => Random[B, G]): Random[B, G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"right","t":"def right: Random[Right[Nothing, A], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"run","t":"def run: A","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"run","t":"def run(seed: Seed): A","d":"spire/random/Random","k":"def"},
{"l":"spire/random/Random.html","n":"some","t":"def some: Random[Some[A], G]","d":"spire/random/Random","k":"def"},
{"l":"spire/random/RandomCmwc5.html","n":"RandomCmwc5","t":"class RandomCmwc5[+A](op: Op[A]) extends Random[A, Cmwc5]","d":"spire/random/RandomCmwc5","k":"class"},
{"l":"spire/random/RandomCmwc5.html","n":"companion","t":"def companion: Random","d":"spire/random/RandomCmwc5","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"RandomCompanion","t":"trait RandomCompanion[G <: Generator]","d":"spire/random/RandomCompanion","k":"trait"},
{"l":"spire/random/RandomCompanion.html","n":"R","t":"type R[X] = Random[X, G]","d":"spire/random/RandomCompanion","k":"type"},
{"l":"spire/random/RandomCompanion.html","n":"RandomOps","t":"def RandomOps[A](lhs: R[A]): RandomOps[A]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"boolean","t":"def boolean: R[Boolean]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"byte","t":"def byte: R[Byte]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"char","t":"def char: R[Char]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"constant","t":"def constant[B](b: B): R[B]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"double","t":"def double: R[Double]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"float","t":"def float: R[Float]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"fromDist","t":"def fromDist[B](dist: Dist[B]): R[B]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"generatorFromSeed","t":"def generatorFromSeed(seed: Seed): G","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"initGenerator","t":"def initGenerator: G","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"int","t":"def int: R[Int]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"int","t":"def int(n: Int): R[Int]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"int","t":"def int(n1: Int, n2: Int): R[Int]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"long","t":"def long: R[Long]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"next","t":"def next[B](f: Generator => B): R[B]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"short","t":"def short: R[Short]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"spawn","t":"def spawn[B](op: Op[B]): R[B]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"string","t":"def string(size: Size): R[String]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"stringOfSize","t":"def stringOfSize(n: Int): Random[String, G]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"tuple2","t":"def tuple2[A, B](r1: R[A], r2: R[B]): R[(A, B)]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"tuple3","t":"def tuple3[A, B, C](r1: R[A], r2: R[B], r3: R[C]): R[(A, B, C)]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"tuple4","t":"def tuple4[A, B, C, D](r1: R[A], r2: R[B], r3: R[C], r4: R[D]): R[(A, B, C, D)]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion.html","n":"unit","t":"def unit: R[Unit]","d":"spire/random/RandomCompanion","k":"def"},
{"l":"spire/random/RandomCompanion$RandomOps.html","n":"RandomOps","t":"class RandomOps[A](lhs: R[A])","d":"spire/random/RandomCompanion$RandomOps","k":"class"},
{"l":"spire/random/RandomCompanion$RandomOps.html","n":"collection","t":"def collection[CC[_]](size: Size)(implicit cbf: Factory[A, CC[A]]): Random[CC[A], G]","d":"spire/random/RandomCompanion$RandomOps","k":"def"},
{"l":"spire/random/RandomCompanion$RandomOps.html","n":"collectionOfSize","t":"def collectionOfSize[CC[_]](n: Int)(implicit cbf: Factory[A, CC[A]]): Random[CC[A], G]","d":"spire/random/RandomCompanion$RandomOps","k":"def"},
{"l":"spire/random/RandomCompanion$RandomOps.html","n":"foldLeftOfSize","t":"def foldLeftOfSize[B](n: Int)(init: => B)(f: (B, A) => B): Random[B, G]","d":"spire/random/RandomCompanion$RandomOps","k":"def"},
{"l":"spire/random/RandomCompanion$RandomOps.html","n":"unfold","t":"def unfold[B](init: B)(f: (B, A) => Option[B]): Random[B, G]","d":"spire/random/RandomCompanion$RandomOps","k":"def"},
{"l":"spire/random/Seed.html","n":"Seed","t":"class Seed","d":"spire/random/Seed","k":"class"},
{"l":"spire/random/Seed$.html","n":"Seed","t":"object Seed","d":"spire/random/Seed$","k":"object"},
{"l":"spire/random/Seed$.html","n":"apply","t":"def apply(n: Int): Seed","d":"spire/random/Seed$","k":"def"},
{"l":"spire/random/Seed$.html","n":"apply","t":"def apply(n: Long): Seed","d":"spire/random/Seed$","k":"def"},
{"l":"spire/random/Seed$.html","n":"apply","t":"def apply(bytes: Array[Byte]): Seed","d":"spire/random/Seed$","k":"def"},
{"l":"spire/random/Seed$.html","n":"zero","t":"val zero: Seed","d":"spire/random/Seed$","k":"val"},
{"l":"spire/random/Size.html","n":"Size","t":"trait Size","d":"spire/random/Size","k":"trait"},
{"l":"spire/random/Size.html","n":"random","t":"def random[G <: Generator](r: RandomCompanion[G]): Random[Int, G]","d":"spire/random/Size","k":"def"},
{"l":"spire/random/Size$.html","n":"Size","t":"object Size","d":"spire/random/Size$","k":"object"},
{"l":"spire/random/Size$.html","n":"apply","t":"def apply(n: Int): Size","d":"spire/random/Size$","k":"def"},
{"l":"spire/random/Size$.html","n":"between","t":"def between(n1: Int, n2: Int): Size","d":"spire/random/Size$","k":"def"},
{"l":"spire/random/Size$.html","n":"upTo","t":"def upTo(n: Int): Size","d":"spire/random/Size$","k":"def"},
{"l":"spire/random/Size$$Between.html","n":"Between","t":"class Between(n1: Int, n2: Int) extends Size","d":"spire/random/Size$$Between","k":"class"},
{"l":"spire/random/Size$$Between.html","n":"random","t":"def random[G <: Generator](r: RandomCompanion[G]): Random[Int, G]","d":"spire/random/Size$$Between","k":"def"},
{"l":"spire/random/Size$$Exact.html","n":"Exact","t":"class Exact(n: Int) extends Size","d":"spire/random/Size$$Exact","k":"class"},
{"l":"spire/random/Size$$Exact.html","n":"random","t":"def random[G <: Generator](r: RandomCompanion[G]): Random[Int, G]","d":"spire/random/Size$$Exact","k":"def"},
{"l":"spire/random/Uniform.html","n":"Uniform","t":"trait Uniform[@specialized A]","d":"spire/random/Uniform","k":"trait"},
{"l":"spire/random/Uniform.html","n":"apply","t":"def apply(min: A, max: A): Dist[A]","d":"spire/random/Uniform","k":"def"},
{"l":"spire/random/Uniform$.html","n":"Uniform","t":"object Uniform","d":"spire/random/Uniform$","k":"object"},
{"l":"spire/random/Uniform$.html","n":"UniformBigDecimal","t":"val UniformBigDecimal: Uniform[BigDecimal]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformBigInt","t":"val UniformBigInt: Uniform[BigInt]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformDouble","t":"val UniformDouble: Uniform[Double]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformFloat","t":"val UniformFloat: Uniform[Float]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformInt","t":"val UniformInt: Uniform[Int]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformLong","t":"val UniformLong: Uniform[Long]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformUInt","t":"val UniformUInt: Uniform[UInt]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"UniformULong","t":"val UniformULong: Uniform[ULong]","d":"spire/random/Uniform$","k":"val"},
{"l":"spire/random/Uniform$.html","n":"apply","t":"def apply[@specialized A](implicit u: Uniform[A]): Uniform[A]","d":"spire/random/Uniform$","k":"def"},
{"l":"spire/random/Uniform$.html","n":"apply","t":"def apply[@specialized A](min: A, max: A)(implicit u: Uniform[A]): Dist[A]","d":"spire/random/Uniform$","k":"def"},
{"l":"spire/random/Uniform$.html","n":"uniformRational","t":"def uniformRational(eps: Rational): Uniform[Rational]","d":"spire/random/Uniform$","k":"def"},
{"l":"spire/random/Ziggurat$.html","n":"Ziggurat","t":"object Ziggurat","d":"spire/random/Ziggurat$","k":"object"},
{"l":"spire/random/Ziggurat$.html","n":"rexp","t":"def rexp(g: Generator): Double","d":"spire/random/Ziggurat$","k":"def"},
{"l":"spire/random/Ziggurat$.html","n":"rnor","t":"def rnor(g: Generator): Double","d":"spire/random/Ziggurat$","k":"def"},
{"l":"spire/random/rng.html","n":"spire.random.rng","t":"package spire.random.rng","d":"spire/random/rng","k":"package"},
{"l":"spire/random/rng/BurtleCompanion.html","n":"BurtleCompanion","t":"class BurtleCompanion[G <: BurtleRot32] extends GeneratorCompanion[G, Array[Int]]","d":"spire/random/rng/BurtleCompanion","k":"class"},
{"l":"spire/random/rng/BurtleCompanion.html","n":"create","t":"def create(_a: Int, _b: Int, _c: Int, _d: Int): G","d":"spire/random/rng/BurtleCompanion","k":"def"},
{"l":"spire/random/rng/BurtleCompanion.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): G","d":"spire/random/rng/BurtleCompanion","k":"def"},
{"l":"spire/random/rng/BurtleCompanion.html","n":"fromSeed","t":"def fromSeed(ints: Array[Int]): G","d":"spire/random/rng/BurtleCompanion","k":"def"},
{"l":"spire/random/rng/BurtleCompanion.html","n":"fromTime","t":"def fromTime(time: Long): G","d":"spire/random/rng/BurtleCompanion","k":"def"},
{"l":"spire/random/rng/BurtleRot2.html","n":"BurtleRot2","t":"class BurtleRot2(_a: Int, _b: Int, _c: Int, _d: Int) extends BurtleRot32","d":"spire/random/rng/BurtleRot2","k":"class"},
{"l":"spire/random/rng/BurtleRot2.html","n":"copyInit","t":"def copyInit: BurtleRot2","d":"spire/random/rng/BurtleRot2","k":"def"},
{"l":"spire/random/rng/BurtleRot2$.html","n":"BurtleRot2","t":"object BurtleRot2 extends BurtleCompanion[BurtleRot2]","d":"spire/random/rng/BurtleRot2$","k":"object"},
{"l":"spire/random/rng/BurtleRot2$.html","n":"create","t":"def create(a: Int, b: Int, c: Int, d: Int): BurtleRot2","d":"spire/random/rng/BurtleRot2$","k":"def"},
{"l":"spire/random/rng/BurtleRot3.html","n":"BurtleRot3","t":"class BurtleRot3(_a: Int, _b: Int, _c: Int, _d: Int) extends BurtleRot32","d":"spire/random/rng/BurtleRot3","k":"class"},
{"l":"spire/random/rng/BurtleRot3.html","n":"copyInit","t":"def copyInit: BurtleRot3","d":"spire/random/rng/BurtleRot3","k":"def"},
{"l":"spire/random/rng/BurtleRot3$.html","n":"BurtleRot3","t":"object BurtleRot3 extends BurtleCompanion[BurtleRot3]","d":"spire/random/rng/BurtleRot3$","k":"object"},
{"l":"spire/random/rng/BurtleRot3$.html","n":"create","t":"def create(a: Int, b: Int, c: Int, d: Int): BurtleRot3","d":"spire/random/rng/BurtleRot3$","k":"def"},
{"l":"spire/random/rng/BurtleRot32.html","n":"BurtleRot32","t":"class BurtleRot32(_a: Int, _b: Int, _c: Int, _d: Int) extends IntBasedGenerator","d":"spire/random/rng/BurtleRot32","k":"class"},
{"l":"spire/random/rng/BurtleRot32.html","n":"a","t":"var a: Int","d":"spire/random/rng/BurtleRot32","k":"var"},
{"l":"spire/random/rng/BurtleRot32.html","n":"advance","t":"def advance: Unit","d":"spire/random/rng/BurtleRot32","k":"def"},
{"l":"spire/random/rng/BurtleRot32.html","n":"b","t":"var b: Int","d":"spire/random/rng/BurtleRot32","k":"var"},
{"l":"spire/random/rng/BurtleRot32.html","n":"c","t":"var c: Int","d":"spire/random/rng/BurtleRot32","k":"var"},
{"l":"spire/random/rng/BurtleRot32.html","n":"d","t":"var d: Int","d":"spire/random/rng/BurtleRot32","k":"var"},
{"l":"spire/random/rng/BurtleRot32.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/BurtleRot32","k":"def"},
{"l":"spire/random/rng/Cmwc5.html","n":"Cmwc5","t":"class Cmwc5(_x: Long, _y: Long, _z: Long, _w: Long, _v: Long) extends LongBasedGenerator","d":"spire/random/rng/Cmwc5","k":"class"},
{"l":"spire/random/rng/Cmwc5.html","n":"copyInit","t":"def copyInit: Cmwc5","d":"spire/random/rng/Cmwc5","k":"def"},
{"l":"spire/random/rng/Cmwc5.html","n":"getSeed","t":"def getSeed: Array[Long]","d":"spire/random/rng/Cmwc5","k":"def"},
{"l":"spire/random/rng/Cmwc5.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Cmwc5","k":"def"},
{"l":"spire/random/rng/Cmwc5.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/Cmwc5","k":"def"},
{"l":"spire/random/rng/Cmwc5.html","n":"setSeed","t":"def setSeed(longs: Array[Long]): Unit","d":"spire/random/rng/Cmwc5","k":"def"},
{"l":"spire/random/rng/Cmwc5.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Cmwc5","k":"def"},
{"l":"spire/random/rng/Cmwc5$.html","n":"Cmwc5","t":"object Cmwc5 extends GeneratorCompanion[Cmwc5, Array[Long]]","d":"spire/random/rng/Cmwc5$","k":"object"},
{"l":"spire/random/rng/Cmwc5$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Cmwc5","d":"spire/random/rng/Cmwc5$","k":"def"},
{"l":"spire/random/rng/Cmwc5$.html","n":"fromSeed","t":"def fromSeed(seed: Array[Long]): Cmwc5","d":"spire/random/rng/Cmwc5$","k":"def"},
{"l":"spire/random/rng/Cmwc5$.html","n":"fromTime","t":"def fromTime(time: Long): Cmwc5","d":"spire/random/rng/Cmwc5$","k":"def"},
{"l":"spire/random/rng/Cmwc5$.html","n":"randomSeed","t":"def randomSeed(): Array[Long]","d":"spire/random/rng/Cmwc5$","k":"def"},
{"l":"spire/random/rng/CycledFile.html","n":"CycledFile","t":"class CycledFile(f: File) extends Generator","d":"spire/random/rng/CycledFile","k":"class"},
{"l":"spire/random/rng/CycledFile.html","n":"copyInit","t":"def copyInit: Generator","d":"spire/random/rng/CycledFile","k":"def"},
{"l":"spire/random/rng/CycledFile.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/CycledFile","k":"def"},
{"l":"spire/random/rng/CycledFile.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/CycledFile","k":"def"},
{"l":"spire/random/rng/CycledFile.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/CycledFile","k":"def"},
{"l":"spire/random/rng/CycledFile.html","n":"reinit","t":"def reinit: Unit","d":"spire/random/rng/CycledFile","k":"def"},
{"l":"spire/random/rng/CycledFile.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/CycledFile","k":"def"},
{"l":"spire/random/rng/CycledFile$.html","n":"CycledFile","t":"object CycledFile","d":"spire/random/rng/CycledFile$","k":"object"},
{"l":"spire/random/rng/CycledFile$.html","n":"apply","t":"def apply(path: String): CycledFile","d":"spire/random/rng/CycledFile$","k":"def"},
{"l":"spire/random/rng/Device.html","n":"Device","t":"class Device(f: File) extends Generator","d":"spire/random/rng/Device","k":"class"},
{"l":"spire/random/rng/Device.html","n":"copyInit","t":"def copyInit: Generator","d":"spire/random/rng/Device","k":"def"},
{"l":"spire/random/rng/Device.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Device","k":"def"},
{"l":"spire/random/rng/Device.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Device","k":"def"},
{"l":"spire/random/rng/Device.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/Device","k":"def"},
{"l":"spire/random/rng/Device.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Device","k":"def"},
{"l":"spire/random/rng/Device$.html","n":"Device","t":"object Device","d":"spire/random/rng/Device$","k":"object"},
{"l":"spire/random/rng/Device$.html","n":"apply","t":"def apply(path: String): Device","d":"spire/random/rng/Device$","k":"def"},
{"l":"spire/random/rng/Device$.html","n":"random","t":"def random: Device","d":"spire/random/rng/Device$","k":"def"},
{"l":"spire/random/rng/Device$.html","n":"urandom","t":"def urandom: Device","d":"spire/random/rng/Device$","k":"def"},
{"l":"spire/random/rng/Lcg32.html","n":"Lcg32","t":"class Lcg32(seed0: Int) extends IntBasedGenerator","d":"spire/random/rng/Lcg32","k":"class"},
{"l":"spire/random/rng/Lcg32.html","n":"copyInit","t":"def copyInit: Lcg32","d":"spire/random/rng/Lcg32","k":"def"},
{"l":"spire/random/rng/Lcg32.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Lcg32","k":"def"},
{"l":"spire/random/rng/Lcg32.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Lcg32","k":"def"},
{"l":"spire/random/rng/Lcg32.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Lcg32","k":"def"},
{"l":"spire/random/rng/Lcg32$.html","n":"Lcg32","t":"object Lcg32 extends GeneratorCompanion[Lcg32, Int]","d":"spire/random/rng/Lcg32$","k":"object"},
{"l":"spire/random/rng/Lcg32$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Lcg32","d":"spire/random/rng/Lcg32$","k":"def"},
{"l":"spire/random/rng/Lcg32$.html","n":"fromSeed","t":"def fromSeed(seed: Int): Lcg32","d":"spire/random/rng/Lcg32$","k":"def"},
{"l":"spire/random/rng/Lcg32$.html","n":"fromTime","t":"def fromTime(time: Long): Lcg32","d":"spire/random/rng/Lcg32$","k":"def"},
{"l":"spire/random/rng/Lcg32$.html","n":"randomSeed","t":"def randomSeed(): Int","d":"spire/random/rng/Lcg32$","k":"def"},
{"l":"spire/random/rng/Lcg32$.html","n":"step","t":"def step(n: Int): Int","d":"spire/random/rng/Lcg32$","k":"def"},
{"l":"spire/random/rng/Lcg64.html","n":"Lcg64","t":"class Lcg64(_seed: Long) extends LongBasedGenerator","d":"spire/random/rng/Lcg64","k":"class"},
{"l":"spire/random/rng/Lcg64.html","n":"copyInit","t":"def copyInit: Lcg64","d":"spire/random/rng/Lcg64","k":"def"},
{"l":"spire/random/rng/Lcg64.html","n":"getSeed","t":"def getSeed: Long","d":"spire/random/rng/Lcg64","k":"def"},
{"l":"spire/random/rng/Lcg64.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/Lcg64","k":"def"},
{"l":"spire/random/rng/Lcg64.html","n":"setSeed","t":"def setSeed(n: Long): Unit","d":"spire/random/rng/Lcg64","k":"def"},
{"l":"spire/random/rng/Lcg64.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Lcg64","k":"def"},
{"l":"spire/random/rng/Lcg64$.html","n":"Lcg64","t":"object Lcg64 extends GeneratorCompanion[Lcg64, Long]","d":"spire/random/rng/Lcg64$","k":"object"},
{"l":"spire/random/rng/Lcg64$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Lcg64","d":"spire/random/rng/Lcg64$","k":"def"},
{"l":"spire/random/rng/Lcg64$.html","n":"fromSeed","t":"def fromSeed(seed: Long): Lcg64","d":"spire/random/rng/Lcg64$","k":"def"},
{"l":"spire/random/rng/Lcg64$.html","n":"fromTime","t":"def fromTime(time: Long): Lcg64","d":"spire/random/rng/Lcg64$","k":"def"},
{"l":"spire/random/rng/Lcg64$.html","n":"randomSeed","t":"def randomSeed(): Long","d":"spire/random/rng/Lcg64$","k":"def"},
{"l":"spire/random/rng/Lcg64$.html","n":"step","t":"def step(n: Long): Long","d":"spire/random/rng/Lcg64$","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6.html","n":"Marsaglia32a6","t":"class Marsaglia32a6(_x: Int, _y: Int, _z: Int, _w: Int, _v: Int, _d: Int) extends IntBasedGenerator","d":"spire/random/rng/Marsaglia32a6","k":"class"},
{"l":"spire/random/rng/Marsaglia32a6.html","n":"copyInit","t":"def copyInit: Marsaglia32a6","d":"spire/random/rng/Marsaglia32a6","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6.html","n":"getSeed","t":"def getSeed: Array[Int]","d":"spire/random/rng/Marsaglia32a6","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Marsaglia32a6","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6.html","n":"setSeed","t":"def setSeed(seed: Array[Int]): Unit","d":"spire/random/rng/Marsaglia32a6","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Marsaglia32a6","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6$.html","n":"Marsaglia32a6","t":"object Marsaglia32a6 extends GeneratorCompanion[Marsaglia32a6, Array[Int]]","d":"spire/random/rng/Marsaglia32a6$","k":"object"},
{"l":"spire/random/rng/Marsaglia32a6$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Marsaglia32a6","d":"spire/random/rng/Marsaglia32a6$","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6$.html","n":"fromSeed","t":"def fromSeed(ints: Array[Int]): Marsaglia32a6","d":"spire/random/rng/Marsaglia32a6$","k":"def"},
{"l":"spire/random/rng/Marsaglia32a6$.html","n":"fromTime","t":"def fromTime(time: Long): Marsaglia32a6","d":"spire/random/rng/Marsaglia32a6$","k":"def"},
{"l":"spire/random/rng/MersenneTwister32.html","n":"MersenneTwister32","t":"class MersenneTwister32 extends IntBasedGenerator","d":"spire/random/rng/MersenneTwister32","k":"class"},
{"l":"spire/random/rng/MersenneTwister32.html","n":"copyInit","t":"def copyInit: MersenneTwister32","d":"spire/random/rng/MersenneTwister32","k":"def"},
{"l":"spire/random/rng/MersenneTwister32.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/MersenneTwister32","k":"def"},
{"l":"spire/random/rng/MersenneTwister32.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/MersenneTwister32","k":"def"},
{"l":"spire/random/rng/MersenneTwister32.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/MersenneTwister32","k":"def"},
{"l":"spire/random/rng/MersenneTwister32$.html","n":"MersenneTwister32","t":"object MersenneTwister32 extends GeneratorCompanion[MersenneTwister32, (Array[Int], Int)]","d":"spire/random/rng/MersenneTwister32$","k":"object"},
{"l":"spire/random/rng/MersenneTwister32$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): MersenneTwister32","d":"spire/random/rng/MersenneTwister32$","k":"def"},
{"l":"spire/random/rng/MersenneTwister32$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): MersenneTwister32","d":"spire/random/rng/MersenneTwister32$","k":"def"},
{"l":"spire/random/rng/MersenneTwister32$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): MersenneTwister32","d":"spire/random/rng/MersenneTwister32$","k":"def"},
{"l":"spire/random/rng/MersenneTwister32$.html","n":"fromTime","t":"def fromTime(time: Long): MersenneTwister32","d":"spire/random/rng/MersenneTwister32$","k":"def"},
{"l":"spire/random/rng/MersenneTwister32$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/MersenneTwister32$","k":"def"},
{"l":"spire/random/rng/MersenneTwister64.html","n":"MersenneTwister64","t":"class MersenneTwister64 extends LongBasedGenerator","d":"spire/random/rng/MersenneTwister64","k":"class"},
{"l":"spire/random/rng/MersenneTwister64.html","n":"copyInit","t":"def copyInit: MersenneTwister64","d":"spire/random/rng/MersenneTwister64","k":"def"},
{"l":"spire/random/rng/MersenneTwister64.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/MersenneTwister64","k":"def"},
{"l":"spire/random/rng/MersenneTwister64.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/MersenneTwister64","k":"def"},
{"l":"spire/random/rng/MersenneTwister64$.html","n":"MersenneTwister64","t":"object MersenneTwister64 extends GeneratorCompanion[MersenneTwister64, (Array[Long], Int)]","d":"spire/random/rng/MersenneTwister64$","k":"object"},
{"l":"spire/random/rng/MersenneTwister64$.html","n":"fromArray","t":"def fromArray(arr: Array[Long]): MersenneTwister64","d":"spire/random/rng/MersenneTwister64$","k":"def"},
{"l":"spire/random/rng/MersenneTwister64$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): MersenneTwister64","d":"spire/random/rng/MersenneTwister64$","k":"def"},
{"l":"spire/random/rng/MersenneTwister64$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Long], Int)): MersenneTwister64","d":"spire/random/rng/MersenneTwister64$","k":"def"},
{"l":"spire/random/rng/MersenneTwister64$.html","n":"fromTime","t":"def fromTime(time: Long): MersenneTwister64","d":"spire/random/rng/MersenneTwister64$","k":"def"},
{"l":"spire/random/rng/MersenneTwister64$.html","n":"randomSeed","t":"def randomSeed(): (Array[Long], Int)","d":"spire/random/rng/MersenneTwister64$","k":"def"},
{"l":"spire/random/rng/PcgSeed64.html","n":"PcgSeed64","t":"class PcgSeed64(initState: Long, initSeq: Long)","d":"spire/random/rng/PcgSeed64","k":"class"},
{"l":"spire/random/rng/PcgXshRr64_32.html","n":"PcgXshRr64_32","t":"class PcgXshRr64_32 extends IntBasedGenerator","d":"spire/random/rng/PcgXshRr64_32","k":"class"},
{"l":"spire/random/rng/PcgXshRr64_32.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/PcgXshRr64_32","k":"def"},
{"l":"spire/random/rng/PcgXshRr64_32.html","n":"seed","t":"def seed(initState: Long, initSeq: Long): Unit","d":"spire/random/rng/PcgXshRr64_32","k":"def"},
{"l":"spire/random/rng/PcgXshRr64_32.html","n":"seed","t":"def seed(seed: PcgSeed64): Unit","d":"spire/random/rng/PcgXshRr64_32","k":"def"},
{"l":"spire/random/rng/PcgXshRr64_32$.html","n":"PcgXshRr64_32","t":"object PcgXshRr64_32 extends GeneratorCompanion[PcgXshRr64_32, PcgSeed64]","d":"spire/random/rng/PcgXshRr64_32$","k":"object"},
{"l":"spire/random/rng/SecureJava.html","n":"SecureJava","t":"class SecureJava(rand: SecureRandom) extends IntBasedGenerator","d":"spire/random/rng/SecureJava","k":"class"},
{"l":"spire/random/rng/SecureJava.html","n":"copyInit","t":"def copyInit: SecureJava","d":"spire/random/rng/SecureJava","k":"def"},
{"l":"spire/random/rng/SecureJava.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/SecureJava","k":"def"},
{"l":"spire/random/rng/SecureJava.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/SecureJava","k":"def"},
{"l":"spire/random/rng/SecureJava$.html","n":"SecureJava","t":"object SecureJava","d":"spire/random/rng/SecureJava$","k":"object"},
{"l":"spire/random/rng/SecureJava$.html","n":"apply","t":"def apply: SecureJava","d":"spire/random/rng/SecureJava$","k":"def"},
{"l":"spire/random/rng/SecureJava$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): SecureJava","d":"spire/random/rng/SecureJava$","k":"def"},
{"l":"spire/random/rng/Serial.html","n":"Serial","t":"class Serial(seed0: Long) extends LongBasedGenerator","d":"spire/random/rng/Serial","k":"class"},
{"l":"spire/random/rng/Serial.html","n":"copyInit","t":"def copyInit: Serial","d":"spire/random/rng/Serial","k":"def"},
{"l":"spire/random/rng/Serial.html","n":"getSeed","t":"def getSeed: Long","d":"spire/random/rng/Serial","k":"def"},
{"l":"spire/random/rng/Serial.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/Serial","k":"def"},
{"l":"spire/random/rng/Serial.html","n":"setSeed","t":"def setSeed(n: Long): Unit","d":"spire/random/rng/Serial","k":"def"},
{"l":"spire/random/rng/Serial.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Serial","k":"def"},
{"l":"spire/random/rng/Serial$.html","n":"Serial","t":"object Serial extends GeneratorCompanion[Serial, Long]","d":"spire/random/rng/Serial$","k":"object"},
{"l":"spire/random/rng/Serial$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Serial","d":"spire/random/rng/Serial$","k":"def"},
{"l":"spire/random/rng/Serial$.html","n":"fromSeed","t":"def fromSeed(seed: Long): Serial","d":"spire/random/rng/Serial$","k":"def"},
{"l":"spire/random/rng/Serial$.html","n":"fromTime","t":"def fromTime(time: Long): Serial","d":"spire/random/rng/Serial$","k":"def"},
{"l":"spire/random/rng/Serial$.html","n":"randomSeed","t":"def randomSeed(): Long","d":"spire/random/rng/Serial$","k":"def"},
{"l":"spire/random/rng/SyncGenerator.html","n":"SyncGenerator","t":"class SyncGenerator(gen: Generator) extends Generator","d":"spire/random/rng/SyncGenerator","k":"class"},
{"l":"spire/random/rng/SyncGenerator.html","n":"copyInit","t":"def copyInit: SyncGenerator","d":"spire/random/rng/SyncGenerator","k":"def"},
{"l":"spire/random/rng/SyncGenerator.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/SyncGenerator","k":"def"},
{"l":"spire/random/rng/SyncGenerator.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/SyncGenerator","k":"def"},
{"l":"spire/random/rng/SyncGenerator.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/SyncGenerator","k":"def"},
{"l":"spire/random/rng/SyncGenerator.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/SyncGenerator","k":"def"},
{"l":"spire/random/rng/SyncGenerator$.html","n":"SyncGenerator","t":"object SyncGenerator","d":"spire/random/rng/SyncGenerator$","k":"object"},
{"l":"spire/random/rng/SyncGenerator$.html","n":"apply","t":"def apply(gen: Generator): SyncGenerator","d":"spire/random/rng/SyncGenerator$","k":"def"},
{"l":"spire/random/rng/Utils$.html","n":"Utils","t":"object Utils","d":"spire/random/rng/Utils$","k":"object"},
{"l":"spire/random/rng/Utils$.html","n":"intFromTime","t":"def intFromTime(time: Long): Int","d":"spire/random/rng/Utils$","k":"def"},
{"l":"spire/random/rng/Utils$.html","n":"longFromTime","t":"def longFromTime(time: Long): Long","d":"spire/random/rng/Utils$","k":"def"},
{"l":"spire/random/rng/Utils$.html","n":"seedFromArray","t":"def seedFromArray(length: Int, seed: Array[Int]): Array[Int]","d":"spire/random/rng/Utils$","k":"def"},
{"l":"spire/random/rng/Utils$.html","n":"seedFromArray","t":"def seedFromArray(length: Int, seed: Array[Long]): Array[Long]","d":"spire/random/rng/Utils$","k":"def"},
{"l":"spire/random/rng/Utils$.html","n":"seedFromInt","t":"def seedFromInt(length: Int, seed: Int): Array[Int]","d":"spire/random/rng/Utils$","k":"def"},
{"l":"spire/random/rng/Utils$.html","n":"seedFromLong","t":"def seedFromLong(length: Int, seed: Long): Array[Long]","d":"spire/random/rng/Utils$","k":"def"},
{"l":"spire/random/rng/Well1024a.html","n":"Well1024a","t":"class Well1024a extends IntBasedGenerator","d":"spire/random/rng/Well1024a","k":"class"},
{"l":"spire/random/rng/Well1024a.html","n":"copyInit","t":"def copyInit: Well1024a","d":"spire/random/rng/Well1024a","k":"def"},
{"l":"spire/random/rng/Well1024a.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Well1024a","k":"def"},
{"l":"spire/random/rng/Well1024a.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Well1024a","k":"def"},
{"l":"spire/random/rng/Well1024a.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Well1024a","k":"def"},
{"l":"spire/random/rng/Well1024a$.html","n":"Well1024a","t":"object Well1024a extends GeneratorCompanion[Well1024a, (Array[Int], Int)]","d":"spire/random/rng/Well1024a$","k":"object"},
{"l":"spire/random/rng/Well1024a$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): Well1024a","d":"spire/random/rng/Well1024a$","k":"def"},
{"l":"spire/random/rng/Well1024a$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Well1024a","d":"spire/random/rng/Well1024a$","k":"def"},
{"l":"spire/random/rng/Well1024a$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): Well1024a","d":"spire/random/rng/Well1024a$","k":"def"},
{"l":"spire/random/rng/Well1024a$.html","n":"fromTime","t":"def fromTime(time: Long): Well1024a","d":"spire/random/rng/Well1024a$","k":"def"},
{"l":"spire/random/rng/Well1024a$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/Well1024a$","k":"def"},
{"l":"spire/random/rng/Well19937a.html","n":"Well19937a","t":"class Well19937a extends IntBasedGenerator","d":"spire/random/rng/Well19937a","k":"class"},
{"l":"spire/random/rng/Well19937a.html","n":"copyInit","t":"def copyInit: Well19937a","d":"spire/random/rng/Well19937a","k":"def"},
{"l":"spire/random/rng/Well19937a.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Well19937a","k":"def"},
{"l":"spire/random/rng/Well19937a.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Well19937a","k":"def"},
{"l":"spire/random/rng/Well19937a.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Well19937a","k":"def"},
{"l":"spire/random/rng/Well19937a$.html","n":"Well19937a","t":"object Well19937a extends GeneratorCompanion[Well19937a, (Array[Int], Int)]","d":"spire/random/rng/Well19937a$","k":"object"},
{"l":"spire/random/rng/Well19937a$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): Well19937a","d":"spire/random/rng/Well19937a$","k":"def"},
{"l":"spire/random/rng/Well19937a$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Well19937a","d":"spire/random/rng/Well19937a$","k":"def"},
{"l":"spire/random/rng/Well19937a$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): Well19937a","d":"spire/random/rng/Well19937a$","k":"def"},
{"l":"spire/random/rng/Well19937a$.html","n":"fromTime","t":"def fromTime(time: Long): Well19937a","d":"spire/random/rng/Well19937a$","k":"def"},
{"l":"spire/random/rng/Well19937a$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/Well19937a$","k":"def"},
{"l":"spire/random/rng/Well19937c.html","n":"Well19937c","t":"class Well19937c extends IntBasedGenerator","d":"spire/random/rng/Well19937c","k":"class"},
{"l":"spire/random/rng/Well19937c.html","n":"copyInit","t":"def copyInit: Well19937c","d":"spire/random/rng/Well19937c","k":"def"},
{"l":"spire/random/rng/Well19937c.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Well19937c","k":"def"},
{"l":"spire/random/rng/Well19937c.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Well19937c","k":"def"},
{"l":"spire/random/rng/Well19937c.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Well19937c","k":"def"},
{"l":"spire/random/rng/Well19937c$.html","n":"Well19937c","t":"object Well19937c extends GeneratorCompanion[Well19937c, (Array[Int], Int)]","d":"spire/random/rng/Well19937c$","k":"object"},
{"l":"spire/random/rng/Well19937c$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): Well19937c","d":"spire/random/rng/Well19937c$","k":"def"},
{"l":"spire/random/rng/Well19937c$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Well19937c","d":"spire/random/rng/Well19937c$","k":"def"},
{"l":"spire/random/rng/Well19937c$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): Well19937c","d":"spire/random/rng/Well19937c$","k":"def"},
{"l":"spire/random/rng/Well19937c$.html","n":"fromTime","t":"def fromTime(time: Long): Well19937c","d":"spire/random/rng/Well19937c$","k":"def"},
{"l":"spire/random/rng/Well19937c$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/Well19937c$","k":"def"},
{"l":"spire/random/rng/Well44497a.html","n":"Well44497a","t":"class Well44497a extends IntBasedGenerator","d":"spire/random/rng/Well44497a","k":"class"},
{"l":"spire/random/rng/Well44497a.html","n":"copyInit","t":"def copyInit: Well44497a","d":"spire/random/rng/Well44497a","k":"def"},
{"l":"spire/random/rng/Well44497a.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Well44497a","k":"def"},
{"l":"spire/random/rng/Well44497a.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Well44497a","k":"def"},
{"l":"spire/random/rng/Well44497a.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Well44497a","k":"def"},
{"l":"spire/random/rng/Well44497a$.html","n":"Well44497a","t":"object Well44497a extends GeneratorCompanion[Well44497a, (Array[Int], Int)]","d":"spire/random/rng/Well44497a$","k":"object"},
{"l":"spire/random/rng/Well44497a$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): Well44497a","d":"spire/random/rng/Well44497a$","k":"def"},
{"l":"spire/random/rng/Well44497a$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Well44497a","d":"spire/random/rng/Well44497a$","k":"def"},
{"l":"spire/random/rng/Well44497a$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): Well44497a","d":"spire/random/rng/Well44497a$","k":"def"},
{"l":"spire/random/rng/Well44497a$.html","n":"fromTime","t":"def fromTime(time: Long): Well44497a","d":"spire/random/rng/Well44497a$","k":"def"},
{"l":"spire/random/rng/Well44497a$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/Well44497a$","k":"def"},
{"l":"spire/random/rng/Well44497b.html","n":"Well44497b","t":"class Well44497b extends IntBasedGenerator","d":"spire/random/rng/Well44497b","k":"class"},
{"l":"spire/random/rng/Well44497b.html","n":"copyInit","t":"def copyInit: Well44497b","d":"spire/random/rng/Well44497b","k":"def"},
{"l":"spire/random/rng/Well44497b.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Well44497b","k":"def"},
{"l":"spire/random/rng/Well44497b.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Well44497b","k":"def"},
{"l":"spire/random/rng/Well44497b.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Well44497b","k":"def"},
{"l":"spire/random/rng/Well44497b$.html","n":"Well44497b","t":"object Well44497b extends GeneratorCompanion[Well44497b, (Array[Int], Int)]","d":"spire/random/rng/Well44497b$","k":"object"},
{"l":"spire/random/rng/Well44497b$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): Well44497b","d":"spire/random/rng/Well44497b$","k":"def"},
{"l":"spire/random/rng/Well44497b$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Well44497b","d":"spire/random/rng/Well44497b$","k":"def"},
{"l":"spire/random/rng/Well44497b$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): Well44497b","d":"spire/random/rng/Well44497b$","k":"def"},
{"l":"spire/random/rng/Well44497b$.html","n":"fromTime","t":"def fromTime(time: Long): Well44497b","d":"spire/random/rng/Well44497b$","k":"def"},
{"l":"spire/random/rng/Well44497b$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/Well44497b$","k":"def"},
{"l":"spire/random/rng/Well512a.html","n":"Well512a","t":"class Well512a extends IntBasedGenerator","d":"spire/random/rng/Well512a","k":"class"},
{"l":"spire/random/rng/Well512a.html","n":"copyInit","t":"def copyInit: Well512a","d":"spire/random/rng/Well512a","k":"def"},
{"l":"spire/random/rng/Well512a.html","n":"getSeedBytes","t":"def getSeedBytes: Array[Byte]","d":"spire/random/rng/Well512a","k":"def"},
{"l":"spire/random/rng/Well512a.html","n":"nextInt","t":"def nextInt(): Int","d":"spire/random/rng/Well512a","k":"def"},
{"l":"spire/random/rng/Well512a.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/Well512a","k":"def"},
{"l":"spire/random/rng/Well512a$.html","n":"Well512a","t":"object Well512a extends GeneratorCompanion[Well512a, (Array[Int], Int)]","d":"spire/random/rng/Well512a$","k":"object"},
{"l":"spire/random/rng/Well512a$.html","n":"fromArray","t":"def fromArray(arr: Array[Int]): Well512a","d":"spire/random/rng/Well512a$","k":"def"},
{"l":"spire/random/rng/Well512a$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): Well512a","d":"spire/random/rng/Well512a$","k":"def"},
{"l":"spire/random/rng/Well512a$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Int], Int)): Well512a","d":"spire/random/rng/Well512a$","k":"def"},
{"l":"spire/random/rng/Well512a$.html","n":"fromTime","t":"def fromTime(time: Long): Well512a","d":"spire/random/rng/Well512a$","k":"def"},
{"l":"spire/random/rng/Well512a$.html","n":"randomSeed","t":"def randomSeed(): (Array[Int], Int)","d":"spire/random/rng/Well512a$","k":"def"},
{"l":"spire/random/rng/extras.html","n":"spire.random.rng.extras","t":"package spire.random.rng.extras","d":"spire/random/rng/extras","k":"package"},
{"l":"spire/random/rng/extras/XorShift1024Star.html","n":"XorShift1024Star","t":"class XorShift1024Star(s: Array[Long], var p: Int) extends LongBasedGenerator","d":"spire/random/rng/extras/XorShift1024Star","k":"class"},
{"l":"spire/random/rng/extras/XorShift1024Star.html","n":"copyInit","t":"def copyInit: XorShift1024Star","d":"spire/random/rng/extras/XorShift1024Star","k":"def"},
{"l":"spire/random/rng/extras/XorShift1024Star.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/extras/XorShift1024Star","k":"def"},
{"l":"spire/random/rng/extras/XorShift1024Star.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/extras/XorShift1024Star","k":"def"},
{"l":"spire/random/rng/extras/XorShift1024Star$.html","n":"XorShift1024Star","t":"object XorShift1024Star extends GeneratorCompanion[XorShift1024Star, (Array[Long], Int)]","d":"spire/random/rng/extras/XorShift1024Star$","k":"object"},
{"l":"spire/random/rng/extras/XorShift1024Star$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): XorShift1024Star","d":"spire/random/rng/extras/XorShift1024Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift1024Star$.html","n":"fromSeed","t":"def fromSeed(seed: (Array[Long], Int)): XorShift1024Star","d":"spire/random/rng/extras/XorShift1024Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift1024Star$.html","n":"fromTime","t":"def fromTime(time: Long): XorShift1024Star","d":"spire/random/rng/extras/XorShift1024Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift1024Star$.html","n":"randomSeed","t":"def randomSeed(): (Array[Long], Int)","d":"spire/random/rng/extras/XorShift1024Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus.html","n":"XorShift128Plus","t":"class XorShift128Plus(var s0: Long, var s1: Long) extends LongBasedGenerator","d":"spire/random/rng/extras/XorShift128Plus","k":"class"},
{"l":"spire/random/rng/extras/XorShift128Plus.html","n":"copyInit","t":"def copyInit: XorShift128Plus","d":"spire/random/rng/extras/XorShift128Plus","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/extras/XorShift128Plus","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/extras/XorShift128Plus","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus$.html","n":"XorShift128Plus","t":"object XorShift128Plus extends GeneratorCompanion[XorShift128Plus, (Long, Long)]","d":"spire/random/rng/extras/XorShift128Plus$","k":"object"},
{"l":"spire/random/rng/extras/XorShift128Plus$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): XorShift128Plus","d":"spire/random/rng/extras/XorShift128Plus$","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus$.html","n":"fromSeed","t":"def fromSeed(seed: (Long, Long)): XorShift128Plus","d":"spire/random/rng/extras/XorShift128Plus$","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus$.html","n":"fromTime","t":"def fromTime(time: Long): XorShift128Plus","d":"spire/random/rng/extras/XorShift128Plus$","k":"def"},
{"l":"spire/random/rng/extras/XorShift128Plus$.html","n":"randomSeed","t":"def randomSeed(): (Long, Long)","d":"spire/random/rng/extras/XorShift128Plus$","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star.html","n":"XorShift64Star","t":"class XorShift64Star(var seed: Long) extends LongBasedGenerator","d":"spire/random/rng/extras/XorShift64Star","k":"class"},
{"l":"spire/random/rng/extras/XorShift64Star.html","n":"copyInit","t":"def copyInit: XorShift64Star","d":"spire/random/rng/extras/XorShift64Star","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star.html","n":"nextLong","t":"def nextLong(): Long","d":"spire/random/rng/extras/XorShift64Star","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star.html","n":"setSeedBytes","t":"def setSeedBytes(bytes: Array[Byte]): Unit","d":"spire/random/rng/extras/XorShift64Star","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star$.html","n":"XorShift64Star","t":"object XorShift64Star extends GeneratorCompanion[XorShift64Star, Long]","d":"spire/random/rng/extras/XorShift64Star$","k":"object"},
{"l":"spire/random/rng/extras/XorShift64Star$.html","n":"fromBytes","t":"def fromBytes(bytes: Array[Byte]): XorShift64Star","d":"spire/random/rng/extras/XorShift64Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star$.html","n":"fromSeed","t":"def fromSeed(seed: Long): XorShift64Star","d":"spire/random/rng/extras/XorShift64Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star$.html","n":"fromTime","t":"def fromTime(time: Long): XorShift64Star","d":"spire/random/rng/extras/XorShift64Star$","k":"def"},
{"l":"spire/random/rng/extras/XorShift64Star$.html","n":"randomSeed","t":"def randomSeed(): Long","d":"spire/random/rng/extras/XorShift64Star$","k":"def"},
{"l":"spire/scalacompat.html","n":"spire.scalacompat","t":"package spire.scalacompat","d":"spire/scalacompat","k":"package"},
{"l":"spire/scalacompat.html","n":"arrayBuilderMake","t":"def arrayBuilderMake[T](implicit tag: ClassTag[T]): ArrayBuilder[T]","d":"spire/scalacompat","k":"def"},
{"l":"spire/scalacompat/BuilderCompat.html","n":"BuilderCompat","t":"trait BuilderCompat[-A, +To] extends Builder[A, To]","d":"spire/scalacompat/BuilderCompat","k":"trait"},
{"l":"spire/scalacompat/ScalaOrderingWrapperCompat.html","n":"ScalaOrderingWrapperCompat","t":"trait ScalaOrderingWrapperCompat[A] extends Ordering[A]","d":"spire/scalacompat/ScalaOrderingWrapperCompat","k":"trait"},
{"l":"spire/std.html","n":"spire.std","t":"package spire.std","d":"spire/std","k":"package"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProductInstances","t":"trait AbGroupProductInstances","d":"spire/std/AbGroupProductInstances","k":"trait"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct10","t":"def AbGroupProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct11","t":"def AbGroupProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct12","t":"def AbGroupProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct13","t":"def AbGroupProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct14","t":"def AbGroupProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct15","t":"def AbGroupProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct16","t":"def AbGroupProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct17","t":"def AbGroupProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P], _structure17: CommutativeGroup[Q]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct18","t":"def AbGroupProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P], _structure17: CommutativeGroup[Q], _structure18: CommutativeGroup[R]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct19","t":"def AbGroupProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P], _structure17: CommutativeGroup[Q], _structure18: CommutativeGroup[R], _structure19: CommutativeGroup[S]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct2","t":"def AbGroupProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B]): CommutativeGroup[(A, B)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct20","t":"def AbGroupProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P], _structure17: CommutativeGroup[Q], _structure18: CommutativeGroup[R], _structure19: CommutativeGroup[S], _structure20: CommutativeGroup[T]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct21","t":"def AbGroupProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P], _structure17: CommutativeGroup[Q], _structure18: CommutativeGroup[R], _structure19: CommutativeGroup[S], _structure20: CommutativeGroup[T], _structure21: CommutativeGroup[U]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct22","t":"def AbGroupProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I], _structure10: CommutativeGroup[J], _structure11: CommutativeGroup[K], _structure12: CommutativeGroup[L], _structure13: CommutativeGroup[M], _structure14: CommutativeGroup[N], _structure15: CommutativeGroup[O], _structure16: CommutativeGroup[P], _structure17: CommutativeGroup[Q], _structure18: CommutativeGroup[R], _structure19: CommutativeGroup[S], _structure20: CommutativeGroup[T], _structure21: CommutativeGroup[U], _structure22: CommutativeGroup[V]): CommutativeGroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct3","t":"def AbGroupProduct3[A, B, C](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C]): CommutativeGroup[(A, B, C)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct4","t":"def AbGroupProduct4[A, B, C, D](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D]): CommutativeGroup[(A, B, C, D)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct5","t":"def AbGroupProduct5[A, B, C, D, E](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E]): CommutativeGroup[(A, B, C, D, E)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct6","t":"def AbGroupProduct6[A, B, C, D, E, F](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F]): CommutativeGroup[(A, B, C, D, E, F)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct7","t":"def AbGroupProduct7[A, B, C, D, E, F, G](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G]): CommutativeGroup[(A, B, C, D, E, F, G)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct8","t":"def AbGroupProduct8[A, B, C, D, E, F, G, H](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H]): CommutativeGroup[(A, B, C, D, E, F, G, H)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AbGroupProductInstances.html","n":"AbGroupProduct9","t":"def AbGroupProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: CommutativeGroup[A], _structure2: CommutativeGroup[B], _structure3: CommutativeGroup[C], _structure4: CommutativeGroup[D], _structure5: CommutativeGroup[E], _structure6: CommutativeGroup[F], _structure7: CommutativeGroup[G], _structure8: CommutativeGroup[H], _structure9: CommutativeGroup[I]): CommutativeGroup[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/AbGroupProductInstances","k":"def"},
{"l":"spire/std/AnyInstances.html","n":"AnyInstances","t":"trait AnyInstances extends BooleanInstances with CharInstances with ByteInstances with ShortInstances with IntInstances with LongInstances with FloatInstances with DoubleInstances with BigIntInstances with BigIntegerInstances with BigDecimalInstances with StringInstances with IterableInstances with ArrayInstances with SeqInstances with MapInstances with ProductInstances with OptionInstances with UnitInstances","d":"spire/std/AnyInstances","k":"trait"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"ArrayCoordinateSpace","t":"class ArrayCoordinateSpace[@specialized(Int, Long, Float, Double) A](val dimensions: Int)(implicit evidence$10: ClassTag[A], val scalar: Field[A]) extends CoordinateSpace[Array[A], A] with Serializable","d":"spire/std/ArrayCoordinateSpace","k":"class"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"axis","t":"def axis(i: Int): Array[A]","d":"spire/std/ArrayCoordinateSpace","k":"def"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"coord","t":"def coord(v: Array[A], i: Int): A","d":"spire/std/ArrayCoordinateSpace","k":"def"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"dimensions","t":"val dimensions: Int","d":"spire/std/ArrayCoordinateSpace","k":"val"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"negate","t":"def negate(x: Array[A]): Array[A]","d":"spire/std/ArrayCoordinateSpace","k":"def"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"plus","t":"def plus(x: Array[A], y: Array[A]): Array[A]","d":"spire/std/ArrayCoordinateSpace","k":"def"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"scalar","t":"val scalar: Field[A]","d":"spire/std/ArrayCoordinateSpace","k":"val"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"timesl","t":"def timesl(r: A, x: Array[A]): Array[A]","d":"spire/std/ArrayCoordinateSpace","k":"def"},
{"l":"spire/std/ArrayCoordinateSpace.html","n":"zero","t":"def zero: Array[A]","d":"spire/std/ArrayCoordinateSpace","k":"def"},
{"l":"spire/std/ArrayInstances.html","n":"ArrayInstances","t":"trait ArrayInstances extends ArrayInstances3","d":"spire/std/ArrayInstances","k":"trait"},
{"l":"spire/std/ArrayInstances.html","n":"ArrayMonoid","t":"def ArrayMonoid[@specialized A : ClassTag]: Monoid[Array[A]]","d":"spire/std/ArrayInstances","k":"def"},
{"l":"spire/std/ArrayInstances0.html","n":"ArrayInstances0","t":"trait ArrayInstances0","d":"spire/std/ArrayInstances0","k":"trait"},
{"l":"spire/std/ArrayInstances0.html","n":"ArrayCModule","t":"def ArrayCModule[@specialized(Int, Long, Float, Double) A : CommutativeRing]: CModule[Array[A], A]","d":"spire/std/ArrayInstances0","k":"def"},
{"l":"spire/std/ArrayInstances0.html","n":"NI0","t":"type NI0[A] = NotGiven[VectorSpace[Array[A], A]]","d":"spire/std/ArrayInstances0","k":"type"},
{"l":"spire/std/ArrayInstances1.html","n":"ArrayInstances1","t":"trait ArrayInstances1 extends ArrayInstances0","d":"spire/std/ArrayInstances1","k":"trait"},
{"l":"spire/std/ArrayInstances1.html","n":"ArrayEq","t":"def ArrayEq[@specialized A : Eq]: Eq[Array[A]]","d":"spire/std/ArrayInstances1","k":"def"},
{"l":"spire/std/ArrayInstances1.html","n":"ArrayVectorSpace","t":"def ArrayVectorSpace[@specialized(Int, Long, Float, Double) A : Field]: VectorSpace[Array[A], A]","d":"spire/std/ArrayInstances1","k":"def"},
{"l":"spire/std/ArrayInstances1.html","n":"NI1","t":"type NI1[A] = NotGiven[NormedVectorSpace[Array[A], A]]","d":"spire/std/ArrayInstances1","k":"type"},
{"l":"spire/std/ArrayInstances2.html","n":"ArrayInstances2","t":"trait ArrayInstances2 extends ArrayInstances1","d":"spire/std/ArrayInstances2","k":"trait"},
{"l":"spire/std/ArrayInstances2.html","n":"ArrayInnerProductSpace","t":"def ArrayInnerProductSpace[@specialized(Float, Double) A : ClassTag]: InnerProductSpace[Array[A], A]","d":"spire/std/ArrayInstances2","k":"def"},
{"l":"spire/std/ArrayInstances2.html","n":"ArrayOrder","t":"def ArrayOrder[@specialized A : Order]: Order[Array[A]]","d":"spire/std/ArrayInstances2","k":"def"},
{"l":"spire/std/ArrayInstances3.html","n":"ArrayInstances3","t":"trait ArrayInstances3 extends ArrayInstances2","d":"spire/std/ArrayInstances3","k":"trait"},
{"l":"spire/std/ArrayInstances3.html","n":"ArrayNormedVectorSpace","t":"def ArrayNormedVectorSpace[@specialized(Float, Double) A : ClassTag]: NormedVectorSpace[Array[A], A]","d":"spire/std/ArrayInstances3","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"ArraySupport","t":"object ArraySupport","d":"spire/std/ArraySupport$","k":"object"},
{"l":"spire/std/ArraySupport$.html","n":"axis","t":"def axis[@specialized(Float, Double) A](dimensions: Int, i: Int)(implicit ct: ClassTag[A], sc: Rig[A]): Array[A]","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"compare","t":"def compare[@specialized A : Order](x: Array[A], y: Array[A]): Int","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"concat","t":"def concat[@specialized A : ClassTag](x: Array[A], y: Array[A]): Array[A]","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"dot","t":"def dot[@specialized(Int, Long, Float, Double) A](x: Array[A], y: Array[A])(implicit sc: Rig[A]): A","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"eqv","t":"def eqv[@specialized A : Eq](x: Array[A], y: Array[A]): Boolean","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"minus","t":"def minus[@specialized(Int, Long, Float, Double) A : AdditiveGroup](x: Array[A], y: Array[A]): Array[A]","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"negate","t":"def negate[@specialized(Int, Long, Float, Double) A : Ring](x: Array[A]): Array[A]","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"plus","t":"def plus[@specialized(Int, Long, Float, Double) A : AdditiveMonoid](x: Array[A], y: Array[A]): Array[A]","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"timesl","t":"def timesl[@specialized(Int, Long, Float, Double) A : MultiplicativeSemigroup](r: A, x: Array[A]): Array[A]","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"vectorCompare","t":"def vectorCompare[@specialized A](x: Array[A], y: Array[A])(implicit ev: Order[A], sc: AdditiveMonoid[A]): Int","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArraySupport$.html","n":"vectorEqv","t":"def vectorEqv[@specialized A](x: Array[A], y: Array[A])(implicit ev: Eq[A], sc: AdditiveMonoid[A]): Boolean","d":"spire/std/ArraySupport$","k":"def"},
{"l":"spire/std/ArrayVectorEq.html","n":"ArrayVectorEq","t":"class ArrayVectorEq[@specialized(Int, Long, Float, Double) A] extends Eq[Array[A]] with Serializable","d":"spire/std/ArrayVectorEq","k":"class"},
{"l":"spire/std/ArrayVectorEq.html","n":"eqv","t":"def eqv(x: Array[A], y: Array[A]): Boolean","d":"spire/std/ArrayVectorEq","k":"def"},
{"l":"spire/std/ArrayVectorOrder.html","n":"ArrayVectorOrder","t":"class ArrayVectorOrder[@specialized(Int, Long, Float, Double) A] extends Order[Array[A]] with Serializable","d":"spire/std/ArrayVectorOrder","k":"class"},
{"l":"spire/std/ArrayVectorOrder.html","n":"compare","t":"def compare(x: Array[A], y: Array[A]): Int","d":"spire/std/ArrayVectorOrder","k":"def"},
{"l":"spire/std/BigDecimalAlgebra.html","n":"BigDecimalAlgebra","t":"class BigDecimalAlgebra extends BigDecimalIsField with BigDecimalIsNRoot with BigDecimalIsReal with Serializable","d":"spire/std/BigDecimalAlgebra","k":"class"},
{"l":"spire/std/BigDecimalInstances.html","n":"BigDecimalInstances","t":"trait BigDecimalInstances","d":"spire/std/BigDecimalInstances","k":"trait"},
{"l":"spire/std/BigDecimalInstances.html","n":"BigDecimalAlgebra","t":"val BigDecimalAlgebra: Field[BigDecimal] & NRoot[BigDecimal] & IsRational[BigDecimal] & forCommutativeRing[BigDecimal] & Signed[BigDecimal] & Order[BigDecimal]","d":"spire/std/BigDecimalInstances","k":"val"},
{"l":"spire/std/BigDecimalInstances.html","n":"BigDecimalIsTrig","t":"def BigDecimalIsTrig(implicit mc: MathContext): BigDecimalIsTrig","d":"spire/std/BigDecimalInstances","k":"def"},
{"l":"spire/std/BigDecimalInstances.html","n":"BigDecimalTag","t":"val BigDecimalTag: NumberTag[BigDecimal]","d":"spire/std/BigDecimalInstances","k":"val"},
{"l":"spire/std/BigDecimalIsField.html","n":"BigDecimalIsField","t":"trait BigDecimalIsField extends Field[BigDecimal]","d":"spire/std/BigDecimalIsField","k":"trait"},
{"l":"spire/std/BigDecimalIsField.html","n":"div","t":"def div(a: BigDecimal, b: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsField","k":"def"},
{"l":"spire/std/BigDecimalIsField.html","n":"negate","t":"def negate(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsField","k":"def"},
{"l":"spire/std/BigDecimalIsField.html","n":"one","t":"val one: BigDecimal","d":"spire/std/BigDecimalIsField","k":"val"},
{"l":"spire/std/BigDecimalIsField.html","n":"plus","t":"def plus(a: BigDecimal, b: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsField","k":"def"},
{"l":"spire/std/BigDecimalIsField.html","n":"zero","t":"val zero: BigDecimal","d":"spire/std/BigDecimalIsField","k":"val"},
{"l":"spire/std/BigDecimalIsNRoot.html","n":"BigDecimalIsNRoot","t":"trait BigDecimalIsNRoot extends NRoot[BigDecimal]","d":"spire/std/BigDecimalIsNRoot","k":"trait"},
{"l":"spire/std/BigDecimalIsNRoot.html","n":"fpow","t":"def fpow(a: BigDecimal, b: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsNRoot","k":"def"},
{"l":"spire/std/BigDecimalIsNRoot.html","n":"nroot","t":"def nroot(a: BigDecimal, k: Int): BigDecimal","d":"spire/std/BigDecimalIsNRoot","k":"def"},
{"l":"spire/std/BigDecimalIsReal.html","n":"BigDecimalIsReal","t":"trait BigDecimalIsReal extends IsRational[BigDecimal] with BigDecimalTruncatedDivision","d":"spire/std/BigDecimalIsReal","k":"trait"},
{"l":"spire/std/BigDecimalIsReal.html","n":"ceil","t":"def ceil(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsReal","k":"def"},
{"l":"spire/std/BigDecimalIsReal.html","n":"floor","t":"def floor(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsReal","k":"def"},
{"l":"spire/std/BigDecimalIsReal.html","n":"isWhole","t":"def isWhole(a: BigDecimal): Boolean","d":"spire/std/BigDecimalIsReal","k":"def"},
{"l":"spire/std/BigDecimalIsReal.html","n":"round","t":"def round(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsReal","k":"def"},
{"l":"spire/std/BigDecimalIsReal.html","n":"toDouble","t":"def toDouble(x: BigDecimal): Double","d":"spire/std/BigDecimalIsReal","k":"def"},
{"l":"spire/std/BigDecimalIsReal.html","n":"toRational","t":"def toRational(a: BigDecimal): Rational","d":"spire/std/BigDecimalIsReal","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"BigDecimalIsTrig","t":"class BigDecimalIsTrig(mc: MathContext) extends Trig[BigDecimal] with Serializable","d":"spire/std/BigDecimalIsTrig","k":"class"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"acos","t":"def acos(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"asin","t":"def asin(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"atan","t":"def atan(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"atan2","t":"def atan2(y: BigDecimal, x: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"bits","t":"val bits: Int","d":"spire/std/BigDecimalIsTrig","k":"val"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"cos","t":"def cos(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"cosh","t":"def cosh(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"degreesPerRadian","t":"val degreesPerRadian: BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"val"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"e","t":"val e: BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"val"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"exp","t":"def exp(x: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"expm1","t":"def expm1(x: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"fromReal","t":"def fromReal(r: Real): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"log","t":"def log(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"log1p","t":"def log1p(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"pi","t":"val pi: BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"val"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"sin","t":"def sin(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"sinh","t":"def sinh(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"tan","t":"def tan(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"tanh","t":"def tanh(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"toDegrees","t":"def toDegrees(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalIsTrig.html","n":"toRadians","t":"def toRadians(a: BigDecimal): BigDecimal","d":"spire/std/BigDecimalIsTrig","k":"def"},
{"l":"spire/std/BigDecimalOrder.html","n":"BigDecimalOrder","t":"trait BigDecimalOrder extends Order[BigDecimal]","d":"spire/std/BigDecimalOrder","k":"trait"},
{"l":"spire/std/BigDecimalOrder.html","n":"compare","t":"def compare(x: BigDecimal, y: BigDecimal): Int","d":"spire/std/BigDecimalOrder","k":"def"},
{"l":"spire/std/BigDecimalSigned.html","n":"BigDecimalSigned","t":"trait BigDecimalSigned extends Signed[BigDecimal] with BigDecimalOrder","d":"spire/std/BigDecimalSigned","k":"trait"},
{"l":"spire/std/BigDecimalSigned.html","n":"order","t":"def order: Order[BigDecimal]","d":"spire/std/BigDecimalSigned","k":"def"},
{"l":"spire/std/BigDecimalTruncatedDivision.html","n":"BigDecimalTruncatedDivision","t":"trait BigDecimalTruncatedDivision extends forCommutativeRing[BigDecimal] with BigDecimalSigned","d":"spire/std/BigDecimalTruncatedDivision","k":"trait"},
{"l":"spire/std/BigDecimalTruncatedDivision.html","n":"tmod","t":"def tmod(a: BigDecimal, b: BigDecimal): BigDecimal","d":"spire/std/BigDecimalTruncatedDivision","k":"def"},
{"l":"spire/std/BigDecimalTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(a: BigDecimal): Opt[BigInt]","d":"spire/std/BigDecimalTruncatedDivision","k":"def"},
{"l":"spire/std/BigDecimalTruncatedDivision.html","n":"tquot","t":"def tquot(a: BigDecimal, b: BigDecimal): BigDecimal","d":"spire/std/BigDecimalTruncatedDivision","k":"def"},
{"l":"spire/std/BigIntAlgebra.html","n":"BigIntAlgebra","t":"class BigIntAlgebra extends BigIntIsEuclideanRing with BigIntIsNRoot with BigIntIsMetricSpace with BigIntIsReal with Serializable","d":"spire/std/BigIntAlgebra","k":"class"},
{"l":"spire/std/BigIntInstances.html","n":"BigIntInstances","t":"trait BigIntInstances","d":"spire/std/BigIntInstances","k":"trait"},
{"l":"spire/std/BigIntInstances.html","n":"BigIntAlgebra","t":"val BigIntAlgebra: EuclideanRing[BigInt] & NRoot[BigInt] & MetricSpace[BigInt, BigInt] & IsIntegral[BigInt] & forCommutativeRing[BigInt] & Signed[BigInt] & Order[BigInt]","d":"spire/std/BigIntInstances","k":"val"},
{"l":"spire/std/BigIntInstances.html","n":"BigIntTag","t":"val BigIntTag: NumberTag[BigInt]","d":"spire/std/BigIntInstances","k":"val"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"BigIntIsEuclideanRing","t":"trait BigIntIsEuclideanRing extends EuclideanRing[BigInt]","d":"spire/std/BigIntIsEuclideanRing","k":"trait"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"emod","t":"def emod(a: BigInt, b: BigInt): BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"equot","t":"def equot(a: BigInt, b: BigInt): BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(a: BigInt): BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"negate","t":"def negate(a: BigInt): BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"one","t":"val one: BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"val"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"plus","t":"def plus(a: BigInt, b: BigInt): BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntIsEuclideanRing.html","n":"zero","t":"val zero: BigInt","d":"spire/std/BigIntIsEuclideanRing","k":"val"},
{"l":"spire/std/BigIntIsMetricSpace.html","n":"BigIntIsMetricSpace","t":"trait BigIntIsMetricSpace extends MetricSpace[BigInt, BigInt]","d":"spire/std/BigIntIsMetricSpace","k":"trait"},
{"l":"spire/std/BigIntIsMetricSpace.html","n":"distance","t":"def distance(v: BigInt, w: BigInt): BigInt","d":"spire/std/BigIntIsMetricSpace","k":"def"},
{"l":"spire/std/BigIntIsNRoot.html","n":"BigIntIsNRoot","t":"trait BigIntIsNRoot extends NRoot[BigInt]","d":"spire/std/BigIntIsNRoot","k":"trait"},
{"l":"spire/std/BigIntIsNRoot.html","n":"fpow","t":"def fpow(a: BigInt, b: BigInt): BigInt","d":"spire/std/BigIntIsNRoot","k":"def"},
{"l":"spire/std/BigIntIsNRoot.html","n":"nroot","t":"def nroot(a: BigInt, k: Int): BigInt","d":"spire/std/BigIntIsNRoot","k":"def"},
{"l":"spire/std/BigIntIsReal.html","n":"BigIntIsReal","t":"trait BigIntIsReal extends IsIntegral[BigInt] with BigIntTruncatedDivision with Serializable","d":"spire/std/BigIntIsReal","k":"trait"},
{"l":"spire/std/BigIntIsReal.html","n":"toBigInt","t":"def toBigInt(n: BigInt): BigInt","d":"spire/std/BigIntIsReal","k":"def"},
{"l":"spire/std/BigIntIsReal.html","n":"toDouble","t":"def toDouble(n: BigInt): Double","d":"spire/std/BigIntIsReal","k":"def"},
{"l":"spire/std/BigIntOrder.html","n":"BigIntOrder","t":"trait BigIntOrder extends Order[BigInt]","d":"spire/std/BigIntOrder","k":"trait"},
{"l":"spire/std/BigIntOrder.html","n":"compare","t":"def compare(x: BigInt, y: BigInt): Int","d":"spire/std/BigIntOrder","k":"def"},
{"l":"spire/std/BigIntSigned.html","n":"BigIntSigned","t":"trait BigIntSigned extends Signed[BigInt] with BigIntOrder","d":"spire/std/BigIntSigned","k":"trait"},
{"l":"spire/std/BigIntSigned.html","n":"order","t":"def order: Order[BigInt]","d":"spire/std/BigIntSigned","k":"def"},
{"l":"spire/std/BigIntTruncatedDivision.html","n":"BigIntTruncatedDivision","t":"trait BigIntTruncatedDivision extends forCommutativeRing[BigInt] with BigIntSigned","d":"spire/std/BigIntTruncatedDivision","k":"trait"},
{"l":"spire/std/BigIntTruncatedDivision.html","n":"tmod","t":"def tmod(a: BigInt, b: BigInt): BigInt","d":"spire/std/BigIntTruncatedDivision","k":"def"},
{"l":"spire/std/BigIntTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(x: BigInt): Opt[BigInt]","d":"spire/std/BigIntTruncatedDivision","k":"def"},
{"l":"spire/std/BigIntTruncatedDivision.html","n":"tquot","t":"def tquot(a: BigInt, b: BigInt): BigInt","d":"spire/std/BigIntTruncatedDivision","k":"def"},
{"l":"spire/std/BigIntegerAlgebra.html","n":"BigIntegerAlgebra","t":"class BigIntegerAlgebra extends BigIntegerIsEuclideanRing with BigIntegerIsNRoot with BigIntegerIsMetricSpace with BigIntegerIsReal with Serializable","d":"spire/std/BigIntegerAlgebra","k":"class"},
{"l":"spire/std/BigIntegerInstances.html","n":"BigIntegerInstances","t":"trait BigIntegerInstances","d":"spire/std/BigIntegerInstances","k":"trait"},
{"l":"spire/std/BigIntegerInstances.html","n":"BigIntegerAlgebra","t":"val BigIntegerAlgebra: EuclideanRing[BigInteger] & NRoot[BigInteger] & MetricSpace[BigInteger, BigInteger] & IsIntegral[BigInteger] & forCommutativeRing[BigInteger] & Signed[BigInteger] & Order[BigInteger]","d":"spire/std/BigIntegerInstances","k":"val"},
{"l":"spire/std/BigIntegerInstances.html","n":"BigIntegerTag","t":"val BigIntegerTag: NumberTag[BigInteger]","d":"spire/std/BigIntegerInstances","k":"val"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"BigIntegerIsEuclideanRing","t":"trait BigIntegerIsEuclideanRing extends EuclideanRing[BigInteger]","d":"spire/std/BigIntegerIsEuclideanRing","k":"trait"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"emod","t":"def emod(a: BigInteger, b: BigInteger): BigInteger","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"equot","t":"def equot(a: BigInteger, b: BigInteger): BigInteger","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(a: BigInteger): BigInt","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"negate","t":"def negate(a: BigInteger): BigInteger","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"one","t":"def one: BigInteger","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"plus","t":"def plus(a: BigInteger, b: BigInteger): BigInteger","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsEuclideanRing.html","n":"zero","t":"def zero: BigInteger","d":"spire/std/BigIntegerIsEuclideanRing","k":"def"},
{"l":"spire/std/BigIntegerIsMetricSpace.html","n":"BigIntegerIsMetricSpace","t":"trait BigIntegerIsMetricSpace extends MetricSpace[BigInteger, BigInteger]","d":"spire/std/BigIntegerIsMetricSpace","k":"trait"},
{"l":"spire/std/BigIntegerIsMetricSpace.html","n":"distance","t":"def distance(v: BigInteger, w: BigInteger): BigInteger","d":"spire/std/BigIntegerIsMetricSpace","k":"def"},
{"l":"spire/std/BigIntegerIsNRoot.html","n":"BigIntegerIsNRoot","t":"trait BigIntegerIsNRoot extends NRoot[BigInteger]","d":"spire/std/BigIntegerIsNRoot","k":"trait"},
{"l":"spire/std/BigIntegerIsNRoot.html","n":"fpow","t":"def fpow(a: BigInteger, b: BigInteger): BigInteger","d":"spire/std/BigIntegerIsNRoot","k":"def"},
{"l":"spire/std/BigIntegerIsNRoot.html","n":"nroot","t":"def nroot(a: BigInteger, k: Int): BigInteger","d":"spire/std/BigIntegerIsNRoot","k":"def"},
{"l":"spire/std/BigIntegerIsReal.html","n":"BigIntegerIsReal","t":"trait BigIntegerIsReal extends IsIntegral[BigInteger] with BigIntegerTruncatedDivision with Serializable","d":"spire/std/BigIntegerIsReal","k":"trait"},
{"l":"spire/std/BigIntegerIsReal.html","n":"toBigInt","t":"def toBigInt(n: BigInteger): BigInt","d":"spire/std/BigIntegerIsReal","k":"def"},
{"l":"spire/std/BigIntegerIsReal.html","n":"toDouble","t":"def toDouble(n: BigInteger): Double","d":"spire/std/BigIntegerIsReal","k":"def"},
{"l":"spire/std/BigIntegerOrder.html","n":"BigIntegerOrder","t":"trait BigIntegerOrder extends Order[BigInteger]","d":"spire/std/BigIntegerOrder","k":"trait"},
{"l":"spire/std/BigIntegerOrder.html","n":"compare","t":"def compare(x: BigInteger, y: BigInteger): Int","d":"spire/std/BigIntegerOrder","k":"def"},
{"l":"spire/std/BigIntegerSigned.html","n":"BigIntegerSigned","t":"trait BigIntegerSigned extends Signed[BigInteger] with BigIntegerOrder","d":"spire/std/BigIntegerSigned","k":"trait"},
{"l":"spire/std/BigIntegerSigned.html","n":"order","t":"def order: Order[BigInteger]","d":"spire/std/BigIntegerSigned","k":"def"},
{"l":"spire/std/BigIntegerTruncatedDivision.html","n":"BigIntegerTruncatedDivision","t":"trait BigIntegerTruncatedDivision extends forCommutativeRing[BigInteger] with BigIntegerSigned","d":"spire/std/BigIntegerTruncatedDivision","k":"trait"},
{"l":"spire/std/BigIntegerTruncatedDivision.html","n":"tmod","t":"def tmod(a: BigInteger, b: BigInteger): BigInteger","d":"spire/std/BigIntegerTruncatedDivision","k":"def"},
{"l":"spire/std/BigIntegerTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(n: BigInteger): Opt[BigInt]","d":"spire/std/BigIntegerTruncatedDivision","k":"def"},
{"l":"spire/std/BigIntegerTruncatedDivision.html","n":"tquot","t":"def tquot(a: BigInteger, b: BigInteger): BigInteger","d":"spire/std/BigIntegerTruncatedDivision","k":"def"},
{"l":"spire/std/BooleanInstances.html","n":"BooleanInstances","t":"trait BooleanInstances","d":"spire/std/BooleanInstances","k":"trait"},
{"l":"spire/std/BooleanInstances.html","n":"BooleanStructure","t":"val BooleanStructure: Bool[Boolean] & CommutativeRig[Boolean] & Order[Boolean]","d":"spire/std/BooleanInstances","k":"val"},
{"l":"spire/std/BooleanIsBool.html","n":"BooleanIsBool","t":"trait BooleanIsBool extends Bool[Boolean]","d":"spire/std/BooleanIsBool","k":"trait"},
{"l":"spire/std/BooleanIsBool.html","n":"and","t":"def and(a: Boolean, b: Boolean): Boolean","d":"spire/std/BooleanIsBool","k":"def"},
{"l":"spire/std/BooleanIsBool.html","n":"complement","t":"def complement(a: Boolean): Boolean","d":"spire/std/BooleanIsBool","k":"def"},
{"l":"spire/std/BooleanIsBool.html","n":"one","t":"def one: Boolean","d":"spire/std/BooleanIsBool","k":"def"},
{"l":"spire/std/BooleanIsBool.html","n":"or","t":"def or(a: Boolean, b: Boolean): Boolean","d":"spire/std/BooleanIsBool","k":"def"},
{"l":"spire/std/BooleanIsBool.html","n":"zero","t":"def zero: Boolean","d":"spire/std/BooleanIsBool","k":"def"},
{"l":"spire/std/BooleanIsRig.html","n":"BooleanIsRig","t":"trait BooleanIsRig extends CommutativeRig[Boolean]","d":"spire/std/BooleanIsRig","k":"trait"},
{"l":"spire/std/BooleanIsRig.html","n":"one","t":"def one: Boolean","d":"spire/std/BooleanIsRig","k":"def"},
{"l":"spire/std/BooleanIsRig.html","n":"plus","t":"def plus(a: Boolean, b: Boolean): Boolean","d":"spire/std/BooleanIsRig","k":"def"},
{"l":"spire/std/BooleanIsRig.html","n":"zero","t":"def zero: Boolean","d":"spire/std/BooleanIsRig","k":"def"},
{"l":"spire/std/BooleanOrder.html","n":"BooleanOrder","t":"trait BooleanOrder extends Order[Boolean] with Serializable","d":"spire/std/BooleanOrder","k":"trait"},
{"l":"spire/std/BooleanOrder.html","n":"compare","t":"def compare(x: Boolean, y: Boolean): Int","d":"spire/std/BooleanOrder","k":"def"},
{"l":"spire/std/BooleanStructure.html","n":"BooleanStructure","t":"class BooleanStructure extends BooleanIsBool with BooleanIsRig with BooleanOrder with Serializable","d":"spire/std/BooleanStructure","k":"class"},
{"l":"spire/std/ByteAlgebra.html","n":"ByteAlgebra","t":"class ByteAlgebra extends ByteIsEuclideanRing with ByteIsReal with Serializable","d":"spire/std/ByteAlgebra","k":"class"},
{"l":"spire/std/ByteInstances.html","n":"ByteInstances","t":"trait ByteInstances","d":"spire/std/ByteInstances","k":"trait"},
{"l":"spire/std/ByteInstances.html","n":"ByteAlgebra","t":"val ByteAlgebra: EuclideanRing[Byte] & IsIntegral[Byte] & forCommutativeRing[Byte] & Signed[Byte] & Order[Byte]","d":"spire/std/ByteInstances","k":"val"},
{"l":"spire/std/ByteInstances.html","n":"ByteBitString","t":"val ByteBitString: BitString[Byte]","d":"spire/std/ByteInstances","k":"val"},
{"l":"spire/std/ByteInstances.html","n":"ByteTag","t":"val ByteTag: NumberTag[Byte]","d":"spire/std/ByteInstances","k":"val"},
{"l":"spire/std/ByteIsBitString.html","n":"ByteIsBitString","t":"class ByteIsBitString extends BitString[Byte] with Serializable","d":"spire/std/ByteIsBitString","k":"class"},
{"l":"spire/std/ByteIsBitString.html","n":"and","t":"def and(a: Byte, b: Byte): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"bitCount","t":"def bitCount(n: Byte): Int","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"complement","t":"def complement(a: Byte): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"highestOneBit","t":"def highestOneBit(n: Byte): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"leftShift","t":"def leftShift(n: Byte, i: Int): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"lowestOneBit","t":"def lowestOneBit(n: Byte): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"numberOfLeadingZeros","t":"def numberOfLeadingZeros(n: Byte): Int","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"numberOfTrailingZeros","t":"def numberOfTrailingZeros(n: Byte): Int","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"one","t":"def one: Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"or","t":"def or(a: Byte, b: Byte): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"rightShift","t":"def rightShift(n: Byte, i: Int): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"rotateLeft","t":"def rotateLeft(n: Byte, i: Int): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"rotateRight","t":"def rotateRight(n: Byte, i: Int): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"signed","t":"def signed: Boolean","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"signedRightShift","t":"def signedRightShift(n: Byte, i: Int): Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"toHexString","t":"def toHexString(n: Byte): String","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"width","t":"def width: Int","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsBitString.html","n":"zero","t":"def zero: Byte","d":"spire/std/ByteIsBitString","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"ByteIsEuclideanRing","t":"trait ByteIsEuclideanRing extends EuclideanRing[Byte]","d":"spire/std/ByteIsEuclideanRing","k":"trait"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"emod","t":"def emod(a: Byte, b: Byte): Byte","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"equot","t":"def equot(a: Byte, b: Byte): Byte","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(a: Byte): BigInt","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"negate","t":"def negate(a: Byte): Byte","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"one","t":"def one: Byte","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"plus","t":"def plus(a: Byte, b: Byte): Byte","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsEuclideanRing.html","n":"zero","t":"def zero: Byte","d":"spire/std/ByteIsEuclideanRing","k":"def"},
{"l":"spire/std/ByteIsNRoot.html","n":"ByteIsNRoot","t":"trait ByteIsNRoot extends NRoot[Byte]","d":"spire/std/ByteIsNRoot","k":"trait"},
{"l":"spire/std/ByteIsNRoot.html","n":"fpow","t":"def fpow(a: Byte, b: Byte): Byte","d":"spire/std/ByteIsNRoot","k":"def"},
{"l":"spire/std/ByteIsNRoot.html","n":"log","t":"def log(a: Byte): Byte","d":"spire/std/ByteIsNRoot","k":"def"},
{"l":"spire/std/ByteIsNRoot.html","n":"nroot","t":"def nroot(x: Byte, n: Int): Byte","d":"spire/std/ByteIsNRoot","k":"def"},
{"l":"spire/std/ByteIsReal.html","n":"ByteIsReal","t":"trait ByteIsReal extends IsIntegral[Byte] with ByteTruncatedDivision with ByteSigned","d":"spire/std/ByteIsReal","k":"trait"},
{"l":"spire/std/ByteIsReal.html","n":"toBigInt","t":"def toBigInt(n: Byte): BigInt","d":"spire/std/ByteIsReal","k":"def"},
{"l":"spire/std/ByteIsReal.html","n":"toDouble","t":"def toDouble(n: Byte): Double","d":"spire/std/ByteIsReal","k":"def"},
{"l":"spire/std/ByteOrder.html","n":"ByteOrder","t":"trait ByteOrder extends Order[Byte]","d":"spire/std/ByteOrder","k":"trait"},
{"l":"spire/std/ByteOrder.html","n":"compare","t":"def compare(x: Byte, y: Byte): Int","d":"spire/std/ByteOrder","k":"def"},
{"l":"spire/std/ByteSigned.html","n":"ByteSigned","t":"trait ByteSigned extends Signed[Byte] with ByteOrder","d":"spire/std/ByteSigned","k":"trait"},
{"l":"spire/std/ByteSigned.html","n":"order","t":"def order: Order[Byte]","d":"spire/std/ByteSigned","k":"def"},
{"l":"spire/std/ByteTruncatedDivision.html","n":"ByteTruncatedDivision","t":"trait ByteTruncatedDivision extends forCommutativeRing[Byte] with ByteSigned","d":"spire/std/ByteTruncatedDivision","k":"trait"},
{"l":"spire/std/ByteTruncatedDivision.html","n":"tmod","t":"def tmod(x: Byte, y: Byte): Byte","d":"spire/std/ByteTruncatedDivision","k":"def"},
{"l":"spire/std/ByteTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(x: Byte): Opt[BigInt]","d":"spire/std/ByteTruncatedDivision","k":"def"},
{"l":"spire/std/ByteTruncatedDivision.html","n":"tquot","t":"def tquot(x: Byte, y: Byte): Byte","d":"spire/std/ByteTruncatedDivision","k":"def"},
{"l":"spire/std/CharAlgebra.html","n":"CharAlgebra","t":"class CharAlgebra extends CharOrder with Serializable","d":"spire/std/CharAlgebra","k":"class"},
{"l":"spire/std/CharInstances.html","n":"CharInstances","t":"trait CharInstances","d":"spire/std/CharInstances","k":"trait"},
{"l":"spire/std/CharInstances.html","n":"CharAlgebra","t":"val CharAlgebra: Order[Char]","d":"spire/std/CharInstances","k":"val"},
{"l":"spire/std/CharOrder.html","n":"CharOrder","t":"trait CharOrder extends Order[Char]","d":"spire/std/CharOrder","k":"trait"},
{"l":"spire/std/CharOrder.html","n":"compare","t":"def compare(x: Char, y: Char): Int","d":"spire/std/CharOrder","k":"def"},
{"l":"spire/std/DoubleAlgebra.html","n":"DoubleAlgebra","t":"class DoubleAlgebra extends DoubleIsField with DoubleIsNRoot with DoubleIsTrig with DoubleIsReal with Serializable","d":"spire/std/DoubleAlgebra","k":"class"},
{"l":"spire/std/DoubleInstances.html","n":"DoubleInstances","t":"trait DoubleInstances","d":"spire/std/DoubleInstances","k":"trait"},
{"l":"spire/std/DoubleInstances.html","n":"DoubleAlgebra","t":"val DoubleAlgebra: Field[Double] & NRoot[Double] & Trig[Double] & IsRational[Double] & forCommutativeRing[Double] & Signed[Double] & Order[Double]","d":"spire/std/DoubleInstances","k":"val"},
{"l":"spire/std/DoubleInstances.html","n":"DoubleTag","t":"val DoubleTag: NumberTag[Double]","d":"spire/std/DoubleInstances","k":"val"},
{"l":"spire/std/DoubleIsField.html","n":"DoubleIsField","t":"trait DoubleIsField extends Field[Double]","d":"spire/std/DoubleIsField","k":"trait"},
{"l":"spire/std/DoubleIsField.html","n":"div","t":"def div(a: Double, b: Double): Double","d":"spire/std/DoubleIsField","k":"def"},
{"l":"spire/std/DoubleIsField.html","n":"negate","t":"def negate(a: Double): Double","d":"spire/std/DoubleIsField","k":"def"},
{"l":"spire/std/DoubleIsField.html","n":"one","t":"def one: Double","d":"spire/std/DoubleIsField","k":"def"},
{"l":"spire/std/DoubleIsField.html","n":"plus","t":"def plus(a: Double, b: Double): Double","d":"spire/std/DoubleIsField","k":"def"},
{"l":"spire/std/DoubleIsField.html","n":"zero","t":"def zero: Double","d":"spire/std/DoubleIsField","k":"def"},
{"l":"spire/std/DoubleIsNRoot.html","n":"DoubleIsNRoot","t":"trait DoubleIsNRoot extends NRoot[Double]","d":"spire/std/DoubleIsNRoot","k":"trait"},
{"l":"spire/std/DoubleIsNRoot.html","n":"fpow","t":"def fpow(a: Double, b: Double): Double","d":"spire/std/DoubleIsNRoot","k":"def"},
{"l":"spire/std/DoubleIsNRoot.html","n":"nroot","t":"def nroot(a: Double, k: Int): Double","d":"spire/std/DoubleIsNRoot","k":"def"},
{"l":"spire/std/DoubleIsReal.html","n":"DoubleIsReal","t":"trait DoubleIsReal extends IsRational[Double] with DoubleTruncatedDivision","d":"spire/std/DoubleIsReal","k":"trait"},
{"l":"spire/std/DoubleIsReal.html","n":"ceil","t":"def ceil(a: Double): Double","d":"spire/std/DoubleIsReal","k":"def"},
{"l":"spire/std/DoubleIsReal.html","n":"floor","t":"def floor(a: Double): Double","d":"spire/std/DoubleIsReal","k":"def"},
{"l":"spire/std/DoubleIsReal.html","n":"isWhole","t":"def isWhole(a: Double): Boolean","d":"spire/std/DoubleIsReal","k":"def"},
{"l":"spire/std/DoubleIsReal.html","n":"round","t":"def round(a: Double): Double","d":"spire/std/DoubleIsReal","k":"def"},
{"l":"spire/std/DoubleIsReal.html","n":"toDouble","t":"def toDouble(x: Double): Double","d":"spire/std/DoubleIsReal","k":"def"},
{"l":"spire/std/DoubleIsReal.html","n":"toRational","t":"def toRational(a: Double): Rational","d":"spire/std/DoubleIsReal","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"DoubleIsTrig","t":"trait DoubleIsTrig extends Trig[Double]","d":"spire/std/DoubleIsTrig","k":"trait"},
{"l":"spire/std/DoubleIsTrig.html","n":"acos","t":"def acos(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"asin","t":"def asin(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"atan","t":"def atan(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"atan2","t":"def atan2(y: Double, x: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"cos","t":"def cos(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"cosh","t":"def cosh(x: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"e","t":"def e: Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"exp","t":"def exp(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"expm1","t":"def expm1(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"log","t":"def log(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"log1p","t":"def log1p(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"pi","t":"def pi: Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"sin","t":"def sin(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"sinh","t":"def sinh(x: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"tan","t":"def tan(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"tanh","t":"def tanh(x: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"toDegrees","t":"def toDegrees(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleIsTrig.html","n":"toRadians","t":"def toRadians(a: Double): Double","d":"spire/std/DoubleIsTrig","k":"def"},
{"l":"spire/std/DoubleOrder.html","n":"DoubleOrder","t":"trait DoubleOrder extends Order[Double]","d":"spire/std/DoubleOrder","k":"trait"},
{"l":"spire/std/DoubleOrder.html","n":"compare","t":"def compare(x: Double, y: Double): Int","d":"spire/std/DoubleOrder","k":"def"},
{"l":"spire/std/DoubleSigned.html","n":"DoubleSigned","t":"trait DoubleSigned extends Signed[Double] with DoubleOrder","d":"spire/std/DoubleSigned","k":"trait"},
{"l":"spire/std/DoubleSigned.html","n":"order","t":"def order: Order[Double]","d":"spire/std/DoubleSigned","k":"def"},
{"l":"spire/std/DoubleTruncatedDivision.html","n":"DoubleTruncatedDivision","t":"trait DoubleTruncatedDivision extends forCommutativeRing[Double] with DoubleSigned","d":"spire/std/DoubleTruncatedDivision","k":"trait"},
{"l":"spire/std/DoubleTruncatedDivision.html","n":"tmod","t":"def tmod(a: Double, b: Double): Double","d":"spire/std/DoubleTruncatedDivision","k":"def"},
{"l":"spire/std/DoubleTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(a: Double): Opt[BigInt]","d":"spire/std/DoubleTruncatedDivision","k":"def"},
{"l":"spire/std/DoubleTruncatedDivision.html","n":"tquot","t":"def tquot(a: Double, b: Double): Double","d":"spire/std/DoubleTruncatedDivision","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProductInstances","t":"trait EqProductInstances","d":"spire/std/EqProductInstances","k":"trait"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct10","t":"def EqProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J]): Eq[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct11","t":"def EqProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K]): Eq[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct12","t":"def EqProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct13","t":"def EqProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct14","t":"def EqProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct15","t":"def EqProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct16","t":"def EqProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct17","t":"def EqProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct18","t":"def EqProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct19","t":"def EqProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct2","t":"def EqProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Eq[A], _structure2: Eq[B]): Eq[(A, B)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct20","t":"def EqProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S], _structure20: Eq[T]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct21","t":"def EqProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S], _structure20: Eq[T], _structure21: Eq[U]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct22","t":"def EqProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I], _structure10: Eq[J], _structure11: Eq[K], _structure12: Eq[L], _structure13: Eq[M], _structure14: Eq[N], _structure15: Eq[O], _structure16: Eq[P], _structure17: Eq[Q], _structure18: Eq[R], _structure19: Eq[S], _structure20: Eq[T], _structure21: Eq[U], _structure22: Eq[V]): Eq[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct3","t":"def EqProduct3[A, B, C](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C]): Eq[(A, B, C)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct4","t":"def EqProduct4[A, B, C, D](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D]): Eq[(A, B, C, D)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct5","t":"def EqProduct5[A, B, C, D, E](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E]): Eq[(A, B, C, D, E)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct6","t":"def EqProduct6[A, B, C, D, E, F](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F]): Eq[(A, B, C, D, E, F)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct7","t":"def EqProduct7[A, B, C, D, E, F, G](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G]): Eq[(A, B, C, D, E, F, G)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct8","t":"def EqProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H]): Eq[(A, B, C, D, E, F, G, H)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/EqProductInstances.html","n":"EqProduct9","t":"def EqProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Eq[A], _structure2: Eq[B], _structure3: Eq[C], _structure4: Eq[D], _structure5: Eq[E], _structure6: Eq[F], _structure7: Eq[G], _structure8: Eq[H], _structure9: Eq[I]): Eq[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/EqProductInstances","k":"def"},
{"l":"spire/std/FloatAlgebra.html","n":"FloatAlgebra","t":"class FloatAlgebra extends FloatIsField with FloatIsNRoot with FloatIsTrig with FloatIsReal with Serializable","d":"spire/std/FloatAlgebra","k":"class"},
{"l":"spire/std/FloatInstances.html","n":"FloatInstances","t":"trait FloatInstances","d":"spire/std/FloatInstances","k":"trait"},
{"l":"spire/std/FloatInstances.html","n":"FloatAlgebra","t":"val FloatAlgebra: Field[Float] & NRoot[Float] & Trig[Float] & IsRational[Float] & Order[Float]","d":"spire/std/FloatInstances","k":"val"},
{"l":"spire/std/FloatInstances.html","n":"FloatTag","t":"val FloatTag: NumberTag[Float]","d":"spire/std/FloatInstances","k":"val"},
{"l":"spire/std/FloatIsField.html","n":"FloatIsField","t":"trait FloatIsField extends Field[Float]","d":"spire/std/FloatIsField","k":"trait"},
{"l":"spire/std/FloatIsField.html","n":"div","t":"def div(a: Float, b: Float): Float","d":"spire/std/FloatIsField","k":"def"},
{"l":"spire/std/FloatIsField.html","n":"negate","t":"def negate(a: Float): Float","d":"spire/std/FloatIsField","k":"def"},
{"l":"spire/std/FloatIsField.html","n":"one","t":"def one: Float","d":"spire/std/FloatIsField","k":"def"},
{"l":"spire/std/FloatIsField.html","n":"plus","t":"def plus(a: Float, b: Float): Float","d":"spire/std/FloatIsField","k":"def"},
{"l":"spire/std/FloatIsField.html","n":"zero","t":"def zero: Float","d":"spire/std/FloatIsField","k":"def"},
{"l":"spire/std/FloatIsNRoot.html","n":"FloatIsNRoot","t":"trait FloatIsNRoot extends NRoot[Float]","d":"spire/std/FloatIsNRoot","k":"trait"},
{"l":"spire/std/FloatIsNRoot.html","n":"fpow","t":"def fpow(a: Float, b: Float): Float","d":"spire/std/FloatIsNRoot","k":"def"},
{"l":"spire/std/FloatIsNRoot.html","n":"nroot","t":"def nroot(a: Float, k: Int): Float","d":"spire/std/FloatIsNRoot","k":"def"},
{"l":"spire/std/FloatIsReal.html","n":"FloatIsReal","t":"trait FloatIsReal extends IsRational[Float] with FloatTruncatedDivision","d":"spire/std/FloatIsReal","k":"trait"},
{"l":"spire/std/FloatIsReal.html","n":"ceil","t":"def ceil(a: Float): Float","d":"spire/std/FloatIsReal","k":"def"},
{"l":"spire/std/FloatIsReal.html","n":"floor","t":"def floor(a: Float): Float","d":"spire/std/FloatIsReal","k":"def"},
{"l":"spire/std/FloatIsReal.html","n":"isWhole","t":"def isWhole(a: Float): Boolean","d":"spire/std/FloatIsReal","k":"def"},
{"l":"spire/std/FloatIsReal.html","n":"round","t":"def round(a: Float): Float","d":"spire/std/FloatIsReal","k":"def"},
{"l":"spire/std/FloatIsReal.html","n":"toDouble","t":"def toDouble(x: Float): Double","d":"spire/std/FloatIsReal","k":"def"},
{"l":"spire/std/FloatIsReal.html","n":"toRational","t":"def toRational(a: Float): Rational","d":"spire/std/FloatIsReal","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"FloatIsTrig","t":"trait FloatIsTrig extends Trig[Float]","d":"spire/std/FloatIsTrig","k":"trait"},
{"l":"spire/std/FloatIsTrig.html","n":"acos","t":"def acos(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"asin","t":"def asin(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"atan","t":"def atan(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"atan2","t":"def atan2(y: Float, x: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"cos","t":"def cos(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"cosh","t":"def cosh(x: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"e","t":"def e: Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"exp","t":"def exp(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"expm1","t":"def expm1(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"log","t":"def log(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"log1p","t":"def log1p(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"pi","t":"def pi: Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"sin","t":"def sin(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"sinh","t":"def sinh(x: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"tan","t":"def tan(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"tanh","t":"def tanh(x: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"toDegrees","t":"def toDegrees(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatIsTrig.html","n":"toRadians","t":"def toRadians(a: Float): Float","d":"spire/std/FloatIsTrig","k":"def"},
{"l":"spire/std/FloatOrder.html","n":"FloatOrder","t":"trait FloatOrder extends Order[Float]","d":"spire/std/FloatOrder","k":"trait"},
{"l":"spire/std/FloatOrder.html","n":"compare","t":"def compare(x: Float, y: Float): Int","d":"spire/std/FloatOrder","k":"def"},
{"l":"spire/std/FloatSigned.html","n":"FloatSigned","t":"trait FloatSigned extends Signed[Float] with FloatOrder","d":"spire/std/FloatSigned","k":"trait"},
{"l":"spire/std/FloatTruncatedDivision.html","n":"FloatTruncatedDivision","t":"trait FloatTruncatedDivision extends forCommutativeRing[Float] with FloatSigned","d":"spire/std/FloatTruncatedDivision","k":"trait"},
{"l":"spire/std/FloatTruncatedDivision.html","n":"order","t":"def order: Order[Float]","d":"spire/std/FloatTruncatedDivision","k":"def"},
{"l":"spire/std/FloatTruncatedDivision.html","n":"tmod","t":"def tmod(a: Float, b: Float): Float","d":"spire/std/FloatTruncatedDivision","k":"def"},
{"l":"spire/std/FloatTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(a: Float): Opt[BigInt]","d":"spire/std/FloatTruncatedDivision","k":"def"},
{"l":"spire/std/FloatTruncatedDivision.html","n":"tquot","t":"def tquot(a: Float, b: Float): Float","d":"spire/std/FloatTruncatedDivision","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProductInstances","t":"trait GroupProductInstances","d":"spire/std/GroupProductInstances","k":"trait"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct10","t":"def GroupProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J]): Group[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct11","t":"def GroupProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K]): Group[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct12","t":"def GroupProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L]): Group[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct13","t":"def GroupProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct14","t":"def GroupProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct15","t":"def GroupProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct16","t":"def GroupProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct17","t":"def GroupProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct18","t":"def GroupProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct19","t":"def GroupProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct2","t":"def GroupProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Group[A], _structure2: Group[B]): Group[(A, B)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct20","t":"def GroupProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S], _structure20: Group[T]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct21","t":"def GroupProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S], _structure20: Group[T], _structure21: Group[U]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct22","t":"def GroupProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I], _structure10: Group[J], _structure11: Group[K], _structure12: Group[L], _structure13: Group[M], _structure14: Group[N], _structure15: Group[O], _structure16: Group[P], _structure17: Group[Q], _structure18: Group[R], _structure19: Group[S], _structure20: Group[T], _structure21: Group[U], _structure22: Group[V]): Group[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct3","t":"def GroupProduct3[A, B, C](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C]): Group[(A, B, C)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct4","t":"def GroupProduct4[A, B, C, D](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D]): Group[(A, B, C, D)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct5","t":"def GroupProduct5[A, B, C, D, E](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E]): Group[(A, B, C, D, E)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct6","t":"def GroupProduct6[A, B, C, D, E, F](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F]): Group[(A, B, C, D, E, F)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct7","t":"def GroupProduct7[A, B, C, D, E, F, G](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G]): Group[(A, B, C, D, E, F, G)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct8","t":"def GroupProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H]): Group[(A, B, C, D, E, F, G, H)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/GroupProductInstances.html","n":"GroupProduct9","t":"def GroupProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Group[A], _structure2: Group[B], _structure3: Group[C], _structure4: Group[D], _structure5: Group[E], _structure6: Group[F], _structure7: Group[G], _structure8: Group[H], _structure9: Group[I]): Group[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/GroupProductInstances","k":"def"},
{"l":"spire/std/IntAlgebra.html","n":"IntAlgebra","t":"class IntAlgebra extends IntIsEuclideanRing with IntIsNRoot with IntIsReal with Serializable","d":"spire/std/IntAlgebra","k":"class"},
{"l":"spire/std/IntInstances.html","n":"IntInstances","t":"trait IntInstances","d":"spire/std/IntInstances","k":"trait"},
{"l":"spire/std/IntInstances.html","n":"IntAlgebra","t":"val IntAlgebra: EuclideanRing[Int] & NRoot[Int] & IsIntegral[Int] & forCommutativeRing[Int] & Signed[Int] & Order[Int]","d":"spire/std/IntInstances","k":"val"},
{"l":"spire/std/IntInstances.html","n":"IntBitString","t":"val IntBitString: BitString[Int]","d":"spire/std/IntInstances","k":"val"},
{"l":"spire/std/IntInstances.html","n":"IntTag","t":"val IntTag: NumberTag[Int]","d":"spire/std/IntInstances","k":"val"},
{"l":"spire/std/IntIsBitString.html","n":"IntIsBitString","t":"class IntIsBitString extends BitString[Int] with Serializable","d":"spire/std/IntIsBitString","k":"class"},
{"l":"spire/std/IntIsBitString.html","n":"and","t":"def and(a: Int, b: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"bitCount","t":"def bitCount(n: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"complement","t":"def complement(a: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"highestOneBit","t":"def highestOneBit(n: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"leftShift","t":"def leftShift(n: Int, i: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"lowestOneBit","t":"def lowestOneBit(n: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"numberOfLeadingZeros","t":"def numberOfLeadingZeros(n: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"numberOfTrailingZeros","t":"def numberOfTrailingZeros(n: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"one","t":"def one: Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"or","t":"def or(a: Int, b: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"rightShift","t":"def rightShift(n: Int, i: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"rotateLeft","t":"def rotateLeft(n: Int, i: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"rotateRight","t":"def rotateRight(n: Int, i: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"signed","t":"def signed: Boolean","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"signedRightShift","t":"def signedRightShift(n: Int, i: Int): Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"toHexString","t":"def toHexString(n: Int): String","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"width","t":"def width: Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsBitString.html","n":"zero","t":"def zero: Int","d":"spire/std/IntIsBitString","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"IntIsEuclideanRing","t":"trait IntIsEuclideanRing extends EuclideanRing[Int]","d":"spire/std/IntIsEuclideanRing","k":"trait"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"emod","t":"def emod(a: Int, b: Int): Int","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"equot","t":"def equot(a: Int, b: Int): Int","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(a: Int): BigInt","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"negate","t":"def negate(a: Int): Int","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"one","t":"def one: Int","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"plus","t":"def plus(a: Int, b: Int): Int","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsEuclideanRing.html","n":"zero","t":"def zero: Int","d":"spire/std/IntIsEuclideanRing","k":"def"},
{"l":"spire/std/IntIsNRoot.html","n":"IntIsNRoot","t":"trait IntIsNRoot extends NRoot[Int]","d":"spire/std/IntIsNRoot","k":"trait"},
{"l":"spire/std/IntIsNRoot.html","n":"fpow","t":"def fpow(a: Int, b: Int): Int","d":"spire/std/IntIsNRoot","k":"def"},
{"l":"spire/std/IntIsNRoot.html","n":"log","t":"def log(a: Int): Int","d":"spire/std/IntIsNRoot","k":"def"},
{"l":"spire/std/IntIsNRoot.html","n":"nroot","t":"def nroot(x: Int, n: Int): Int","d":"spire/std/IntIsNRoot","k":"def"},
{"l":"spire/std/IntIsReal.html","n":"IntIsReal","t":"trait IntIsReal extends IsIntegral[Int] with IntTruncatedDivision","d":"spire/std/IntIsReal","k":"trait"},
{"l":"spire/std/IntIsReal.html","n":"order","t":"def order: Order[Int]","d":"spire/std/IntIsReal","k":"def"},
{"l":"spire/std/IntIsReal.html","n":"toBigInt","t":"def toBigInt(n: Int): BigInt","d":"spire/std/IntIsReal","k":"def"},
{"l":"spire/std/IntIsReal.html","n":"toDouble","t":"def toDouble(n: Int): Double","d":"spire/std/IntIsReal","k":"def"},
{"l":"spire/std/IntOrder.html","n":"IntOrder","t":"trait IntOrder extends Order[Int]","d":"spire/std/IntOrder","k":"trait"},
{"l":"spire/std/IntOrder.html","n":"compare","t":"def compare(x: Int, y: Int): Int","d":"spire/std/IntOrder","k":"def"},
{"l":"spire/std/IntSigned.html","n":"IntSigned","t":"trait IntSigned extends Signed[Int] with IntOrder","d":"spire/std/IntSigned","k":"trait"},
{"l":"spire/std/IntTruncatedDivision.html","n":"IntTruncatedDivision","t":"trait IntTruncatedDivision extends forCommutativeRing[Int] with IntSigned","d":"spire/std/IntTruncatedDivision","k":"trait"},
{"l":"spire/std/IntTruncatedDivision.html","n":"tmod","t":"def tmod(x: Int, y: Int): Int","d":"spire/std/IntTruncatedDivision","k":"def"},
{"l":"spire/std/IntTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(x: Int): Opt[BigInt]","d":"spire/std/IntTruncatedDivision","k":"def"},
{"l":"spire/std/IntTruncatedDivision.html","n":"tquot","t":"def tquot(x: Int, y: Int): Int","d":"spire/std/IntTruncatedDivision","k":"def"},
{"l":"spire/std/IterableInstances.html","n":"IterableInstances","t":"trait IterableInstances","d":"spire/std/IterableInstances","k":"trait"},
{"l":"spire/std/IterableInstances.html","n":"IterableMonoid","t":"def IterableMonoid[A, CC <: (IterableOps)](implicit cbf: Factory[A, CC[A]]): Monoid[CC[A]]","d":"spire/std/IterableInstances","k":"def"},
{"l":"spire/std/IterableMonoid.html","n":"IterableMonoid","t":"class IterableMonoid[A, SA <: IterableOps[A, Iterable, SA]](implicit cbf: Factory[A, SA]) extends Monoid[SA] with Serializable","d":"spire/std/IterableMonoid","k":"class"},
{"l":"spire/std/IterableMonoid.html","n":"combine","t":"def combine(x: SA, y: SA): SA","d":"spire/std/IterableMonoid","k":"def"},
{"l":"spire/std/IterableMonoid.html","n":"empty","t":"def empty: SA","d":"spire/std/IterableMonoid","k":"def"},
{"l":"spire/std/LevenshteinDistance$.html","n":"LevenshteinDistance","t":"object LevenshteinDistance extends MetricSpace[String, Int] with Serializable","d":"spire/std/LevenshteinDistance$","k":"object"},
{"l":"spire/std/LevenshteinDistance$.html","n":"distance","t":"def distance(a: String, b: String): Int","d":"spire/std/LevenshteinDistance$","k":"def"},
{"l":"spire/std/LongAlgebra.html","n":"LongAlgebra","t":"class LongAlgebra extends LongIsEuclideanRing with LongIsNRoot with LongIsReal with Serializable","d":"spire/std/LongAlgebra","k":"class"},
{"l":"spire/std/LongInstances.html","n":"LongInstances","t":"trait LongInstances","d":"spire/std/LongInstances","k":"trait"},
{"l":"spire/std/LongInstances.html","n":"LongAlgebra","t":"val LongAlgebra: EuclideanRing[Long] & NRoot[Long] & IsIntegral[Long] & forCommutativeRing[Long] & Signed[Long] & Order[Long]","d":"spire/std/LongInstances","k":"val"},
{"l":"spire/std/LongInstances.html","n":"LongBitString","t":"val LongBitString: BitString[Long]","d":"spire/std/LongInstances","k":"val"},
{"l":"spire/std/LongInstances.html","n":"LongTag","t":"val LongTag: NumberTag[Long]","d":"spire/std/LongInstances","k":"val"},
{"l":"spire/std/LongIsBitString.html","n":"LongIsBitString","t":"class LongIsBitString extends BitString[Long] with Serializable","d":"spire/std/LongIsBitString","k":"class"},
{"l":"spire/std/LongIsBitString.html","n":"and","t":"def and(a: Long, b: Long): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"bitCount","t":"def bitCount(n: Long): Int","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"complement","t":"def complement(a: Long): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"highestOneBit","t":"def highestOneBit(n: Long): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"leftShift","t":"def leftShift(n: Long, i: Int): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"lowestOneBit","t":"def lowestOneBit(n: Long): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"numberOfLeadingZeros","t":"def numberOfLeadingZeros(n: Long): Int","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"numberOfTrailingZeros","t":"def numberOfTrailingZeros(n: Long): Int","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"one","t":"def one: Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"or","t":"def or(a: Long, b: Long): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"rightShift","t":"def rightShift(n: Long, i: Int): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"rotateLeft","t":"def rotateLeft(n: Long, i: Int): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"rotateRight","t":"def rotateRight(n: Long, i: Int): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"signed","t":"def signed: Boolean","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"signedRightShift","t":"def signedRightShift(n: Long, i: Int): Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"toHexString","t":"def toHexString(n: Long): String","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"width","t":"def width: Int","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsBitString.html","n":"zero","t":"def zero: Long","d":"spire/std/LongIsBitString","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"LongIsEuclideanRing","t":"trait LongIsEuclideanRing extends EuclideanRing[Long]","d":"spire/std/LongIsEuclideanRing","k":"trait"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"emod","t":"def emod(a: Long, b: Long): Long","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"equot","t":"def equot(a: Long, b: Long): Long","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(a: Long): BigInt","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"negate","t":"def negate(a: Long): Long","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"one","t":"def one: Long","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"plus","t":"def plus(a: Long, b: Long): Long","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsEuclideanRing.html","n":"zero","t":"def zero: Long","d":"spire/std/LongIsEuclideanRing","k":"def"},
{"l":"spire/std/LongIsNRoot.html","n":"LongIsNRoot","t":"trait LongIsNRoot extends NRoot[Long]","d":"spire/std/LongIsNRoot","k":"trait"},
{"l":"spire/std/LongIsNRoot.html","n":"fpow","t":"def fpow(a: Long, b: Long): Long","d":"spire/std/LongIsNRoot","k":"def"},
{"l":"spire/std/LongIsNRoot.html","n":"log","t":"def log(a: Long): Long","d":"spire/std/LongIsNRoot","k":"def"},
{"l":"spire/std/LongIsNRoot.html","n":"nroot","t":"def nroot(x: Long, n: Int): Long","d":"spire/std/LongIsNRoot","k":"def"},
{"l":"spire/std/LongIsReal.html","n":"LongIsReal","t":"trait LongIsReal extends IsIntegral[Long] with LongTruncatedDivision","d":"spire/std/LongIsReal","k":"trait"},
{"l":"spire/std/LongIsReal.html","n":"toBigInt","t":"def toBigInt(n: Long): BigInt","d":"spire/std/LongIsReal","k":"def"},
{"l":"spire/std/LongIsReal.html","n":"toDouble","t":"def toDouble(n: Long): Double","d":"spire/std/LongIsReal","k":"def"},
{"l":"spire/std/LongOrder.html","n":"LongOrder","t":"trait LongOrder extends Order[Long]","d":"spire/std/LongOrder","k":"trait"},
{"l":"spire/std/LongOrder.html","n":"compare","t":"def compare(x: Long, y: Long): Int","d":"spire/std/LongOrder","k":"def"},
{"l":"spire/std/LongSigned.html","n":"LongSigned","t":"trait LongSigned extends Signed[Long] with LongOrder","d":"spire/std/LongSigned","k":"trait"},
{"l":"spire/std/LongSigned.html","n":"order","t":"def order: Order[Long]","d":"spire/std/LongSigned","k":"def"},
{"l":"spire/std/LongTruncatedDivision.html","n":"LongTruncatedDivision","t":"trait LongTruncatedDivision extends forCommutativeRing[Long] with LongSigned","d":"spire/std/LongTruncatedDivision","k":"trait"},
{"l":"spire/std/LongTruncatedDivision.html","n":"tmod","t":"def tmod(x: Long, y: Long): Long","d":"spire/std/LongTruncatedDivision","k":"def"},
{"l":"spire/std/LongTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(x: Long): Opt[BigInt]","d":"spire/std/LongTruncatedDivision","k":"def"},
{"l":"spire/std/LongTruncatedDivision.html","n":"tquot","t":"def tquot(x: Long, y: Long): Long","d":"spire/std/LongTruncatedDivision","k":"def"},
{"l":"spire/std/MapCRng.html","n":"MapCRng","t":"class MapCRng[K, V](implicit val scalar: CommutativeRing[V]) extends MapCSemiring[K, V] with CommutativeRng[Map[K, V]] with CModule[Map[K, V], V] with Serializable","d":"spire/std/MapCRng","k":"class"},
{"l":"spire/std/MapCRng.html","n":"negate","t":"def negate(x: Map[K, V]): Map[K, V]","d":"spire/std/MapCRng","k":"def"},
{"l":"spire/std/MapCRng.html","n":"scalar","t":"val scalar: CommutativeRing[V]","d":"spire/std/MapCRng","k":"val"},
{"l":"spire/std/MapCRng.html","n":"timesl","t":"def timesl(r: V, v: Map[K, V]): Map[K, V]","d":"spire/std/MapCRng","k":"def"},
{"l":"spire/std/MapCSemiring.html","n":"MapCSemiring","t":"class MapCSemiring[K, V](implicit val scalar: CommutativeSemiring[V]) extends CommutativeSemiring[Map[K, V]] with Serializable","d":"spire/std/MapCSemiring","k":"class"},
{"l":"spire/std/MapCSemiring.html","n":"plus","t":"def plus(x: Map[K, V], y: Map[K, V]): Map[K, V]","d":"spire/std/MapCSemiring","k":"def"},
{"l":"spire/std/MapCSemiring.html","n":"scalar","t":"val scalar: CommutativeSemiring[V]","d":"spire/std/MapCSemiring","k":"val"},
{"l":"spire/std/MapCSemiring.html","n":"times","t":"def times(x: Map[K, V], y: Map[K, V]): Map[K, V]","d":"spire/std/MapCSemiring","k":"def"},
{"l":"spire/std/MapCSemiring.html","n":"zero","t":"def zero: Map[K, V]","d":"spire/std/MapCSemiring","k":"def"},
{"l":"spire/std/MapEq.html","n":"MapEq","t":"class MapEq[K, V](implicit V: Eq[V]) extends Eq[Map[K, V]] with Serializable","d":"spire/std/MapEq","k":"class"},
{"l":"spire/std/MapEq.html","n":"eqv","t":"def eqv(x: Map[K, V], y: Map[K, V]): Boolean","d":"spire/std/MapEq","k":"def"},
{"l":"spire/std/MapGroup.html","n":"MapGroup","t":"class MapGroup[K, V](implicit val scalar: Group[V]) extends MapMonoid[K, V] with Group[Map[K, V]] with Serializable","d":"spire/std/MapGroup","k":"class"},
{"l":"spire/std/MapGroup.html","n":"inverse","t":"def inverse(x: Map[K, V]): Map[K, V]","d":"spire/std/MapGroup","k":"def"},
{"l":"spire/std/MapGroup.html","n":"scalar","t":"val scalar: Group[V]","d":"spire/std/MapGroup","k":"val"},
{"l":"spire/std/MapInnerProductSpace.html","n":"MapInnerProductSpace","t":"class MapInnerProductSpace[K, V] extends MapVectorSpace[K, V] with InnerProductSpace[Map[K, V], V] with Serializable","d":"spire/std/MapInnerProductSpace","k":"class"},
{"l":"spire/std/MapInnerProductSpace.html","n":"dot","t":"def dot(x: Map[K, V], y: Map[K, V]): V","d":"spire/std/MapInnerProductSpace","k":"def"},
{"l":"spire/std/MapInstances.html","n":"MapInstances","t":"trait MapInstances extends MapInstances3","d":"spire/std/MapInstances","k":"trait"},
{"l":"spire/std/MapInstances0.html","n":"MapInstances0","t":"trait MapInstances0","d":"spire/std/MapInstances0","k":"trait"},
{"l":"spire/std/MapInstances0.html","n":"MapCSemiring","t":"def MapCSemiring[K, V : CommutativeSemiring]: MapCSemiring[K, V]","d":"spire/std/MapInstances0","k":"def"},
{"l":"spire/std/MapInstances0.html","n":"MapMonoid","t":"def MapMonoid[K, V : Semigroup]: MapMonoid[K, V]","d":"spire/std/MapInstances0","k":"def"},
{"l":"spire/std/MapInstances1.html","n":"MapInstances1","t":"trait MapInstances1 extends MapInstances0","d":"spire/std/MapInstances1","k":"trait"},
{"l":"spire/std/MapInstances1.html","n":"MapCRng","t":"def MapCRng[K, V : CommutativeRing]: MapCRng[K, V]","d":"spire/std/MapInstances1","k":"def"},
{"l":"spire/std/MapInstances2.html","n":"MapInstances2","t":"trait MapInstances2 extends MapInstances1","d":"spire/std/MapInstances2","k":"trait"},
{"l":"spire/std/MapInstances2.html","n":"MapGroup","t":"def MapGroup[K, V : Group]: MapGroup[K, V]","d":"spire/std/MapInstances2","k":"def"},
{"l":"spire/std/MapInstances2.html","n":"MapVectorSpace","t":"def MapVectorSpace[K, V : Field]: MapVectorSpace[K, V]","d":"spire/std/MapInstances2","k":"def"},
{"l":"spire/std/MapInstances3.html","n":"MapInstances3","t":"trait MapInstances3 extends MapInstances2","d":"spire/std/MapInstances3","k":"trait"},
{"l":"spire/std/MapInstances3.html","n":"MapEq","t":"def MapEq[K, V](implicit V0: Eq[V]): MapEq[K, V]","d":"spire/std/MapInstances3","k":"def"},
{"l":"spire/std/MapInstances3.html","n":"MapInnerProductSpace","t":"def MapInnerProductSpace[K, V : Field]: MapInnerProductSpace[K, V]","d":"spire/std/MapInstances3","k":"def"},
{"l":"spire/std/MapMonoid.html","n":"MapMonoid","t":"class MapMonoid[K, V](implicit val scalar: Semigroup[V]) extends Monoid[Map[K, V]] with Serializable","d":"spire/std/MapMonoid","k":"class"},
{"l":"spire/std/MapMonoid.html","n":"combine","t":"def combine(x: Map[K, V], y: Map[K, V]): Map[K, V]","d":"spire/std/MapMonoid","k":"def"},
{"l":"spire/std/MapMonoid.html","n":"empty","t":"def empty: Map[K, V]","d":"spire/std/MapMonoid","k":"def"},
{"l":"spire/std/MapMonoid.html","n":"scalar","t":"val scalar: Semigroup[V]","d":"spire/std/MapMonoid","k":"val"},
{"l":"spire/std/MapVectorEq.html","n":"MapVectorEq","t":"class MapVectorEq[K, V](implicit V: Eq[V], scalar: AdditiveMonoid[V]) extends Eq[Map[K, V]] with Serializable","d":"spire/std/MapVectorEq","k":"class"},
{"l":"spire/std/MapVectorEq.html","n":"eqv","t":"def eqv(x: Map[K, V], y: Map[K, V]): Boolean","d":"spire/std/MapVectorEq","k":"def"},
{"l":"spire/std/MapVectorSpace.html","n":"MapVectorSpace","t":"class MapVectorSpace[K, V](implicit val scalar: Field[V]) extends MapCRng[K, V] with VectorSpace[Map[K, V], V] with Serializable","d":"spire/std/MapVectorSpace","k":"class"},
{"l":"spire/std/MapVectorSpace.html","n":"scalar","t":"val scalar: Field[V]","d":"spire/std/MapVectorSpace","k":"val"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProductInstances","t":"trait MonoidProductInstances","d":"spire/std/MonoidProductInstances","k":"trait"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct10","t":"def MonoidProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J]): Monoid[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct11","t":"def MonoidProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K]): Monoid[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct12","t":"def MonoidProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct13","t":"def MonoidProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct14","t":"def MonoidProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct15","t":"def MonoidProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct16","t":"def MonoidProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct17","t":"def MonoidProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct18","t":"def MonoidProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct19","t":"def MonoidProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct2","t":"def MonoidProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Monoid[A], _structure2: Monoid[B]): Monoid[(A, B)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct20","t":"def MonoidProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S], _structure20: Monoid[T]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct21","t":"def MonoidProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S], _structure20: Monoid[T], _structure21: Monoid[U]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct22","t":"def MonoidProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I], _structure10: Monoid[J], _structure11: Monoid[K], _structure12: Monoid[L], _structure13: Monoid[M], _structure14: Monoid[N], _structure15: Monoid[O], _structure16: Monoid[P], _structure17: Monoid[Q], _structure18: Monoid[R], _structure19: Monoid[S], _structure20: Monoid[T], _structure21: Monoid[U], _structure22: Monoid[V]): Monoid[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct3","t":"def MonoidProduct3[A, B, C](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C]): Monoid[(A, B, C)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct4","t":"def MonoidProduct4[A, B, C, D](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D]): Monoid[(A, B, C, D)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct5","t":"def MonoidProduct5[A, B, C, D, E](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E]): Monoid[(A, B, C, D, E)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct6","t":"def MonoidProduct6[A, B, C, D, E, F](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F]): Monoid[(A, B, C, D, E, F)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct7","t":"def MonoidProduct7[A, B, C, D, E, F, G](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G]): Monoid[(A, B, C, D, E, F, G)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct8","t":"def MonoidProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H]): Monoid[(A, B, C, D, E, F, G, H)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/MonoidProductInstances.html","n":"MonoidProduct9","t":"def MonoidProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Monoid[A], _structure2: Monoid[B], _structure3: Monoid[C], _structure4: Monoid[D], _structure5: Monoid[E], _structure6: Monoid[F], _structure7: Monoid[G], _structure8: Monoid[H], _structure9: Monoid[I]): Monoid[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/MonoidProductInstances","k":"def"},
{"l":"spire/std/OptionAdditiveMonoid.html","n":"OptionAdditiveMonoid","t":"class OptionAdditiveMonoid[A] extends AdditiveMonoid[Option[A]] with Serializable","d":"spire/std/OptionAdditiveMonoid","k":"class"},
{"l":"spire/std/OptionAdditiveMonoid.html","n":"plus","t":"def plus(x: Option[A], y: Option[A]): Option[A]","d":"spire/std/OptionAdditiveMonoid","k":"def"},
{"l":"spire/std/OptionAdditiveMonoid.html","n":"zero","t":"def zero: Option[A]","d":"spire/std/OptionAdditiveMonoid","k":"def"},
{"l":"spire/std/OptionCMonoid.html","n":"OptionCMonoid","t":"class OptionCMonoid[A] extends OptionMonoid[A] with CommutativeMonoid[Option[A]]","d":"spire/std/OptionCMonoid","k":"class"},
{"l":"spire/std/OptionEq.html","n":"OptionEq","t":"class OptionEq[A] extends Eq[Option[A]] with Serializable","d":"spire/std/OptionEq","k":"class"},
{"l":"spire/std/OptionEq.html","n":"eqv","t":"def eqv(x: Option[A], y: Option[A]): Boolean","d":"spire/std/OptionEq","k":"def"},
{"l":"spire/std/OptionInstances.html","n":"OptionInstances","t":"trait OptionInstances extends OptionInstances0","d":"spire/std/OptionInstances","k":"trait"},
{"l":"spire/std/OptionInstances.html","n":"OptionAdditiveMonoid","t":"def OptionAdditiveMonoid[A : AdditiveSemigroup]: OptionAdditiveMonoid[A]","d":"spire/std/OptionInstances","k":"def"},
{"l":"spire/std/OptionInstances.html","n":"OptionCMonoid","t":"def OptionCMonoid[A : CommutativeSemigroup]: OptionCMonoid[A]","d":"spire/std/OptionInstances","k":"def"},
{"l":"spire/std/OptionInstances.html","n":"OptionMultiplicativeMonoid","t":"def OptionMultiplicativeMonoid[A : MultiplicativeSemigroup]: OptionMultiplicativeMonoid[A]","d":"spire/std/OptionInstances","k":"def"},
{"l":"spire/std/OptionInstances.html","n":"OptionOrder","t":"def OptionOrder[A : Order]: OptionOrder[A]","d":"spire/std/OptionInstances","k":"def"},
{"l":"spire/std/OptionInstances0.html","n":"OptionInstances0","t":"trait OptionInstances0","d":"spire/std/OptionInstances0","k":"trait"},
{"l":"spire/std/OptionInstances0.html","n":"OptionEq","t":"def OptionEq[A : Eq]: OptionEq[A]","d":"spire/std/OptionInstances0","k":"def"},
{"l":"spire/std/OptionInstances0.html","n":"OptionMonoid","t":"def OptionMonoid[A : Semigroup]: OptionMonoid[A]","d":"spire/std/OptionInstances0","k":"def"},
{"l":"spire/std/OptionMonoid.html","n":"OptionMonoid","t":"class OptionMonoid[A] extends Monoid[Option[A]] with Serializable","d":"spire/std/OptionMonoid","k":"class"},
{"l":"spire/std/OptionMonoid.html","n":"combine","t":"def combine(x: Option[A], y: Option[A]): Option[A]","d":"spire/std/OptionMonoid","k":"def"},
{"l":"spire/std/OptionMonoid.html","n":"empty","t":"def empty: Option[A]","d":"spire/std/OptionMonoid","k":"def"},
{"l":"spire/std/OptionMultiplicativeMonoid.html","n":"OptionMultiplicativeMonoid","t":"class OptionMultiplicativeMonoid[A] extends MultiplicativeMonoid[Option[A]] with Serializable","d":"spire/std/OptionMultiplicativeMonoid","k":"class"},
{"l":"spire/std/OptionMultiplicativeMonoid.html","n":"one","t":"def one: Option[A]","d":"spire/std/OptionMultiplicativeMonoid","k":"def"},
{"l":"spire/std/OptionMultiplicativeMonoid.html","n":"times","t":"def times(x: Option[A], y: Option[A]): Option[A]","d":"spire/std/OptionMultiplicativeMonoid","k":"def"},
{"l":"spire/std/OptionOrder.html","n":"OptionOrder","t":"class OptionOrder[A] extends OptionEq[A] with Order[Option[A]] with Serializable","d":"spire/std/OptionOrder","k":"class"},
{"l":"spire/std/OptionOrder.html","n":"compare","t":"def compare(x: Option[A], y: Option[A]): Int","d":"spire/std/OptionOrder","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProductInstances","t":"trait OrderProductInstances","d":"spire/std/OrderProductInstances","k":"trait"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct10","t":"def OrderProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J]): Order[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct11","t":"def OrderProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K]): Order[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct12","t":"def OrderProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L]): Order[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct13","t":"def OrderProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct14","t":"def OrderProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct15","t":"def OrderProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct16","t":"def OrderProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct17","t":"def OrderProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct18","t":"def OrderProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct19","t":"def OrderProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct2","t":"def OrderProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Order[A], _structure2: Order[B]): Order[(A, B)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct20","t":"def OrderProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S], _structure20: Order[T]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct21","t":"def OrderProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S], _structure20: Order[T], _structure21: Order[U]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct22","t":"def OrderProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I], _structure10: Order[J], _structure11: Order[K], _structure12: Order[L], _structure13: Order[M], _structure14: Order[N], _structure15: Order[O], _structure16: Order[P], _structure17: Order[Q], _structure18: Order[R], _structure19: Order[S], _structure20: Order[T], _structure21: Order[U], _structure22: Order[V]): Order[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct3","t":"def OrderProduct3[A, B, C](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C]): Order[(A, B, C)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct4","t":"def OrderProduct4[A, B, C, D](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D]): Order[(A, B, C, D)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct5","t":"def OrderProduct5[A, B, C, D, E](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E]): Order[(A, B, C, D, E)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct6","t":"def OrderProduct6[A, B, C, D, E, F](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F]): Order[(A, B, C, D, E, F)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct7","t":"def OrderProduct7[A, B, C, D, E, F, G](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G]): Order[(A, B, C, D, E, F, G)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct8","t":"def OrderProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H]): Order[(A, B, C, D, E, F, G, H)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/OrderProductInstances.html","n":"OrderProduct9","t":"def OrderProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Order[A], _structure2: Order[B], _structure3: Order[C], _structure4: Order[D], _structure5: Order[E], _structure6: Order[F], _structure7: Order[G], _structure8: Order[H], _structure9: Order[I]): Order[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/OrderProductInstances","k":"def"},
{"l":"spire/std/ProductInstances.html","n":"ProductInstances","t":"trait ProductInstances extends SemigroupProductInstances with MonoidProductInstances with GroupProductInstances with AbGroupProductInstances with SemiringProductInstances with RngProductInstances with RigProductInstances with RingProductInstances with EqProductInstances with OrderProductInstances","d":"spire/std/ProductInstances","k":"trait"},
{"l":"spire/std/RigProductInstances.html","n":"RigProductInstances","t":"trait RigProductInstances","d":"spire/std/RigProductInstances","k":"trait"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct10","t":"def RigProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J]): Rig[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct11","t":"def RigProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K]): Rig[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct12","t":"def RigProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct13","t":"def RigProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct14","t":"def RigProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct15","t":"def RigProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct16","t":"def RigProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct17","t":"def RigProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct18","t":"def RigProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct19","t":"def RigProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct2","t":"def RigProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Rig[A], _structure2: Rig[B]): Rig[(A, B)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct20","t":"def RigProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S], _structure20: Rig[T]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct21","t":"def RigProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S], _structure20: Rig[T], _structure21: Rig[U]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct22","t":"def RigProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I], _structure10: Rig[J], _structure11: Rig[K], _structure12: Rig[L], _structure13: Rig[M], _structure14: Rig[N], _structure15: Rig[O], _structure16: Rig[P], _structure17: Rig[Q], _structure18: Rig[R], _structure19: Rig[S], _structure20: Rig[T], _structure21: Rig[U], _structure22: Rig[V]): Rig[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct3","t":"def RigProduct3[A, B, C](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C]): Rig[(A, B, C)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct4","t":"def RigProduct4[A, B, C, D](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D]): Rig[(A, B, C, D)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct5","t":"def RigProduct5[A, B, C, D, E](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E]): Rig[(A, B, C, D, E)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct6","t":"def RigProduct6[A, B, C, D, E, F](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F]): Rig[(A, B, C, D, E, F)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct7","t":"def RigProduct7[A, B, C, D, E, F, G](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G]): Rig[(A, B, C, D, E, F, G)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct8","t":"def RigProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H]): Rig[(A, B, C, D, E, F, G, H)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RigProductInstances.html","n":"RigProduct9","t":"def RigProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Rig[A], _structure2: Rig[B], _structure3: Rig[C], _structure4: Rig[D], _structure5: Rig[E], _structure6: Rig[F], _structure7: Rig[G], _structure8: Rig[H], _structure9: Rig[I]): Rig[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/RigProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProductInstances","t":"trait RingProductInstances","d":"spire/std/RingProductInstances","k":"trait"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct10","t":"def RingProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J]): Ring[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct11","t":"def RingProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K]): Ring[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct12","t":"def RingProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct13","t":"def RingProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct14","t":"def RingProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct15","t":"def RingProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct16","t":"def RingProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct17","t":"def RingProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct18","t":"def RingProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct19","t":"def RingProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct2","t":"def RingProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Ring[A], _structure2: Ring[B]): Ring[(A, B)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct20","t":"def RingProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S], _structure20: Ring[T]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct21","t":"def RingProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S], _structure20: Ring[T], _structure21: Ring[U]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct22","t":"def RingProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I], _structure10: Ring[J], _structure11: Ring[K], _structure12: Ring[L], _structure13: Ring[M], _structure14: Ring[N], _structure15: Ring[O], _structure16: Ring[P], _structure17: Ring[Q], _structure18: Ring[R], _structure19: Ring[S], _structure20: Ring[T], _structure21: Ring[U], _structure22: Ring[V]): Ring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct3","t":"def RingProduct3[A, B, C](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C]): Ring[(A, B, C)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct4","t":"def RingProduct4[A, B, C, D](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D]): Ring[(A, B, C, D)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct5","t":"def RingProduct5[A, B, C, D, E](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E]): Ring[(A, B, C, D, E)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct6","t":"def RingProduct6[A, B, C, D, E, F](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F]): Ring[(A, B, C, D, E, F)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct7","t":"def RingProduct7[A, B, C, D, E, F, G](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G]): Ring[(A, B, C, D, E, F, G)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct8","t":"def RingProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H]): Ring[(A, B, C, D, E, F, G, H)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RingProductInstances.html","n":"RingProduct9","t":"def RingProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Ring[A], _structure2: Ring[B], _structure3: Ring[C], _structure4: Ring[D], _structure5: Ring[E], _structure6: Ring[F], _structure7: Ring[G], _structure8: Ring[H], _structure9: Ring[I]): Ring[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/RingProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProductInstances","t":"trait RngProductInstances","d":"spire/std/RngProductInstances","k":"trait"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct10","t":"def RngProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J]): Rng[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct11","t":"def RngProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K]): Rng[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct12","t":"def RngProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct13","t":"def RngProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct14","t":"def RngProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct15","t":"def RngProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct16","t":"def RngProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct17","t":"def RngProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct18","t":"def RngProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct19","t":"def RngProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct2","t":"def RngProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Rng[A], _structure2: Rng[B]): Rng[(A, B)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct20","t":"def RngProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S], _structure20: Rng[T]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct21","t":"def RngProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S], _structure20: Rng[T], _structure21: Rng[U]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct22","t":"def RngProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I], _structure10: Rng[J], _structure11: Rng[K], _structure12: Rng[L], _structure13: Rng[M], _structure14: Rng[N], _structure15: Rng[O], _structure16: Rng[P], _structure17: Rng[Q], _structure18: Rng[R], _structure19: Rng[S], _structure20: Rng[T], _structure21: Rng[U], _structure22: Rng[V]): Rng[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct3","t":"def RngProduct3[A, B, C](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C]): Rng[(A, B, C)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct4","t":"def RngProduct4[A, B, C, D](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D]): Rng[(A, B, C, D)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct5","t":"def RngProduct5[A, B, C, D, E](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E]): Rng[(A, B, C, D, E)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct6","t":"def RngProduct6[A, B, C, D, E, F](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F]): Rng[(A, B, C, D, E, F)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct7","t":"def RngProduct7[A, B, C, D, E, F, G](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G]): Rng[(A, B, C, D, E, F, G)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct8","t":"def RngProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H]): Rng[(A, B, C, D, E, F, G, H)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/RngProductInstances.html","n":"RngProduct9","t":"def RngProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Rng[A], _structure2: Rng[B], _structure3: Rng[C], _structure4: Rng[D], _structure5: Rng[E], _structure6: Rng[F], _structure7: Rng[G], _structure8: Rng[H], _structure9: Rng[I]): Rng[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/RngProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProductInstances","t":"trait SemigroupProductInstances","d":"spire/std/SemigroupProductInstances","k":"trait"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct10","t":"def SemigroupProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J]): Semigroup[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct11","t":"def SemigroupProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct12","t":"def SemigroupProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct13","t":"def SemigroupProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct14","t":"def SemigroupProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct15","t":"def SemigroupProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct16","t":"def SemigroupProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct17","t":"def SemigroupProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct18","t":"def SemigroupProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct19","t":"def SemigroupProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct2","t":"def SemigroupProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Semigroup[A], _structure2: Semigroup[B]): Semigroup[(A, B)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct20","t":"def SemigroupProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S], _structure20: Semigroup[T]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct21","t":"def SemigroupProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S], _structure20: Semigroup[T], _structure21: Semigroup[U]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct22","t":"def SemigroupProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I], _structure10: Semigroup[J], _structure11: Semigroup[K], _structure12: Semigroup[L], _structure13: Semigroup[M], _structure14: Semigroup[N], _structure15: Semigroup[O], _structure16: Semigroup[P], _structure17: Semigroup[Q], _structure18: Semigroup[R], _structure19: Semigroup[S], _structure20: Semigroup[T], _structure21: Semigroup[U], _structure22: Semigroup[V]): Semigroup[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct3","t":"def SemigroupProduct3[A, B, C](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C]): Semigroup[(A, B, C)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct4","t":"def SemigroupProduct4[A, B, C, D](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D]): Semigroup[(A, B, C, D)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct5","t":"def SemigroupProduct5[A, B, C, D, E](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E]): Semigroup[(A, B, C, D, E)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct6","t":"def SemigroupProduct6[A, B, C, D, E, F](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F]): Semigroup[(A, B, C, D, E, F)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct7","t":"def SemigroupProduct7[A, B, C, D, E, F, G](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G]): Semigroup[(A, B, C, D, E, F, G)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct8","t":"def SemigroupProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H]): Semigroup[(A, B, C, D, E, F, G, H)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemigroupProductInstances.html","n":"SemigroupProduct9","t":"def SemigroupProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Semigroup[A], _structure2: Semigroup[B], _structure3: Semigroup[C], _structure4: Semigroup[D], _structure5: Semigroup[E], _structure6: Semigroup[F], _structure7: Semigroup[G], _structure8: Semigroup[H], _structure9: Semigroup[I]): Semigroup[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/SemigroupProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProductInstances","t":"trait SemiringProductInstances","d":"spire/std/SemiringProductInstances","k":"trait"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct10","t":"def SemiringProduct10[A, B, C, D, E, F, G, H, I, J](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J]): Semiring[(A, B, C, D, E, F, G, H, I, J)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct11","t":"def SemiringProduct11[A, B, C, D, E, F, G, H, I, J, K](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K]): Semiring[(A, B, C, D, E, F, G, H, I, J, K)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct12","t":"def SemiringProduct12[A, B, C, D, E, F, G, H, I, J, K, L](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct13","t":"def SemiringProduct13[A, B, C, D, E, F, G, H, I, J, K, L, M](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct14","t":"def SemiringProduct14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct15","t":"def SemiringProduct15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct16","t":"def SemiringProduct16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct17","t":"def SemiringProduct17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct18","t":"def SemiringProduct18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct19","t":"def SemiringProduct19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct2","t":"def SemiringProduct2[@specialized(Int, Long, Float, Double) A, @specialized(Int, Long, Float, Double) B](implicit _structure1: Semiring[A], _structure2: Semiring[B]): Semiring[(A, B)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct20","t":"def SemiringProduct20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S], _structure20: Semiring[T]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct21","t":"def SemiringProduct21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S], _structure20: Semiring[T], _structure21: Semiring[U]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct22","t":"def SemiringProduct22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I], _structure10: Semiring[J], _structure11: Semiring[K], _structure12: Semiring[L], _structure13: Semiring[M], _structure14: Semiring[N], _structure15: Semiring[O], _structure16: Semiring[P], _structure17: Semiring[Q], _structure18: Semiring[R], _structure19: Semiring[S], _structure20: Semiring[T], _structure21: Semiring[U], _structure22: Semiring[V]): Semiring[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct3","t":"def SemiringProduct3[A, B, C](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C]): Semiring[(A, B, C)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct4","t":"def SemiringProduct4[A, B, C, D](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D]): Semiring[(A, B, C, D)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct5","t":"def SemiringProduct5[A, B, C, D, E](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E]): Semiring[(A, B, C, D, E)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct6","t":"def SemiringProduct6[A, B, C, D, E, F](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F]): Semiring[(A, B, C, D, E, F)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct7","t":"def SemiringProduct7[A, B, C, D, E, F, G](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G]): Semiring[(A, B, C, D, E, F, G)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct8","t":"def SemiringProduct8[A, B, C, D, E, F, G, H](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H]): Semiring[(A, B, C, D, E, F, G, H)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SemiringProductInstances.html","n":"SemiringProduct9","t":"def SemiringProduct9[A, B, C, D, E, F, G, H, I](implicit _structure1: Semiring[A], _structure2: Semiring[B], _structure3: Semiring[C], _structure4: Semiring[D], _structure5: Semiring[E], _structure6: Semiring[F], _structure7: Semiring[G], _structure8: Semiring[H], _structure9: Semiring[I]): Semiring[(A, B, C, D, E, F, G, H, I)]","d":"spire/std/SemiringProductInstances","k":"def"},
{"l":"spire/std/SeqCModule.html","n":"SeqCModule","t":"class SeqCModule[A, SA <: SeqOps[A, Seq, SA]](implicit val scalar: CommutativeRing[A], cbf: Factory[A, SA]) extends CModule[SA, A] with Serializable","d":"spire/std/SeqCModule","k":"class"},
{"l":"spire/std/SeqCModule.html","n":"negate","t":"def negate(sa: SA): SA","d":"spire/std/SeqCModule","k":"def"},
{"l":"spire/std/SeqCModule.html","n":"plus","t":"def plus(x: SA, y: SA): SA","d":"spire/std/SeqCModule","k":"def"},
{"l":"spire/std/SeqCModule.html","n":"scalar","t":"val scalar: CommutativeRing[A]","d":"spire/std/SeqCModule","k":"val"},
{"l":"spire/std/SeqCModule.html","n":"timesl","t":"def timesl(r: A, sa: SA): SA","d":"spire/std/SeqCModule","k":"def"},
{"l":"spire/std/SeqCModule.html","n":"zero","t":"def zero: SA","d":"spire/std/SeqCModule","k":"def"},
{"l":"spire/std/SeqCoordinateSpace.html","n":"SeqCoordinateSpace","t":"class SeqCoordinateSpace[A, SA <: SeqOps[A, Seq, SA]](val dimensions: Int)(implicit evidence$2: Field[A], cbf: Factory[A, SA]) extends SeqInnerProductSpace[A, SA] with CoordinateSpace[SA, A] with Serializable","d":"spire/std/SeqCoordinateSpace","k":"class"},
{"l":"spire/std/SeqCoordinateSpace.html","n":"axis","t":"def axis(i: Int): SA","d":"spire/std/SeqCoordinateSpace","k":"def"},
{"l":"spire/std/SeqCoordinateSpace.html","n":"coord","t":"def coord(v: SA, i: Int): A","d":"spire/std/SeqCoordinateSpace","k":"def"},
{"l":"spire/std/SeqCoordinateSpace.html","n":"dimensions","t":"val dimensions: Int","d":"spire/std/SeqCoordinateSpace","k":"val"},
{"l":"spire/std/SeqEq.html","n":"SeqEq","t":"class SeqEq[A, SA <: SeqOps[A, Seq, SA]] extends Eq[SA] with Serializable","d":"spire/std/SeqEq","k":"class"},
{"l":"spire/std/SeqEq.html","n":"eqv","t":"def eqv(x: SA, y: SA): Boolean","d":"spire/std/SeqEq","k":"def"},
{"l":"spire/std/SeqInnerProductSpace.html","n":"SeqInnerProductSpace","t":"class SeqInnerProductSpace[A, SA <: SeqOps[A, Seq, SA]](implicit evidence$1: Field[A], cbf: Factory[A, SA]) extends SeqVectorSpace[A, SA] with InnerProductSpace[SA, A] with Serializable","d":"spire/std/SeqInnerProductSpace","k":"class"},
{"l":"spire/std/SeqInnerProductSpace.html","n":"dot","t":"def dot(x: SA, y: SA): A","d":"spire/std/SeqInnerProductSpace","k":"def"},
{"l":"spire/std/SeqInstances.html","n":"SeqInstances","t":"trait SeqInstances extends SeqInstances3","d":"spire/std/SeqInstances","k":"trait"},
{"l":"spire/std/SeqInstances0.html","n":"SeqInstances0","t":"trait SeqInstances0","d":"spire/std/SeqInstances0","k":"trait"},
{"l":"spire/std/SeqInstances0.html","n":"SeqCModule","t":"def SeqCModule[A, CC <: (SeqOps)](implicit ring0: CommutativeRing[A], cbf0: Factory[A, CC[A]], ev: NotGiven[VectorSpace[CC[A], A]]): SeqCModule[A, CC[A]]","d":"spire/std/SeqInstances0","k":"def"},
{"l":"spire/std/SeqInstances1.html","n":"SeqInstances1","t":"trait SeqInstances1 extends SeqInstances0","d":"spire/std/SeqInstances1","k":"trait"},
{"l":"spire/std/SeqInstances1.html","n":"SeqEq","t":"def SeqEq[A, CC <: (SeqOps)](implicit A0: Eq[A]): SeqEq[A, CC[A]]","d":"spire/std/SeqInstances1","k":"def"},
{"l":"spire/std/SeqInstances1.html","n":"SeqVectorSpace","t":"def SeqVectorSpace[A, CC <: (SeqOps)](implicit field0: Field[A], cbf0: Factory[A, CC[A]], ev: NotGiven[NormedVectorSpace[CC[A], A]]): SeqVectorSpace[A, CC[A]]","d":"spire/std/SeqInstances1","k":"def"},
{"l":"spire/std/SeqInstances2.html","n":"SeqInstances2","t":"trait SeqInstances2 extends SeqInstances1","d":"spire/std/SeqInstances2","k":"trait"},
{"l":"spire/std/SeqInstances2.html","n":"SeqInnerProductSpace","t":"def SeqInnerProductSpace[A, CC <: (SeqOps)](implicit field0: Field[A], cbf0: Factory[A, CC[A]]): SeqInnerProductSpace[A, CC[A]]","d":"spire/std/SeqInstances2","k":"def"},
{"l":"spire/std/SeqInstances2.html","n":"SeqOrder","t":"def SeqOrder[A, CC <: (SeqOps)](implicit A0: Order[A]): SeqOrder[A, CC[A]]","d":"spire/std/SeqInstances2","k":"def"},
{"l":"spire/std/SeqInstances3.html","n":"SeqInstances3","t":"trait SeqInstances3 extends SeqInstances2","d":"spire/std/SeqInstances3","k":"trait"},
{"l":"spire/std/SeqInstances3.html","n":"SeqNormedVectorSpace","t":"def SeqNormedVectorSpace[A, CC <: (SeqOps)](implicit field0: Field[A], nroot0: NRoot[A], cbf0: Factory[A, CC[A]]): NormedVectorSpace[CC[A], A]","d":"spire/std/SeqInstances3","k":"def"},
{"l":"spire/std/SeqLpNormedVectorSpace.html","n":"SeqLpNormedVectorSpace","t":"class SeqLpNormedVectorSpace[A, SA <: SeqOps[A, Seq, SA]](val p: Int)(implicit evidence$3: Field[A], evidence$4: NRoot[A], evidence$5: Signed[A], cbf: Factory[A, SA]) extends SeqVectorSpace[A, SA] with NormedVectorSpace[SA, A] with Serializable","d":"spire/std/SeqLpNormedVectorSpace","k":"class"},
{"l":"spire/std/SeqLpNormedVectorSpace.html","n":"norm","t":"def norm(v: SA): A","d":"spire/std/SeqLpNormedVectorSpace","k":"def"},
{"l":"spire/std/SeqLpNormedVectorSpace.html","n":"p","t":"val p: Int","d":"spire/std/SeqLpNormedVectorSpace","k":"val"},
{"l":"spire/std/SeqMaxNormedVectorSpace.html","n":"SeqMaxNormedVectorSpace","t":"class SeqMaxNormedVectorSpace[A, SA <: SeqOps[A, Seq, SA]](implicit evidence$6: Field[A], evidence$7: Order[A], evidence$8: Signed[A], cbf: Factory[A, SA]) extends SeqVectorSpace[A, SA] with NormedVectorSpace[SA, A] with Serializable","d":"spire/std/SeqMaxNormedVectorSpace","k":"class"},
{"l":"spire/std/SeqMaxNormedVectorSpace.html","n":"norm","t":"def norm(v: SA): A","d":"spire/std/SeqMaxNormedVectorSpace","k":"def"},
{"l":"spire/std/SeqOrder.html","n":"SeqOrder","t":"class SeqOrder[A, SA <: SeqOps[A, Seq, SA]] extends SeqEq[A, SA] with Order[SA] with Serializable","d":"spire/std/SeqOrder","k":"class"},
{"l":"spire/std/SeqOrder.html","n":"compare","t":"def compare(x: SA, y: SA): Int","d":"spire/std/SeqOrder","k":"def"},
{"l":"spire/std/SeqVectorEq.html","n":"SeqVectorEq","t":"class SeqVectorEq[A, SA <: SeqOps[A, Seq, SA]](implicit evidence$11: Eq[A], scalar: AdditiveMonoid[A]) extends Eq[SA] with Serializable","d":"spire/std/SeqVectorEq","k":"class"},
{"l":"spire/std/SeqVectorEq.html","n":"eqv","t":"def eqv(x: SA, y: SA): Boolean","d":"spire/std/SeqVectorEq","k":"def"},
{"l":"spire/std/SeqVectorOrder.html","n":"SeqVectorOrder","t":"class SeqVectorOrder[A, SA <: SeqOps[A, Seq, SA]](implicit evidence$12: Order[A], scalar: AdditiveMonoid[A]) extends SeqVectorEq[A, SA] with Order[SA] with Serializable","d":"spire/std/SeqVectorOrder","k":"class"},
{"l":"spire/std/SeqVectorOrder.html","n":"compare","t":"def compare(x: SA, y: SA): Int","d":"spire/std/SeqVectorOrder","k":"def"},
{"l":"spire/std/SeqVectorSpace.html","n":"SeqVectorSpace","t":"class SeqVectorSpace[A, SA <: SeqOps[A, Seq, SA]](implicit val scalar: Field[A], cbf: Factory[A, SA]) extends SeqCModule[A, SA] with VectorSpace[SA, A] with Serializable","d":"spire/std/SeqVectorSpace","k":"class"},
{"l":"spire/std/SeqVectorSpace.html","n":"scalar","t":"val scalar: Field[A]","d":"spire/std/SeqVectorSpace","k":"val"},
{"l":"spire/std/ShortAlgebra.html","n":"ShortAlgebra","t":"class ShortAlgebra extends ShortIsEuclideanRing with ShortIsReal with Serializable","d":"spire/std/ShortAlgebra","k":"class"},
{"l":"spire/std/ShortInstances.html","n":"ShortInstances","t":"trait ShortInstances","d":"spire/std/ShortInstances","k":"trait"},
{"l":"spire/std/ShortInstances.html","n":"ShortAlgebra","t":"val ShortAlgebra: EuclideanRing[Short] & IsIntegral[Short] & forCommutativeRing[Short] & Signed[Short] & Order[Short]","d":"spire/std/ShortInstances","k":"val"},
{"l":"spire/std/ShortInstances.html","n":"ShortBitString","t":"val ShortBitString: BitString[Short]","d":"spire/std/ShortInstances","k":"val"},
{"l":"spire/std/ShortInstances.html","n":"ShortTag","t":"val ShortTag: NumberTag[Short]","d":"spire/std/ShortInstances","k":"val"},
{"l":"spire/std/ShortIsBitString.html","n":"ShortIsBitString","t":"class ShortIsBitString extends BitString[Short] with Serializable","d":"spire/std/ShortIsBitString","k":"class"},
{"l":"spire/std/ShortIsBitString.html","n":"and","t":"def and(a: Short, b: Short): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"bitCount","t":"def bitCount(n: Short): Int","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"complement","t":"def complement(a: Short): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"highestOneBit","t":"def highestOneBit(n: Short): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"leftShift","t":"def leftShift(n: Short, i: Int): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"lowestOneBit","t":"def lowestOneBit(n: Short): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"numberOfLeadingZeros","t":"def numberOfLeadingZeros(n: Short): Int","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"numberOfTrailingZeros","t":"def numberOfTrailingZeros(n: Short): Int","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"one","t":"def one: Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"or","t":"def or(a: Short, b: Short): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"rightShift","t":"def rightShift(n: Short, i: Int): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"rotateLeft","t":"def rotateLeft(n: Short, i: Int): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"rotateRight","t":"def rotateRight(n: Short, i: Int): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"signed","t":"def signed: Boolean","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"signedRightShift","t":"def signedRightShift(n: Short, i: Int): Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"toHexString","t":"def toHexString(n: Short): String","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"width","t":"def width: Int","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsBitString.html","n":"zero","t":"def zero: Short","d":"spire/std/ShortIsBitString","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"ShortIsEuclideanRing","t":"trait ShortIsEuclideanRing extends EuclideanRing[Short]","d":"spire/std/ShortIsEuclideanRing","k":"trait"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"emod","t":"def emod(a: Short, b: Short): Short","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"equot","t":"def equot(a: Short, b: Short): Short","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"euclideanFunction","t":"def euclideanFunction(a: Short): BigInt","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"negate","t":"def negate(a: Short): Short","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"one","t":"def one: Short","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"plus","t":"def plus(a: Short, b: Short): Short","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsEuclideanRing.html","n":"zero","t":"def zero: Short","d":"spire/std/ShortIsEuclideanRing","k":"def"},
{"l":"spire/std/ShortIsNRoot.html","n":"ShortIsNRoot","t":"trait ShortIsNRoot extends NRoot[Short]","d":"spire/std/ShortIsNRoot","k":"trait"},
{"l":"spire/std/ShortIsNRoot.html","n":"fpow","t":"def fpow(a: Short, b: Short): Short","d":"spire/std/ShortIsNRoot","k":"def"},
{"l":"spire/std/ShortIsNRoot.html","n":"log","t":"def log(a: Short): Short","d":"spire/std/ShortIsNRoot","k":"def"},
{"l":"spire/std/ShortIsNRoot.html","n":"nroot","t":"def nroot(x: Short, n: Int): Short","d":"spire/std/ShortIsNRoot","k":"def"},
{"l":"spire/std/ShortIsReal.html","n":"ShortIsReal","t":"trait ShortIsReal extends IsIntegral[Short] with ShortTruncatedDivision","d":"spire/std/ShortIsReal","k":"trait"},
{"l":"spire/std/ShortIsReal.html","n":"toBigInt","t":"def toBigInt(n: Short): BigInt","d":"spire/std/ShortIsReal","k":"def"},
{"l":"spire/std/ShortIsReal.html","n":"toDouble","t":"def toDouble(n: Short): Double","d":"spire/std/ShortIsReal","k":"def"},
{"l":"spire/std/ShortOrder.html","n":"ShortOrder","t":"trait ShortOrder extends Order[Short]","d":"spire/std/ShortOrder","k":"trait"},
{"l":"spire/std/ShortOrder.html","n":"compare","t":"def compare(x: Short, y: Short): Int","d":"spire/std/ShortOrder","k":"def"},
{"l":"spire/std/ShortSigned.html","n":"ShortSigned","t":"trait ShortSigned extends Signed[Short] with ShortOrder","d":"spire/std/ShortSigned","k":"trait"},
{"l":"spire/std/ShortSigned.html","n":"order","t":"def order: Order[Short]","d":"spire/std/ShortSigned","k":"def"},
{"l":"spire/std/ShortTruncatedDivision.html","n":"ShortTruncatedDivision","t":"trait ShortTruncatedDivision extends forCommutativeRing[Short] with ShortSigned","d":"spire/std/ShortTruncatedDivision","k":"trait"},
{"l":"spire/std/ShortTruncatedDivision.html","n":"tmod","t":"def tmod(x: Short, y: Short): Short","d":"spire/std/ShortTruncatedDivision","k":"def"},
{"l":"spire/std/ShortTruncatedDivision.html","n":"toBigIntOpt","t":"def toBigIntOpt(x: Short): Opt[BigInt]","d":"spire/std/ShortTruncatedDivision","k":"def"},
{"l":"spire/std/ShortTruncatedDivision.html","n":"tquot","t":"def tquot(x: Short, y: Short): Short","d":"spire/std/ShortTruncatedDivision","k":"def"},
{"l":"spire/std/StringInstances.html","n":"StringInstances","t":"trait StringInstances extends StringInstances0","d":"spire/std/StringInstances","k":"trait"},
{"l":"spire/std/StringInstances.html","n":"StringAlgebra","t":"val StringAlgebra: Monoid[String]","d":"spire/std/StringInstances","k":"val"},
{"l":"spire/std/StringInstances.html","n":"StringOrder","t":"val StringOrder: Order[String]","d":"spire/std/StringInstances","k":"val"},
{"l":"spire/std/StringInstances0.html","n":"StringInstances0","t":"trait StringInstances0","d":"spire/std/StringInstances0","k":"trait"},
{"l":"spire/std/StringInstances0.html","n":"levenshteinDistance","t":"def levenshteinDistance: MetricSpace[String, Int]","d":"spire/std/StringInstances0","k":"def"},
{"l":"spire/std/StringMonoid.html","n":"StringMonoid","t":"class StringMonoid extends Monoid[String] with Serializable","d":"spire/std/StringMonoid","k":"class"},
{"l":"spire/std/StringMonoid.html","n":"combine","t":"def combine(x: String, y: String): String","d":"spire/std/StringMonoid","k":"def"},
{"l":"spire/std/StringMonoid.html","n":"empty","t":"def empty: String","d":"spire/std/StringMonoid","k":"def"},
{"l":"spire/std/StringOrder.html","n":"StringOrder","t":"class StringOrder extends Order[String] with Serializable","d":"spire/std/StringOrder","k":"class"},
{"l":"spire/std/StringOrder.html","n":"compare","t":"def compare(x: String, y: String): Int","d":"spire/std/StringOrder","k":"def"},
{"l":"spire/std/UnitAbGroup.html","n":"UnitAbGroup","t":"trait UnitAbGroup extends CommutativeGroup[Unit]","d":"spire/std/UnitAbGroup","k":"trait"},
{"l":"spire/std/UnitAlgebra.html","n":"UnitAlgebra","t":"class UnitAlgebra extends UnitAbGroup with UnitOrder with Serializable","d":"spire/std/UnitAlgebra","k":"class"},
{"l":"spire/std/UnitInstances.html","n":"UnitInstances","t":"trait UnitInstances","d":"spire/std/UnitInstances","k":"trait"},
{"l":"spire/std/UnitInstances.html","n":"UnitAlgebra","t":"val UnitAlgebra: CommutativeGroup[Unit] & Order[Unit]","d":"spire/std/UnitInstances","k":"val"},
{"l":"spire/std/UnitOrder.html","n":"UnitOrder","t":"trait UnitOrder extends Order[Unit] with Serializable","d":"spire/std/UnitOrder","k":"trait"},
{"l":"spire/std/UnitOrder.html","n":"compare","t":"def compare(x: Unit, y: Unit): Int","d":"spire/std/UnitOrder","k":"def"},
{"l":"spire/std/any$.html","n":"any","t":"object any extends AnyInstances","d":"spire/std/any$","k":"object"},
{"l":"spire/std/array$.html","n":"array","t":"object array extends ArrayInstances","d":"spire/std/array$","k":"object"},
{"l":"spire/std/bigDecimal$.html","n":"bigDecimal","t":"object bigDecimal extends BigDecimalInstances","d":"spire/std/bigDecimal$","k":"object"},
{"l":"spire/std/bigInt$.html","n":"bigInt","t":"object bigInt extends BigIntInstances","d":"spire/std/bigInt$","k":"object"},
{"l":"spire/std/bigInteger$.html","n":"bigInteger","t":"object bigInteger extends BigIntegerInstances","d":"spire/std/bigInteger$","k":"object"},
{"l":"spire/std/boolean$.html","n":"boolean","t":"object boolean extends BooleanInstances","d":"spire/std/boolean$","k":"object"},
{"l":"spire/std/byte$.html","n":"byte","t":"object byte extends ByteInstances","d":"spire/std/byte$","k":"object"},
{"l":"spire/std/char$.html","n":"char","t":"object char extends CharInstances","d":"spire/std/char$","k":"object"},
{"l":"spire/std/double$.html","n":"double","t":"object double extends DoubleInstances","d":"spire/std/double$","k":"object"},
{"l":"spire/std/float$.html","n":"float","t":"object float extends FloatInstances","d":"spire/std/float$","k":"object"},
{"l":"spire/std/int$.html","n":"int","t":"object int extends IntInstances","d":"spire/std/int$","k":"object"},
{"l":"spire/std/iterable$.html","n":"iterable","t":"object iterable extends IterableInstances","d":"spire/std/iterable$","k":"object"},
{"l":"spire/std/long$.html","n":"long","t":"object long extends LongInstances","d":"spire/std/long$","k":"object"},
{"l":"spire/std/map$.html","n":"map","t":"object map extends MapInstances","d":"spire/std/map$","k":"object"},
{"l":"spire/std/option$.html","n":"option","t":"object option extends OptionInstances","d":"spire/std/option$","k":"object"},
{"l":"spire/std/seq$.html","n":"seq","t":"object seq extends SeqInstances","d":"spire/std/seq$","k":"object"},
{"l":"spire/std/short$.html","n":"short","t":"object short extends ShortInstances","d":"spire/std/short$","k":"object"},
{"l":"spire/std/string$.html","n":"string","t":"object string extends StringInstances","d":"spire/std/string$","k":"object"},
{"l":"spire/std/tuples$.html","n":"tuples","t":"object tuples extends ProductInstances","d":"spire/std/tuples$","k":"object"},
{"l":"spire/std/unit$.html","n":"unit","t":"object unit extends UnitInstances","d":"spire/std/unit$","k":"object"},
{"l":"spire/syntax.html","n":"spire.syntax","t":"package spire.syntax","d":"spire/syntax","k":"package"},
{"l":"spire/syntax/ActionSyntax.html","n":"ActionSyntax","t":"trait ActionSyntax","d":"spire/syntax/ActionSyntax","k":"trait"},
{"l":"spire/syntax/ActionSyntax.html","n":"leftActionOps","t":"def leftActionOps[G](g: G): LeftActionOps[G]","d":"spire/syntax/ActionSyntax","k":"def"},
{"l":"spire/syntax/ActionSyntax.html","n":"rightActionOps","t":"def rightActionOps[P](p: P): RightActionOps[P]","d":"spire/syntax/ActionSyntax","k":"def"},
{"l":"spire/syntax/AdditiveGroupOps.html","n":"AdditiveGroupOps","t":"class AdditiveGroupOps[A](lhs: A)(using ev: AdditiveGroup[A])","d":"spire/syntax/AdditiveGroupOps","k":"class"},
{"l":"spire/syntax/AdditiveGroupOps.html","n":"-","t":"def -(rhs: A): A","d":"spire/syntax/AdditiveGroupOps","k":"def"},
{"l":"spire/syntax/AdditiveGroupOps.html","n":"-","t":"def -(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/AdditiveGroupOps","k":"def"},
{"l":"spire/syntax/AdditiveGroupOps.html","n":"-","t":"def -(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/AdditiveGroupOps","k":"def"},
{"l":"spire/syntax/AdditiveGroupOps.html","n":"-","t":"def -(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/AdditiveGroupOps","k":"def"},
{"l":"spire/syntax/AdditiveGroupOps.html","n":"unary_-","t":"def unary_-: A","d":"spire/syntax/AdditiveGroupOps","k":"def"},
{"l":"spire/syntax/AdditiveGroupSyntax.html","n":"AdditiveGroupSyntax","t":"trait AdditiveGroupSyntax extends AdditiveMonoidSyntax","d":"spire/syntax/AdditiveGroupSyntax","k":"trait"},
{"l":"spire/syntax/AdditiveGroupSyntax.html","n":"additiveGroupOps","t":"def additiveGroupOps[A : AdditiveGroup](a: A): AdditiveGroupOps[A]","d":"spire/syntax/AdditiveGroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveGroupSyntax.html","n":"literalDoubleAdditiveGroupOps","t":"def literalDoubleAdditiveGroupOps(lhs: Double): LiteralDoubleAdditiveGroupOps","d":"spire/syntax/AdditiveGroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveGroupSyntax.html","n":"literalIntAdditiveGroupOps","t":"def literalIntAdditiveGroupOps(lhs: Int): LiteralIntAdditiveGroupOps","d":"spire/syntax/AdditiveGroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveGroupSyntax.html","n":"literalLongAdditiveGroupOps","t":"def literalLongAdditiveGroupOps(lhs: Long): LiteralLongAdditiveGroupOps","d":"spire/syntax/AdditiveGroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveMonoidOps.html","n":"AdditiveMonoidOps","t":"class AdditiveMonoidOps[A](lhs: A)(using ev: AdditiveMonoid[A])","d":"spire/syntax/AdditiveMonoidOps","k":"class"},
{"l":"spire/syntax/AdditiveMonoidOps.html","n":"isZero","t":"def isZero(using ev1: Eq[A]): Boolean","d":"spire/syntax/AdditiveMonoidOps","k":"def"},
{"l":"spire/syntax/AdditiveMonoidSyntax.html","n":"AdditiveMonoidSyntax","t":"trait AdditiveMonoidSyntax extends AdditiveSemigroupSyntax","d":"spire/syntax/AdditiveMonoidSyntax","k":"trait"},
{"l":"spire/syntax/AdditiveMonoidSyntax.html","n":"additiveMonoidOps","t":"def additiveMonoidOps[A](a: A)(implicit ev: AdditiveMonoid[A]): AdditiveMonoidOps[A]","d":"spire/syntax/AdditiveMonoidSyntax","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupOps.html","n":"AdditiveSemigroupOps","t":"class AdditiveSemigroupOps[A](lhs: A)(using ev: AdditiveSemigroup[A])","d":"spire/syntax/AdditiveSemigroupOps","k":"class"},
{"l":"spire/syntax/AdditiveSemigroupOps.html","n":"+","t":"def +(rhs: A): A","d":"spire/syntax/AdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupOps.html","n":"+","t":"def +(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/AdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupOps.html","n":"+","t":"def +(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/AdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupOps.html","n":"+","t":"def +(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/AdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupSyntax.html","n":"AdditiveSemigroupSyntax","t":"trait AdditiveSemigroupSyntax","d":"spire/syntax/AdditiveSemigroupSyntax","k":"trait"},
{"l":"spire/syntax/AdditiveSemigroupSyntax.html","n":"additiveSemigroupOps","t":"def additiveSemigroupOps[A : AdditiveSemigroup](a: A): AdditiveSemigroupOps[A]","d":"spire/syntax/AdditiveSemigroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupSyntax.html","n":"literalDoubleAdditiveSemigroupOps","t":"def literalDoubleAdditiveSemigroupOps(lhs: Double): LiteralDoubleAdditiveSemigroupOps","d":"spire/syntax/AdditiveSemigroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupSyntax.html","n":"literalIntAdditiveSemigroupOps","t":"def literalIntAdditiveSemigroupOps(lhs: Int): LiteralIntAdditiveSemigroupOps","d":"spire/syntax/AdditiveSemigroupSyntax","k":"def"},
{"l":"spire/syntax/AdditiveSemigroupSyntax.html","n":"literalLongAdditiveSemigroupOps","t":"def literalLongAdditiveSemigroupOps(lhs: Long): LiteralLongAdditiveSemigroupOps","d":"spire/syntax/AdditiveSemigroupSyntax","k":"def"},
{"l":"spire/syntax/AllSyntax.html","n":"AllSyntax","t":"trait AllSyntax extends LiteralsSyntax with CforSyntax with FastForSyntax with EqSyntax with PartialOrderSyntax with OrderSyntax with SignedSyntax with TruncatedDivisionSyntax with InvolutionSyntax with IsRealSyntax with ConvertableFromSyntax with SemigroupoidSyntax with GroupoidSyntax with SemigroupSyntax with MonoidSyntax with GroupSyntax with AdditiveSemigroupSyntax with AdditiveMonoidSyntax with AdditiveGroupSyntax with MultiplicativeSemigroupSyntax with MultiplicativeMonoidSyntax with MultiplicativeGroupSyntax with SemiringSyntax with RigSyntax with RngSyntax with RingSyntax with GCDRingSyntax with EuclideanRingSyntax with FieldSyntax with NRootSyntax with TrigSyntax with IntervalSyntax with LeftModuleSyntax with RightModuleSyntax with CModuleSyntax with VectorSpaceSyntax with NormedVectorSpaceSyntax with InnerProductSpaceSyntax with CoordinateSpaceSyntax with LatticeSyntax with LogicSyntax with HeytingSyntax with BoolSyntax with BitStringSyntax with PartialActionSyntax with ActionSyntax with TorsorSyntax with IntegralSyntax with FractionalSyntax with NumericSyntax with IntSyntax with LongSyntax with DoubleSyntax with BigIntSyntax with ArraySyntax with SeqSyntax","d":"spire/syntax/AllSyntax","k":"trait"},
{"l":"spire/syntax/BitStringOps.html","n":"BitStringOps","t":"class BitStringOps[A](lhs: A)(using ev: BitString[A])","d":"spire/syntax/BitStringOps","k":"class"},
{"l":"spire/syntax/BitStringOps.html","n":"<<","t":"def <<(rhs: Int): A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":">>","t":"def >>(rhs: Int): A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":">>>","t":"def >>>(rhs: Int): A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"bitCount","t":"def bitCount: Int","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"highestOneBit","t":"def highestOneBit: A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"lowestOneBit","t":"def lowestOneBit: A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"numberOfLeadingZeros","t":"def numberOfLeadingZeros: Int","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"numberOfTrailingZeros","t":"def numberOfTrailingZeros: Int","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"rotateLeft","t":"def rotateLeft(rhs: Int): A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"rotateRight","t":"def rotateRight(rhs: Int): A","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringOps.html","n":"toHexString","t":"def toHexString: String","d":"spire/syntax/BitStringOps","k":"def"},
{"l":"spire/syntax/BitStringSyntax.html","n":"BitStringSyntax","t":"trait BitStringSyntax","d":"spire/syntax/BitStringSyntax","k":"trait"},
{"l":"spire/syntax/BitStringSyntax.html","n":"bitStringOps","t":"def bitStringOps[A : BitString](a: A): BitStringOps[A]","d":"spire/syntax/BitStringSyntax","k":"def"},
{"l":"spire/syntax/BoolOps.html","n":"BoolOps","t":"class BoolOps[A](lhs: A)(implicit evidence$1: Bool[A], ev: Bool[A])","d":"spire/syntax/BoolOps","k":"class"},
{"l":"spire/syntax/BoolOps.html","n":"^","t":"def ^(rhs: A): A","d":"spire/syntax/BoolOps","k":"def"},
{"l":"spire/syntax/BoolOps.html","n":"^","t":"def ^(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/BoolOps","k":"def"},
{"l":"spire/syntax/BoolOps.html","n":"^","t":"def ^(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/BoolOps","k":"def"},
{"l":"spire/syntax/BoolOps.html","n":"nand","t":"def nand(rhs: A): A","d":"spire/syntax/BoolOps","k":"def"},
{"l":"spire/syntax/BoolOps.html","n":"nor","t":"def nor(rhs: A): A","d":"spire/syntax/BoolOps","k":"def"},
{"l":"spire/syntax/BoolOps.html","n":"nxor","t":"def nxor(rhs: A): A","d":"spire/syntax/BoolOps","k":"def"},
{"l":"spire/syntax/BoolSyntax.html","n":"BoolSyntax","t":"trait BoolSyntax extends HeytingSyntax","d":"spire/syntax/BoolSyntax","k":"trait"},
{"l":"spire/syntax/BoolSyntax.html","n":"boolOps","t":"def boolOps[A : Bool](a: A): BoolOps[A]","d":"spire/syntax/BoolSyntax","k":"def"},
{"l":"spire/syntax/CModuleSyntax.html","n":"CModuleSyntax","t":"trait CModuleSyntax extends LeftModuleSyntax with RightModuleSyntax","d":"spire/syntax/CModuleSyntax","k":"trait"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"ConvertableFromSyntax","t":"trait ConvertableFromSyntax","d":"spire/syntax/ConvertableFromSyntax","k":"trait"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toBigDecimal","t":"def toBigDecimal(using cf: ConvertableFrom[A]): BigDecimal","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toBigInt","t":"def toBigInt(using cf: ConvertableFrom[A]): BigInt","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toByte","t":"def toByte(using cf: ConvertableFrom[A]): Byte","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toDouble","t":"def toDouble(using cf: ConvertableFrom[A]): Double","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toFloat","t":"def toFloat(using cf: ConvertableFrom[A]): Float","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toInt","t":"def toInt(using cf: ConvertableFrom[A]): Int","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toLong","t":"def toLong(using cf: ConvertableFrom[A]): Long","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toRational","t":"def toRational(using cf: ConvertableFrom[A]): Rational","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toShort","t":"def toShort(using cf: ConvertableFrom[A]): Short","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/ConvertableFromSyntax.html","n":"toString","t":"def toString(using cf: ConvertableFrom[A]): String","d":"spire/syntax/ConvertableFromSyntax","k":"def"},
{"l":"spire/syntax/CoordinateSpaceOps.html","n":"CoordinateSpaceOps","t":"class CoordinateSpaceOps[V](v: V) extends AnyVal","d":"spire/syntax/CoordinateSpaceOps","k":"class"},
{"l":"spire/syntax/CoordinateSpaceOps.html","n":"_x","t":"def _x[F](using ev: CoordinateSpace[V, F]): F","d":"spire/syntax/CoordinateSpaceOps","k":"def"},
{"l":"spire/syntax/CoordinateSpaceOps.html","n":"_y","t":"def _y[F](using ev: CoordinateSpace[V, F]): F","d":"spire/syntax/CoordinateSpaceOps","k":"def"},
{"l":"spire/syntax/CoordinateSpaceOps.html","n":"_z","t":"def _z[F](using ev: CoordinateSpace[V, F]): F","d":"spire/syntax/CoordinateSpaceOps","k":"def"},
{"l":"spire/syntax/CoordinateSpaceOps.html","n":"coord","t":"def coord[F](rhs: Int)(using ev: CoordinateSpace[V, F]): F","d":"spire/syntax/CoordinateSpaceOps","k":"def"},
{"l":"spire/syntax/CoordinateSpaceOps.html","n":"dimensions","t":"def dimensions[F](using ev: CoordinateSpace[V, F]): Int","d":"spire/syntax/CoordinateSpaceOps","k":"def"},
{"l":"spire/syntax/CoordinateSpaceSyntax.html","n":"CoordinateSpaceSyntax","t":"trait CoordinateSpaceSyntax extends InnerProductSpaceSyntax","d":"spire/syntax/CoordinateSpaceSyntax","k":"trait"},
{"l":"spire/syntax/CoordinateSpaceSyntax.html","n":"coordinateSpaceOps","t":"def coordinateSpaceOps[V](v: V): CoordinateSpaceOps[V]","d":"spire/syntax/CoordinateSpaceSyntax","k":"def"},
{"l":"spire/syntax/EqOps.html","n":"EqOps","t":"class EqOps[A](lhs: A)(using ev: Eq[A])","d":"spire/syntax/EqOps","k":"class"},
{"l":"spire/syntax/EqOps.html","n":"=!=","t":"def =!=[B](rhs: B)(using ev1: B =:= A): Boolean","d":"spire/syntax/EqOps","k":"def"},
{"l":"spire/syntax/EqOps.html","n":"===","t":"def ===[B](rhs: B)(using ev1: B =:= A): Boolean","d":"spire/syntax/EqOps","k":"def"},
{"l":"spire/syntax/EqSyntax.html","n":"EqSyntax","t":"trait EqSyntax","d":"spire/syntax/EqSyntax","k":"trait"},
{"l":"spire/syntax/EqSyntax.html","n":"eqOps","t":"def eqOps[A : Eq](a: A): EqOps[A]","d":"spire/syntax/EqSyntax","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"EuclideanRingOps","t":"class EuclideanRingOps[A](lhs: A)(using ev: EuclideanRing[A])","d":"spire/syntax/EuclideanRingOps","k":"class"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"emod","t":"def emod(rhs: A): A","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"emod","t":"def emod(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"emod","t":"def emod(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"equot","t":"def equot(rhs: A): A","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"equot","t":"def equot(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"equot","t":"def equot(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"equotmod","t":"def equotmod(rhs: A): (A, A)","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"equotmod","t":"def equotmod(rhs: Int)(using ev1: Ring[A]): (A, A)","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"equotmod","t":"def equotmod(rhs: Double)(using ev1: Field[A]): (A, A)","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingOps.html","n":"euclideanFunction","t":"def euclideanFunction: BigInt","d":"spire/syntax/EuclideanRingOps","k":"def"},
{"l":"spire/syntax/EuclideanRingSyntax.html","n":"EuclideanRingSyntax","t":"trait EuclideanRingSyntax extends GCDRingSyntax","d":"spire/syntax/EuclideanRingSyntax","k":"trait"},
{"l":"spire/syntax/EuclideanRingSyntax.html","n":"euclideanRingOps","t":"def euclideanRingOps[A : EuclideanRing](a: A): EuclideanRingOps[A]","d":"spire/syntax/EuclideanRingSyntax","k":"def"},
{"l":"spire/syntax/EuclideanRingSyntax.html","n":"literalDoubleEuclideanRingOps","t":"def literalDoubleEuclideanRingOps(lhs: Double): LiteralDoubleEuclideanRingOps","d":"spire/syntax/EuclideanRingSyntax","k":"def"},
{"l":"spire/syntax/EuclideanRingSyntax.html","n":"literalIntEuclideanRingOps","t":"def literalIntEuclideanRingOps(lhs: Int): LiteralIntEuclideanRingOps","d":"spire/syntax/EuclideanRingSyntax","k":"def"},
{"l":"spire/syntax/EuclideanRingSyntax.html","n":"literalLongEuclideanRingOps","t":"def literalLongEuclideanRingOps(lhs: Long): LiteralLongEuclideanRingOps","d":"spire/syntax/EuclideanRingSyntax","k":"def"},
{"l":"spire/syntax/FastForSyntax.html","n":"FastForSyntax","t":"trait FastForSyntax","d":"spire/syntax/FastForSyntax","k":"trait"},
{"l":"spire/syntax/FastForSyntax.html","n":"RangeElem","t":"type RangeElem[X <: RangeLike] = X match {\n  case Range => Int\n  case NumericRange[Long] => Long\n}","d":"spire/syntax/FastForSyntax","k":"type"},
{"l":"spire/syntax/FastForSyntax.html","n":"RangeLike","t":"type RangeLike = Range | NumericRange[Long]","d":"spire/syntax/FastForSyntax","k":"type"},
{"l":"spire/syntax/FastForSyntax.html","n":"fastFor","t":"def fastFor[A](inline init: A)(inline test: A => Boolean, inline next: A => A)(inline body: A => Unit): Unit","d":"spire/syntax/FastForSyntax","k":"def"},
{"l":"spire/syntax/FastForSyntax.html","n":"fastForRange","t":"def fastForRange[R <: RangeLike](inline r: R)(inline body: RangeElem[R] => Unit): Unit","d":"spire/syntax/FastForSyntax","k":"def"},
{"l":"spire/syntax/FastForSyntax.html","n":"fastForRange2","t":"def fastForRange2[R <: RangeLike](inline r1: R, inline r2: R)(inline body: (RangeElem[R], RangeElem[R]) => Unit): Unit","d":"spire/syntax/FastForSyntax","k":"def"},
{"l":"spire/syntax/FieldSyntax.html","n":"FieldSyntax","t":"trait FieldSyntax extends EuclideanRingSyntax with MultiplicativeGroupSyntax","d":"spire/syntax/FieldSyntax","k":"trait"},
{"l":"spire/syntax/FractionalSyntax.html","n":"FractionalSyntax","t":"trait FractionalSyntax extends FieldSyntax with NRootSyntax with ConvertableFromSyntax with OrderSyntax with SignedSyntax","d":"spire/syntax/FractionalSyntax","k":"trait"},
{"l":"spire/syntax/GCDRingOps.html","n":"GCDRingOps","t":"class GCDRingOps[A](lhs: A)(using ev: GCDRing[A])","d":"spire/syntax/GCDRingOps","k":"class"},
{"l":"spire/syntax/GCDRingOps.html","n":"gcd","t":"def gcd(rhs: A)(using Eq[A]): A","d":"spire/syntax/GCDRingOps","k":"def"},
{"l":"spire/syntax/GCDRingOps.html","n":"lcm","t":"def lcm(rhs: A)(using Eq[A]): A","d":"spire/syntax/GCDRingOps","k":"def"},
{"l":"spire/syntax/GCDRingSyntax.html","n":"GCDRingSyntax","t":"trait GCDRingSyntax extends RingSyntax","d":"spire/syntax/GCDRingSyntax","k":"trait"},
{"l":"spire/syntax/GCDRingSyntax.html","n":"gcdRingOps","t":"def gcdRingOps[A : GCDRing](a: A): GCDRingOps[A]","d":"spire/syntax/GCDRingSyntax","k":"def"},
{"l":"spire/syntax/GroupOps.html","n":"GroupOps","t":"class GroupOps[A](lhs: A)(using ev: Group[A])","d":"spire/syntax/GroupOps","k":"class"},
{"l":"spire/syntax/GroupOps.html","n":"inverse","t":"def inverse: A","d":"spire/syntax/GroupOps","k":"def"},
{"l":"spire/syntax/GroupOps.html","n":"|-|","t":"def |-|(rhs: A): A","d":"spire/syntax/GroupOps","k":"def"},
{"l":"spire/syntax/GroupSyntax.html","n":"GroupSyntax","t":"trait GroupSyntax extends MonoidSyntax","d":"spire/syntax/GroupSyntax","k":"trait"},
{"l":"spire/syntax/GroupSyntax.html","n":"groupOps","t":"def groupOps[A : Group](a: A): GroupOps[A]","d":"spire/syntax/GroupSyntax","k":"def"},
{"l":"spire/syntax/GroupoidCommonOps.html","n":"GroupoidCommonOps","t":"class GroupoidCommonOps[A](lhs: A)(implicit ev: Groupoid[A])","d":"spire/syntax/GroupoidCommonOps","k":"class"},
{"l":"spire/syntax/GroupoidCommonOps.html","n":"inverse","t":"def inverse: A","d":"spire/syntax/GroupoidCommonOps","k":"def"},
{"l":"spire/syntax/GroupoidCommonOps.html","n":"isId","t":"def isId(implicit ev1: Eq[A]): Boolean","d":"spire/syntax/GroupoidCommonOps","k":"def"},
{"l":"spire/syntax/GroupoidOps.html","n":"GroupoidOps","t":"class GroupoidOps[A](lhs: A)(using ev: Groupoid[A])","d":"spire/syntax/GroupoidOps","k":"class"},
{"l":"spire/syntax/GroupoidOps.html","n":"leftId","t":"def leftId: A","d":"spire/syntax/GroupoidOps","k":"def"},
{"l":"spire/syntax/GroupoidOps.html","n":"rightId","t":"def rightId: A","d":"spire/syntax/GroupoidOps","k":"def"},
{"l":"spire/syntax/GroupoidOps.html","n":"|-|?","t":"def |-|?(rhs: A): Opt[A]","d":"spire/syntax/GroupoidOps","k":"def"},
{"l":"spire/syntax/GroupoidOps.html","n":"|-|??","t":"def |-|??(rhs: A): Boolean","d":"spire/syntax/GroupoidOps","k":"def"},
{"l":"spire/syntax/GroupoidSyntax.html","n":"GroupoidSyntax","t":"trait GroupoidSyntax extends SemigroupoidSyntax","d":"spire/syntax/GroupoidSyntax","k":"trait"},
{"l":"spire/syntax/GroupoidSyntax.html","n":"groupoidCommonOps","t":"def groupoidCommonOps[A](a: A)(using ev: Groupoid[A], ni: NotGiven[Monoid[A]]): GroupoidCommonOps[A]","d":"spire/syntax/GroupoidSyntax","k":"def"},
{"l":"spire/syntax/GroupoidSyntax.html","n":"groupoidOps","t":"def groupoidOps[A](a: A)(implicit ev: Groupoid[A]): GroupoidOps[A]","d":"spire/syntax/GroupoidSyntax","k":"def"},
{"l":"spire/syntax/HeytingOps.html","n":"HeytingOps","t":"class HeytingOps[A](lhs: A)(using ev: Heyting[A])","d":"spire/syntax/HeytingOps","k":"class"},
{"l":"spire/syntax/HeytingOps.html","n":"&","t":"def &(rhs: A): A","d":"spire/syntax/HeytingOps","k":"def"},
{"l":"spire/syntax/HeytingOps.html","n":"&","t":"def &(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/HeytingOps","k":"def"},
{"l":"spire/syntax/HeytingOps.html","n":"imp","t":"def imp(rhs: A): A","d":"spire/syntax/HeytingOps","k":"def"},
{"l":"spire/syntax/HeytingOps.html","n":"unary_~","t":"def unary_~: A","d":"spire/syntax/HeytingOps","k":"def"},
{"l":"spire/syntax/HeytingOps.html","n":"|","t":"def |(rhs: A): A","d":"spire/syntax/HeytingOps","k":"def"},
{"l":"spire/syntax/HeytingOps.html","n":"|","t":"def |(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/HeytingOps","k":"def"},
{"l":"spire/syntax/HeytingSyntax.html","n":"HeytingSyntax","t":"trait HeytingSyntax","d":"spire/syntax/HeytingSyntax","k":"trait"},
{"l":"spire/syntax/HeytingSyntax.html","n":"heytingOps","t":"def heytingOps[A : Heyting](a: A): HeytingOps[A]","d":"spire/syntax/HeytingSyntax","k":"def"},
{"l":"spire/syntax/InnerProductSpaceOps.html","n":"InnerProductSpaceOps","t":"class InnerProductSpaceOps[V](lhs: V) extends AnyVal","d":"spire/syntax/InnerProductSpaceOps","k":"class"},
{"l":"spire/syntax/InnerProductSpaceOps.html","n":"dot","t":"def dot[F](rhs: V)(using ev: InnerProductSpace[V, F]): F","d":"spire/syntax/InnerProductSpaceOps","k":"def"},
{"l":"spire/syntax/InnerProductSpaceOps.html","n":"⋅","t":"def ⋅[F](rhs: V)(using ev: InnerProductSpace[V, F]): F","d":"spire/syntax/InnerProductSpaceOps","k":"def"},
{"l":"spire/syntax/InnerProductSpaceSyntax.html","n":"InnerProductSpaceSyntax","t":"trait InnerProductSpaceSyntax extends VectorSpaceSyntax","d":"spire/syntax/InnerProductSpaceSyntax","k":"trait"},
{"l":"spire/syntax/InnerProductSpaceSyntax.html","n":"innerProductSpaceOps","t":"def innerProductSpaceOps[V](v: V): InnerProductSpaceOps[V]","d":"spire/syntax/InnerProductSpaceSyntax","k":"def"},
{"l":"spire/syntax/IntegralSyntax.html","n":"IntegralSyntax","t":"trait IntegralSyntax extends EuclideanRingSyntax with ConvertableFromSyntax with OrderSyntax with SignedSyntax","d":"spire/syntax/IntegralSyntax","k":"trait"},
{"l":"spire/syntax/IntegralSyntax.html","n":"integralOps","t":"def integralOps[A : Integral](a: A): IntegralOps[A]","d":"spire/syntax/IntegralSyntax","k":"def"},
{"l":"spire/syntax/IntervalPointOps.html","n":"IntervalPointOps","t":"class IntervalPointOps[A](lhs: A)(using o: Order[A], ev: AdditiveGroup[A])","d":"spire/syntax/IntervalPointOps","k":"class"},
{"l":"spire/syntax/IntervalPointOps.html","n":"+/-","t":"def +/-(rhs: A): Interval[A]","d":"spire/syntax/IntervalPointOps","k":"def"},
{"l":"spire/syntax/IntervalPointOps.html","n":"±","t":"def ±(rhs: A): Interval[A]","d":"spire/syntax/IntervalPointOps","k":"def"},
{"l":"spire/syntax/IntervalSyntax.html","n":"IntervalSyntax","t":"trait IntervalSyntax","d":"spire/syntax/IntervalSyntax","k":"trait"},
{"l":"spire/syntax/IntervalSyntax.html","n":"intervalOps","t":"def intervalOps[A : AdditiveGroup](a: A): IntervalPointOps[A]","d":"spire/syntax/IntervalSyntax","k":"def"},
{"l":"spire/syntax/InvolutionOps.html","n":"InvolutionOps","t":"class InvolutionOps[A](lhs: A)(using ev: Involution[A])","d":"spire/syntax/InvolutionOps","k":"class"},
{"l":"spire/syntax/InvolutionOps.html","n":"adjoint","t":"def adjoint: A","d":"spire/syntax/InvolutionOps","k":"def"},
{"l":"spire/syntax/InvolutionSyntax.html","n":"InvolutionSyntax","t":"trait InvolutionSyntax","d":"spire/syntax/InvolutionSyntax","k":"trait"},
{"l":"spire/syntax/InvolutionSyntax.html","n":"involutionOps","t":"def involutionOps[A : Involution](lhs: A): InvolutionOps[A]","d":"spire/syntax/InvolutionSyntax","k":"def"},
{"l":"spire/syntax/IsRealOps.html","n":"IsRealOps","t":"class IsRealOps[A](lhs: A)(using is: IsReal[A])","d":"spire/syntax/IsRealOps","k":"class"},
{"l":"spire/syntax/IsRealOps.html","n":"ceil","t":"def ceil: A","d":"spire/syntax/IsRealOps","k":"def"},
{"l":"spire/syntax/IsRealOps.html","n":"floor","t":"def floor: A","d":"spire/syntax/IsRealOps","k":"def"},
{"l":"spire/syntax/IsRealOps.html","n":"isWhole","t":"def isWhole: Boolean","d":"spire/syntax/IsRealOps","k":"def"},
{"l":"spire/syntax/IsRealOps.html","n":"round","t":"def round: A","d":"spire/syntax/IsRealOps","k":"def"},
{"l":"spire/syntax/IsRealSyntax.html","n":"IsRealSyntax","t":"trait IsRealSyntax extends SignedSyntax","d":"spire/syntax/IsRealSyntax","k":"trait"},
{"l":"spire/syntax/IsRealSyntax.html","n":"isRealOps","t":"def isRealOps[A : IsReal](a: A): IsRealOps[A]","d":"spire/syntax/IsRealSyntax","k":"def"},
{"l":"spire/syntax/JoinOps.html","n":"JoinOps","t":"class JoinOps[A](lhs: A)(using ev: JoinSemilattice[A])","d":"spire/syntax/JoinOps","k":"class"},
{"l":"spire/syntax/JoinOps.html","n":"join","t":"def join(rhs: A): A","d":"spire/syntax/JoinOps","k":"def"},
{"l":"spire/syntax/JoinOps.html","n":"join","t":"def join(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/JoinOps","k":"def"},
{"l":"spire/syntax/JoinOps.html","n":"∨","t":"def ∨(rhs: A): A","d":"spire/syntax/JoinOps","k":"def"},
{"l":"spire/syntax/JoinOps.html","n":"∨","t":"def ∨(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/JoinOps","k":"def"},
{"l":"spire/syntax/LatticeSyntax.html","n":"LatticeSyntax","t":"trait LatticeSyntax","d":"spire/syntax/LatticeSyntax","k":"trait"},
{"l":"spire/syntax/LatticeSyntax.html","n":"joinOps","t":"def joinOps[A : JoinSemilattice](a: A): JoinOps[A]","d":"spire/syntax/LatticeSyntax","k":"def"},
{"l":"spire/syntax/LatticeSyntax.html","n":"meetOps","t":"def meetOps[A : MeetSemilattice](a: A): MeetOps[A]","d":"spire/syntax/LatticeSyntax","k":"def"},
{"l":"spire/syntax/LeftActionOps.html","n":"LeftActionOps","t":"class LeftActionOps[G](lhs: G) extends AnyVal","d":"spire/syntax/LeftActionOps","k":"class"},
{"l":"spire/syntax/LeftActionOps.html","n":"*>","t":"def *>[P](rhs: P)(using ev: MultiplicativeAction[P, G]): P","d":"spire/syntax/LeftActionOps","k":"def"},
{"l":"spire/syntax/LeftActionOps.html","n":"+>","t":"def +>[P](rhs: P)(using ev: AdditiveAction[P, G]): P","d":"spire/syntax/LeftActionOps","k":"def"},
{"l":"spire/syntax/LeftActionOps.html","n":"|+|>","t":"def |+|>[P](rhs: P)(using ev: LeftAction[P, G]): P","d":"spire/syntax/LeftActionOps","k":"def"},
{"l":"spire/syntax/LeftModuleOps.html","n":"LeftModuleOps","t":"class LeftModuleOps[V](x: V) extends AnyVal","d":"spire/syntax/LeftModuleOps","k":"class"},
{"l":"spire/syntax/LeftModuleOps.html","n":"*:","t":"def *:[F](lhs: F)(using ev: LeftModule[V, F]): V","d":"spire/syntax/LeftModuleOps","k":"def"},
{"l":"spire/syntax/LeftModuleOps.html","n":"*:","t":"def *:[F](lhs: Int)(using ev: LeftModule[V, F], F: Ring[F]): V","d":"spire/syntax/LeftModuleOps","k":"def"},
{"l":"spire/syntax/LeftModuleSyntax.html","n":"LeftModuleSyntax","t":"trait LeftModuleSyntax extends RingSyntax","d":"spire/syntax/LeftModuleSyntax","k":"trait"},
{"l":"spire/syntax/LeftModuleSyntax.html","n":"lms","t":"def lms[V](v: V): LeftModuleOps[V]","d":"spire/syntax/LeftModuleSyntax","k":"def"},
{"l":"spire/syntax/LeftPartialActionOps.html","n":"LeftPartialActionOps","t":"class LeftPartialActionOps[G](lhs: G) extends AnyVal","d":"spire/syntax/LeftPartialActionOps","k":"class"},
{"l":"spire/syntax/LeftPartialActionOps.html","n":"??|+|>","t":"def ??|+|>[P](rhs: P)(using ev: LeftPartialAction[P, G]): Boolean","d":"spire/syntax/LeftPartialActionOps","k":"def"},
{"l":"spire/syntax/LeftPartialActionOps.html","n":"?|+|>","t":"def ?|+|>[P](rhs: P)(using ev: LeftPartialAction[P, G]): Opt[P]","d":"spire/syntax/LeftPartialActionOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleAdditiveGroupOps.html","n":"LiteralDoubleAdditiveGroupOps","t":"class LiteralDoubleAdditiveGroupOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleAdditiveGroupOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleAdditiveGroupOps.html","n":"-","t":"def -[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralDoubleAdditiveGroupOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleAdditiveGroupOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleAdditiveGroupOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleAdditiveSemigroupOps.html","n":"LiteralDoubleAdditiveSemigroupOps","t":"class LiteralDoubleAdditiveSemigroupOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleAdditiveSemigroupOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleAdditiveSemigroupOps.html","n":"+","t":"def +[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralDoubleAdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleAdditiveSemigroupOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleAdditiveSemigroupOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleEuclideanRingOps.html","n":"LiteralDoubleEuclideanRingOps","t":"class LiteralDoubleEuclideanRingOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleEuclideanRingOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleEuclideanRingOps.html","n":"emod","t":"def emod[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralDoubleEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleEuclideanRingOps.html","n":"equot","t":"def equot[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralDoubleEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleEuclideanRingOps.html","n":"equotmod","t":"def equotmod[A](rhs: A)(implicit ev: Field[A]): (A, A)","d":"spire/syntax/LiteralDoubleEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleEuclideanRingOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleEuclideanRingOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleMultiplicativeGroupOps.html","n":"LiteralDoubleMultiplicativeGroupOps","t":"class LiteralDoubleMultiplicativeGroupOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleMultiplicativeGroupOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleMultiplicativeGroupOps.html","n":"/","t":"def /[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralDoubleMultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleMultiplicativeGroupOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleMultiplicativeGroupOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleMultiplicativeSemigroupOps.html","n":"LiteralDoubleMultiplicativeSemigroupOps","t":"class LiteralDoubleMultiplicativeSemigroupOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleMultiplicativeSemigroupOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleMultiplicativeSemigroupOps.html","n":"*","t":"def *[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralDoubleMultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleMultiplicativeSemigroupOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleMultiplicativeSemigroupOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"LiteralDoubleOrderOps","t":"class LiteralDoubleOrderOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleOrderOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"<","t":"def <[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"<=","t":"def <=[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":">","t":"def >[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":">=","t":"def >=[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"cmp","t":"def cmp[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Int","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleOrderOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"max","t":"def max[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleOrderOps.html","n":"min","t":"def min[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralDoubleOrderOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"LiteralDoubleTruncatedDivisionOps","t":"class LiteralDoubleTruncatedDivisionOps(val lhs: Double) extends AnyVal","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"class"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"fmod","t":"def fmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"fquot","t":"def fquot[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"fquotmod","t":"def fquotmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"lhs","t":"val lhs: Double","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"val"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"tmod","t":"def tmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"tquot","t":"def tquot[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralDoubleTruncatedDivisionOps.html","n":"tquotmod","t":"def tquotmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralDoubleTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralIntAdditiveGroupOps.html","n":"LiteralIntAdditiveGroupOps","t":"class LiteralIntAdditiveGroupOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntAdditiveGroupOps","k":"class"},
{"l":"spire/syntax/LiteralIntAdditiveGroupOps.html","n":"-","t":"def -[A](rhs: A)(implicit ev: Ring[A]): A","d":"spire/syntax/LiteralIntAdditiveGroupOps","k":"def"},
{"l":"spire/syntax/LiteralIntAdditiveGroupOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntAdditiveGroupOps","k":"val"},
{"l":"spire/syntax/LiteralIntAdditiveSemigroupOps.html","n":"LiteralIntAdditiveSemigroupOps","t":"class LiteralIntAdditiveSemigroupOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntAdditiveSemigroupOps","k":"class"},
{"l":"spire/syntax/LiteralIntAdditiveSemigroupOps.html","n":"+","t":"def +[A](rhs: A)(implicit ev: Ring[A]): A","d":"spire/syntax/LiteralIntAdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/LiteralIntAdditiveSemigroupOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntAdditiveSemigroupOps","k":"val"},
{"l":"spire/syntax/LiteralIntEuclideanRingOps.html","n":"LiteralIntEuclideanRingOps","t":"class LiteralIntEuclideanRingOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntEuclideanRingOps","k":"class"},
{"l":"spire/syntax/LiteralIntEuclideanRingOps.html","n":"emod","t":"def emod[A](rhs: A)(implicit ev: EuclideanRing[A]): A","d":"spire/syntax/LiteralIntEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralIntEuclideanRingOps.html","n":"equot","t":"def equot[A](rhs: A)(implicit ev: EuclideanRing[A]): A","d":"spire/syntax/LiteralIntEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralIntEuclideanRingOps.html","n":"equotmod","t":"def equotmod[A](rhs: A)(implicit ev: EuclideanRing[A]): (A, A)","d":"spire/syntax/LiteralIntEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralIntEuclideanRingOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntEuclideanRingOps","k":"val"},
{"l":"spire/syntax/LiteralIntMultiplicativeGroupOps.html","n":"LiteralIntMultiplicativeGroupOps","t":"class LiteralIntMultiplicativeGroupOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntMultiplicativeGroupOps","k":"class"},
{"l":"spire/syntax/LiteralIntMultiplicativeGroupOps.html","n":"/","t":"def /[A](rhs: A)(implicit ev: Field[A]): A","d":"spire/syntax/LiteralIntMultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/LiteralIntMultiplicativeGroupOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntMultiplicativeGroupOps","k":"val"},
{"l":"spire/syntax/LiteralIntMultiplicativeSemigroupOps.html","n":"LiteralIntMultiplicativeSemigroupOps","t":"class LiteralIntMultiplicativeSemigroupOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntMultiplicativeSemigroupOps","k":"class"},
{"l":"spire/syntax/LiteralIntMultiplicativeSemigroupOps.html","n":"*","t":"def *[A](rhs: A)(implicit ev: Ring[A]): A","d":"spire/syntax/LiteralIntMultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/LiteralIntMultiplicativeSemigroupOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntMultiplicativeSemigroupOps","k":"val"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"LiteralIntOrderOps","t":"class LiteralIntOrderOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntOrderOps","k":"class"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"<","t":"def <[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"<=","t":"def <=[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":">","t":"def >[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":">=","t":"def >=[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"cmp","t":"def cmp[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Int","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntOrderOps","k":"val"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"max","t":"def max[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntOrderOps.html","n":"min","t":"def min[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralIntOrderOps","k":"def"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"LiteralIntTruncatedDivisionOps","t":"class LiteralIntTruncatedDivisionOps(val lhs: Int) extends AnyVal","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"class"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"fmod","t":"def fmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"fquot","t":"def fquot[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"fquotmod","t":"def fquotmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"lhs","t":"val lhs: Int","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"val"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"tmod","t":"def tmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"tquot","t":"def tquot[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralIntTruncatedDivisionOps.html","n":"tquotmod","t":"def tquotmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralIntTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralLongAdditiveGroupOps.html","n":"LiteralLongAdditiveGroupOps","t":"class LiteralLongAdditiveGroupOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongAdditiveGroupOps","k":"class"},
{"l":"spire/syntax/LiteralLongAdditiveGroupOps.html","n":"-","t":"def -[A](rhs: A)(implicit ev: Ring[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongAdditiveGroupOps","k":"def"},
{"l":"spire/syntax/LiteralLongAdditiveGroupOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongAdditiveGroupOps","k":"val"},
{"l":"spire/syntax/LiteralLongAdditiveSemigroupOps.html","n":"LiteralLongAdditiveSemigroupOps","t":"class LiteralLongAdditiveSemigroupOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongAdditiveSemigroupOps","k":"class"},
{"l":"spire/syntax/LiteralLongAdditiveSemigroupOps.html","n":"+","t":"def +[A](rhs: A)(implicit ev: Ring[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongAdditiveSemigroupOps","k":"def"},
{"l":"spire/syntax/LiteralLongAdditiveSemigroupOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongAdditiveSemigroupOps","k":"val"},
{"l":"spire/syntax/LiteralLongEuclideanRingOps.html","n":"LiteralLongEuclideanRingOps","t":"class LiteralLongEuclideanRingOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongEuclideanRingOps","k":"class"},
{"l":"spire/syntax/LiteralLongEuclideanRingOps.html","n":"emod","t":"def emod[A](rhs: A)(implicit ev: EuclideanRing[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralLongEuclideanRingOps.html","n":"equot","t":"def equot[A](rhs: A)(implicit ev: EuclideanRing[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralLongEuclideanRingOps.html","n":"equotmod","t":"def equotmod[A](rhs: A)(implicit ev: EuclideanRing[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralLongEuclideanRingOps","k":"def"},
{"l":"spire/syntax/LiteralLongEuclideanRingOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongEuclideanRingOps","k":"val"},
{"l":"spire/syntax/LiteralLongMultiplicativeGroupOps.html","n":"LiteralLongMultiplicativeGroupOps","t":"class LiteralLongMultiplicativeGroupOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongMultiplicativeGroupOps","k":"class"},
{"l":"spire/syntax/LiteralLongMultiplicativeGroupOps.html","n":"/","t":"def /[A](rhs: A)(implicit ev: Field[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongMultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/LiteralLongMultiplicativeGroupOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongMultiplicativeGroupOps","k":"val"},
{"l":"spire/syntax/LiteralLongMultiplicativeSemigroupOps.html","n":"LiteralLongMultiplicativeSemigroupOps","t":"class LiteralLongMultiplicativeSemigroupOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongMultiplicativeSemigroupOps","k":"class"},
{"l":"spire/syntax/LiteralLongMultiplicativeSemigroupOps.html","n":"*","t":"def *[A](rhs: A)(implicit ev: Ring[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongMultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/LiteralLongMultiplicativeSemigroupOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongMultiplicativeSemigroupOps","k":"val"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"LiteralLongOrderOps","t":"class LiteralLongOrderOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongOrderOps","k":"class"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"<","t":"def <[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"<=","t":"def <=[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":">","t":"def >[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":">=","t":"def >=[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Boolean","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"cmp","t":"def cmp[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): Int","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongOrderOps","k":"val"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"max","t":"def max[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongOrderOps.html","n":"min","t":"def min[A](rhs: A)(implicit ev: Order[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongOrderOps","k":"def"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"LiteralLongTruncatedDivisionOps","t":"class LiteralLongTruncatedDivisionOps(val lhs: Long) extends AnyVal","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"class"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"fmod","t":"def fmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"fquot","t":"def fquot[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"fquotmod","t":"def fquotmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"lhs","t":"val lhs: Long","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"val"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"tmod","t":"def tmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"tquot","t":"def tquot[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): A","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralLongTruncatedDivisionOps.html","n":"tquotmod","t":"def tquotmod[A](rhs: A)(implicit ev: TruncatedDivision[A], c: ConvertableTo[A]): (A, A)","d":"spire/syntax/LiteralLongTruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"LiteralsSyntax","t":"trait LiteralsSyntax","d":"spire/syntax/LiteralsSyntax","k":"trait"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"b","t":"def b(inline parts: Any*): Byte","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"h","t":"def h(inline parts: Any*): Short","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"poly","t":"def poly(args: Any*): Polynomial[Rational]","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"r","t":"def r(inline parts: Any*): Rational","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"ub","t":"def ub(inline parts: Any*): UByte","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"uh","t":"def uh(inline parts: Any*): UShort","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"ui","t":"def ui(inline parts: Any*): UInt","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax.html","n":"ul","t":"def ul(inline parts: Any*): ULong","d":"spire/syntax/LiteralsSyntax","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$eu$.html","n":"eu","t":"object eu","d":"spire/syntax/LiteralsSyntax$eu$","k":"object"},
{"l":"spire/syntax/LiteralsSyntax$eu$.html","n":"big","t":"def big(inline parts: Any*): BigInt","d":"spire/syntax/LiteralsSyntax$eu$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$eu$.html","n":"dec","t":"def dec(inline parts: Any*): BigDecimal","d":"spire/syntax/LiteralsSyntax$eu$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$eu$.html","n":"i","t":"def i(inline parts: Any*): Int","d":"spire/syntax/LiteralsSyntax$eu$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$eu$.html","n":"j","t":"def j(inline parts: Any*): Long","d":"spire/syntax/LiteralsSyntax$eu$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$si$.html","n":"si","t":"object si","d":"spire/syntax/LiteralsSyntax$si$","k":"object"},
{"l":"spire/syntax/LiteralsSyntax$si$.html","n":"big","t":"def big(inline parts: Any*): BigInt","d":"spire/syntax/LiteralsSyntax$si$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$si$.html","n":"dec","t":"def dec(inline parts: Any*): BigDecimal","d":"spire/syntax/LiteralsSyntax$si$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$si$.html","n":"i","t":"def i(inline parts: Any*): Int","d":"spire/syntax/LiteralsSyntax$si$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$si$.html","n":"j","t":"def j(inline parts: Any*): Long","d":"spire/syntax/LiteralsSyntax$si$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$us$.html","n":"us","t":"object us","d":"spire/syntax/LiteralsSyntax$us$","k":"object"},
{"l":"spire/syntax/LiteralsSyntax$us$.html","n":"big","t":"def big(inline parts: Any*): BigInt","d":"spire/syntax/LiteralsSyntax$us$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$us$.html","n":"dec","t":"def dec(inline parts: Any*): BigDecimal","d":"spire/syntax/LiteralsSyntax$us$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$us$.html","n":"i","t":"def i(inline parts: Any*): Int","d":"spire/syntax/LiteralsSyntax$us$","k":"def"},
{"l":"spire/syntax/LiteralsSyntax$us$.html","n":"j","t":"def j(inline parts: Any*): Long","d":"spire/syntax/LiteralsSyntax$us$","k":"def"},
{"l":"spire/syntax/LogicOps.html","n":"LogicOps","t":"class LogicOps[A](lhs: A)(using ev: Logic[A])","d":"spire/syntax/LogicOps","k":"class"},
{"l":"spire/syntax/LogicOps.html","n":"&","t":"def &(rhs: A): A","d":"spire/syntax/LogicOps","k":"def"},
{"l":"spire/syntax/LogicOps.html","n":"&","t":"def &(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/LogicOps","k":"def"},
{"l":"spire/syntax/LogicOps.html","n":"unary_!","t":"def unary_!: A","d":"spire/syntax/LogicOps","k":"def"},
{"l":"spire/syntax/LogicOps.html","n":"|","t":"def |(rhs: A): A","d":"spire/syntax/LogicOps","k":"def"},
{"l":"spire/syntax/LogicOps.html","n":"|","t":"def |(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/LogicOps","k":"def"},
{"l":"spire/syntax/LogicSyntax.html","n":"LogicSyntax","t":"trait LogicSyntax","d":"spire/syntax/LogicSyntax","k":"trait"},
{"l":"spire/syntax/LogicSyntax.html","n":"logicOps","t":"def logicOps[A : Logic](a: A): LogicOps[A]","d":"spire/syntax/LogicSyntax","k":"def"},
{"l":"spire/syntax/MeetOps.html","n":"MeetOps","t":"class MeetOps[A](lhs: A)(using ev: MeetSemilattice[A])","d":"spire/syntax/MeetOps","k":"class"},
{"l":"spire/syntax/MeetOps.html","n":"meet","t":"def meet(rhs: A): A","d":"spire/syntax/MeetOps","k":"def"},
{"l":"spire/syntax/MeetOps.html","n":"meet","t":"def meet(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/MeetOps","k":"def"},
{"l":"spire/syntax/MeetOps.html","n":"∧","t":"def ∧(rhs: A): A","d":"spire/syntax/MeetOps","k":"def"},
{"l":"spire/syntax/MeetOps.html","n":"∧","t":"def ∧(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/MeetOps","k":"def"},
{"l":"spire/syntax/MetricSpaceOps.html","n":"MetricSpaceOps","t":"class MetricSpaceOps[V](lhs: V) extends AnyVal","d":"spire/syntax/MetricSpaceOps","k":"class"},
{"l":"spire/syntax/MetricSpaceOps.html","n":"distance","t":"def distance[F](rhs: V)(using ev: MetricSpace[V, F]): F","d":"spire/syntax/MetricSpaceOps","k":"def"},
{"l":"spire/syntax/MetricSpaceSyntax.html","n":"MetricSpaceSyntax","t":"trait MetricSpaceSyntax extends VectorSpaceSyntax","d":"spire/syntax/MetricSpaceSyntax","k":"trait"},
{"l":"spire/syntax/MetricSpaceSyntax.html","n":"metricSpaceOps","t":"def metricSpaceOps[V](v: V): MetricSpaceOps[V]","d":"spire/syntax/MetricSpaceSyntax","k":"def"},
{"l":"spire/syntax/MonoidOps.html","n":"MonoidOps","t":"class MonoidOps[A](lhs: A)(using ev: Monoid[A])","d":"spire/syntax/MonoidOps","k":"class"},
{"l":"spire/syntax/MonoidOps.html","n":"isEmpty","t":"def isEmpty(using ev1: Eq[A]): Boolean","d":"spire/syntax/MonoidOps","k":"def"},
{"l":"spire/syntax/MonoidSyntax.html","n":"MonoidSyntax","t":"trait MonoidSyntax extends SemigroupSyntax","d":"spire/syntax/MonoidSyntax","k":"trait"},
{"l":"spire/syntax/MonoidSyntax.html","n":"monoidOps","t":"def monoidOps[A](a: A)(implicit ev: Monoid[A]): MonoidOps[A]","d":"spire/syntax/MonoidSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupOps.html","n":"MultiplicativeGroupOps","t":"class MultiplicativeGroupOps[A](lhs: A)(using ev: MultiplicativeGroup[A])","d":"spire/syntax/MultiplicativeGroupOps","k":"class"},
{"l":"spire/syntax/MultiplicativeGroupOps.html","n":"/","t":"def /(rhs: A): A","d":"spire/syntax/MultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupOps.html","n":"/","t":"def /(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/MultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupOps.html","n":"/","t":"def /(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/MultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupOps.html","n":"/","t":"def /(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/MultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupOps.html","n":"reciprocal","t":"def reciprocal: A","d":"spire/syntax/MultiplicativeGroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupSyntax.html","n":"MultiplicativeGroupSyntax","t":"trait MultiplicativeGroupSyntax extends MultiplicativeMonoidSyntax","d":"spire/syntax/MultiplicativeGroupSyntax","k":"trait"},
{"l":"spire/syntax/MultiplicativeGroupSyntax.html","n":"literalDoubleMultiplicativeGroupOps","t":"def literalDoubleMultiplicativeGroupOps(lhs: Double): LiteralDoubleMultiplicativeGroupOps","d":"spire/syntax/MultiplicativeGroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupSyntax.html","n":"literalIntMultiplicativeGroupOps","t":"def literalIntMultiplicativeGroupOps(lhs: Int): LiteralIntMultiplicativeGroupOps","d":"spire/syntax/MultiplicativeGroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupSyntax.html","n":"literalLongMultiplicativeGroupOps","t":"def literalLongMultiplicativeGroupOps(lhs: Long): LiteralLongMultiplicativeGroupOps","d":"spire/syntax/MultiplicativeGroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeGroupSyntax.html","n":"multiplicativeGroupOps","t":"def multiplicativeGroupOps[A : MultiplicativeGroup](a: A): MultiplicativeGroupOps[A]","d":"spire/syntax/MultiplicativeGroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeMonoidOps.html","n":"MultiplicativeMonoidOps","t":"class MultiplicativeMonoidOps[A](lhs: A)(using ev: MultiplicativeMonoid[A])","d":"spire/syntax/MultiplicativeMonoidOps","k":"class"},
{"l":"spire/syntax/MultiplicativeMonoidOps.html","n":"isOne","t":"def isOne(using ev1: Eq[A]): Boolean","d":"spire/syntax/MultiplicativeMonoidOps","k":"def"},
{"l":"spire/syntax/MultiplicativeMonoidSyntax.html","n":"MultiplicativeMonoidSyntax","t":"trait MultiplicativeMonoidSyntax extends MultiplicativeSemigroupSyntax","d":"spire/syntax/MultiplicativeMonoidSyntax","k":"trait"},
{"l":"spire/syntax/MultiplicativeMonoidSyntax.html","n":"multiplicativeMonoidOps","t":"def multiplicativeMonoidOps[A](a: A)(implicit ev: MultiplicativeMonoid[A]): MultiplicativeMonoidOps[A]","d":"spire/syntax/MultiplicativeMonoidSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupOps.html","n":"MultiplicativeSemigroupOps","t":"class MultiplicativeSemigroupOps[A](lhs: A)(using ev: MultiplicativeSemigroup[A])","d":"spire/syntax/MultiplicativeSemigroupOps","k":"class"},
{"l":"spire/syntax/MultiplicativeSemigroupOps.html","n":"*","t":"def *(rhs: A): A","d":"spire/syntax/MultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupOps.html","n":"*","t":"def *(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/MultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupOps.html","n":"*","t":"def *(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/MultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupOps.html","n":"*","t":"def *(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/MultiplicativeSemigroupOps","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupSyntax.html","n":"MultiplicativeSemigroupSyntax","t":"trait MultiplicativeSemigroupSyntax","d":"spire/syntax/MultiplicativeSemigroupSyntax","k":"trait"},
{"l":"spire/syntax/MultiplicativeSemigroupSyntax.html","n":"literalDoubleMultiplicativeSemigroupOps","t":"def literalDoubleMultiplicativeSemigroupOps(lhs: Double): LiteralDoubleMultiplicativeSemigroupOps","d":"spire/syntax/MultiplicativeSemigroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupSyntax.html","n":"literalIntMultiplicativeSemigroupOps","t":"def literalIntMultiplicativeSemigroupOps(lhs: Int): LiteralIntMultiplicativeSemigroupOps","d":"spire/syntax/MultiplicativeSemigroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupSyntax.html","n":"literalLongMultiplicativeSemigroupOps","t":"def literalLongMultiplicativeSemigroupOps(lhs: Long): LiteralLongMultiplicativeSemigroupOps","d":"spire/syntax/MultiplicativeSemigroupSyntax","k":"def"},
{"l":"spire/syntax/MultiplicativeSemigroupSyntax.html","n":"multiplicativeSemigroupOps","t":"def multiplicativeSemigroupOps[A : MultiplicativeSemigroup](a: A): MultiplicativeSemigroupOps[A]","d":"spire/syntax/MultiplicativeSemigroupSyntax","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"NRootOps","t":"class NRootOps[A](lhs: A)(using ev: NRoot[A])","d":"spire/syntax/NRootOps","k":"class"},
{"l":"spire/syntax/NRootOps.html","n":"**","t":"def **(rhs: Double)(using c: Field[A]): A","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"**","t":"def **(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"fpow","t":"def fpow(rhs: A): A","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"nroot","t":"def nroot(rhs: Int): A","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"pow","t":"def pow(rhs: Double)(using c: Field[A]): A","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"pow","t":"def pow(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootOps.html","n":"sqrt","t":"def sqrt: A","d":"spire/syntax/NRootOps","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"NRootSyntax","t":"trait NRootSyntax","d":"spire/syntax/NRootSyntax","k":"trait"},
{"l":"spire/syntax/NRootSyntax.html","n":"**","t":"def **(using ev: NRoot[A])(rhs: Double)(using c: Field[A]): A","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"**","t":"def **(using ev: NRoot[A])(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"fpow","t":"def fpow(using ev: NRoot[A])(rhs: A): A","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"nroot","t":"def nroot(using ev: NRoot[A])(rhs: Int): A","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"pow","t":"def pow(using ev: NRoot[A])(rhs: Double)(using c: Field[A]): A","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"pow","t":"def pow(using ev: NRoot[A])(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NRootSyntax.html","n":"sqrt","t":"def sqrt(using ev: NRoot[A]): A","d":"spire/syntax/NRootSyntax","k":"def"},
{"l":"spire/syntax/NormedVectorSpaceOps.html","n":"NormedVectorSpaceOps","t":"class NormedVectorSpaceOps[V](lhs: V) extends AnyVal","d":"spire/syntax/NormedVectorSpaceOps","k":"class"},
{"l":"spire/syntax/NormedVectorSpaceOps.html","n":"norm","t":"def norm[F](using ev: NormedVectorSpace[V, F]): F","d":"spire/syntax/NormedVectorSpaceOps","k":"def"},
{"l":"spire/syntax/NormedVectorSpaceOps.html","n":"normalize","t":"def normalize[F](using ev: NormedVectorSpace[V, F]): V","d":"spire/syntax/NormedVectorSpaceOps","k":"def"},
{"l":"spire/syntax/NormedVectorSpaceSyntax.html","n":"NormedVectorSpaceSyntax","t":"trait NormedVectorSpaceSyntax extends MetricSpaceSyntax","d":"spire/syntax/NormedVectorSpaceSyntax","k":"trait"},
{"l":"spire/syntax/NormedVectorSpaceSyntax.html","n":"normedVectorSpaceOps","t":"def normedVectorSpaceOps[V](v: V): NormedVectorSpaceOps[V]","d":"spire/syntax/NormedVectorSpaceSyntax","k":"def"},
{"l":"spire/syntax/NumericSyntax.html","n":"NumericSyntax","t":"trait NumericSyntax extends FieldSyntax with NRootSyntax with ConvertableFromSyntax with OrderSyntax with SignedSyntax","d":"spire/syntax/NumericSyntax","k":"trait"},
{"l":"spire/syntax/OrderOps.html","n":"OrderOps","t":"class OrderOps[A](lhs: A)(using o: Order[A])","d":"spire/syntax/OrderOps","k":"class"},
{"l":"spire/syntax/OrderOps.html","n":"compare","t":"def compare(rhs: A): Int","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"compare","t":"def compare(rhs: Int)(using ev1: Ring[A]): Int","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"compare","t":"def compare(rhs: Double)(using ev1: Field[A]): Int","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"compare","t":"def compare(rhs: Number)(using c: ConvertableFrom[A]): Int","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"max","t":"def max(rhs: A): A","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"max","t":"def max(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"max","t":"def max(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"max","t":"def max(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"min","t":"def min(rhs: A): A","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"min","t":"def min(rhs: Int)(using ev1: Ring[A]): A","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"min","t":"def min(rhs: Double)(using ev1: Field[A]): A","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderOps.html","n":"min","t":"def min(rhs: Number)(using c: ConvertableFrom[A]): Number","d":"spire/syntax/OrderOps","k":"def"},
{"l":"spire/syntax/OrderSyntax.html","n":"OrderSyntax","t":"trait OrderSyntax extends PartialOrderSyntax","d":"spire/syntax/OrderSyntax","k":"trait"},
{"l":"spire/syntax/OrderSyntax.html","n":"literalDoubleOrderOps","t":"def literalDoubleOrderOps(lhs: Double): LiteralDoubleOrderOps","d":"spire/syntax/OrderSyntax","k":"def"},
{"l":"spire/syntax/OrderSyntax.html","n":"literalIntOrderOps","t":"def literalIntOrderOps(lhs: Int): LiteralIntOrderOps","d":"spire/syntax/OrderSyntax","k":"def"},
{"l":"spire/syntax/OrderSyntax.html","n":"literalLongOrderOps","t":"def literalLongOrderOps(lhs: Long): LiteralLongOrderOps","d":"spire/syntax/OrderSyntax","k":"def"},
{"l":"spire/syntax/OrderSyntax.html","n":"orderOps","t":"def orderOps[A : Order](a: A): OrderOps[A]","d":"spire/syntax/OrderSyntax","k":"def"},
{"l":"spire/syntax/PartialActionSyntax.html","n":"PartialActionSyntax","t":"trait PartialActionSyntax","d":"spire/syntax/PartialActionSyntax","k":"trait"},
{"l":"spire/syntax/PartialActionSyntax.html","n":"leftPartialActionOps","t":"def leftPartialActionOps[G](g: G): LeftPartialActionOps[G]","d":"spire/syntax/PartialActionSyntax","k":"def"},
{"l":"spire/syntax/PartialActionSyntax.html","n":"rightPartialActionOps","t":"def rightPartialActionOps[P](p: P): RightPartialActionOps[P]","d":"spire/syntax/PartialActionSyntax","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"PartialOrderOps","t":"class PartialOrderOps[A](lhs: A)(using ev: PartialOrder[A])","d":"spire/syntax/PartialOrderOps","k":"class"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<","t":"def <(rhs: A): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<","t":"def <(rhs: Int)(using ev1: Ring[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<","t":"def <(rhs: Double)(using ev1: Field[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<","t":"def <(rhs: Number)(using c: ConvertableFrom[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<=","t":"def <=(rhs: A): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<=","t":"def <=(rhs: Int)(using ev1: Ring[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<=","t":"def <=(rhs: Double)(using ev1: Field[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"<=","t":"def <=(rhs: Number)(using c: ConvertableFrom[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">","t":"def >(rhs: A): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">","t":"def >(rhs: Int)(using ev1: Ring[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">","t":"def >(rhs: Double)(using ev1: Field[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">","t":"def >(rhs: Number)(using c: ConvertableFrom[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">=","t":"def >=(rhs: A): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">=","t":"def >=(rhs: Int)(using ev1: Ring[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">=","t":"def >=(rhs: Double)(using ev1: Field[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":">=","t":"def >=(rhs: Number)(using c: ConvertableFrom[A]): Boolean","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"partialCompare","t":"def partialCompare(rhs: A): Double","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"pmax","t":"def pmax(rhs: A): Option[A]","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"pmin","t":"def pmin(rhs: A): Option[A]","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderOps.html","n":"tryCompare","t":"def tryCompare(rhs: A): Option[Int]","d":"spire/syntax/PartialOrderOps","k":"def"},
{"l":"spire/syntax/PartialOrderSyntax.html","n":"PartialOrderSyntax","t":"trait PartialOrderSyntax extends EqSyntax","d":"spire/syntax/PartialOrderSyntax","k":"trait"},
{"l":"spire/syntax/PartialOrderSyntax.html","n":"partialOrderOps","t":"def partialOrderOps[A : PartialOrder](a: A): PartialOrderOps[A]","d":"spire/syntax/PartialOrderSyntax","k":"def"},
{"l":"spire/syntax/RigSyntax.html","n":"RigSyntax","t":"trait RigSyntax extends SemiringSyntax","d":"spire/syntax/RigSyntax","k":"trait"},
{"l":"spire/syntax/RightActionOps.html","n":"RightActionOps","t":"class RightActionOps[P](lhs: P) extends AnyVal","d":"spire/syntax/RightActionOps","k":"class"},
{"l":"spire/syntax/RightActionOps.html","n":"<*","t":"def <*[G](rhs: G)(using ev: MultiplicativeAction[P, G]): P","d":"spire/syntax/RightActionOps","k":"def"},
{"l":"spire/syntax/RightActionOps.html","n":"<+","t":"def <+[G](rhs: G)(using ev: AdditiveAction[P, G]): P","d":"spire/syntax/RightActionOps","k":"def"},
{"l":"spire/syntax/RightActionOps.html","n":"<|+|","t":"def <|+|[G](rhs: G)(using ev: RightAction[P, G]): P","d":"spire/syntax/RightActionOps","k":"def"},
{"l":"spire/syntax/RightModuleOps.html","n":"RightModuleOps","t":"class RightModuleOps[V](x: V) extends AnyVal","d":"spire/syntax/RightModuleOps","k":"class"},
{"l":"spire/syntax/RightModuleOps.html","n":":*","t":"def :*[F](rhs: F)(using ev: RightModule[V, F]): V","d":"spire/syntax/RightModuleOps","k":"def"},
{"l":"spire/syntax/RightModuleOps.html","n":":*","t":"def :*[F](rhs: Int)(using ev: RightModule[V, F], F: Ring[F]): V","d":"spire/syntax/RightModuleOps","k":"def"},
{"l":"spire/syntax/RightModuleSyntax.html","n":"RightModuleSyntax","t":"trait RightModuleSyntax extends RingSyntax","d":"spire/syntax/RightModuleSyntax","k":"trait"},
{"l":"spire/syntax/RightModuleSyntax.html","n":"rms","t":"def rms[V](v: V): RightModuleOps[V]","d":"spire/syntax/RightModuleSyntax","k":"def"},
{"l":"spire/syntax/RightPartialActionOps.html","n":"RightPartialActionOps","t":"class RightPartialActionOps[P](lhs: P) extends AnyVal","d":"spire/syntax/RightPartialActionOps","k":"class"},
{"l":"spire/syntax/RightPartialActionOps.html","n":"<|+|?","t":"def <|+|?[G](rhs: G)(using ev: RightPartialAction[P, G]): Opt[P]","d":"spire/syntax/RightPartialActionOps","k":"def"},
{"l":"spire/syntax/RightPartialActionOps.html","n":"<|+|??","t":"def <|+|??[G](rhs: G)(using ev: RightPartialAction[P, G]): Boolean","d":"spire/syntax/RightPartialActionOps","k":"def"},
{"l":"spire/syntax/RingSyntax.html","n":"RingSyntax","t":"trait RingSyntax extends RngSyntax with RigSyntax","d":"spire/syntax/RingSyntax","k":"trait"},
{"l":"spire/syntax/RngSyntax.html","n":"RngSyntax","t":"trait RngSyntax extends SemiringSyntax with AdditiveGroupSyntax","d":"spire/syntax/RngSyntax","k":"trait"},
{"l":"spire/syntax/SemigroupOps.html","n":"SemigroupOps","t":"class SemigroupOps[A](lhs: A)(using ev: Semigroup[A])","d":"spire/syntax/SemigroupOps","k":"class"},
{"l":"spire/syntax/SemigroupOps.html","n":"|+|","t":"def |+|(rhs: A): A","d":"spire/syntax/SemigroupOps","k":"def"},
{"l":"spire/syntax/SemigroupSyntax.html","n":"SemigroupSyntax","t":"trait SemigroupSyntax","d":"spire/syntax/SemigroupSyntax","k":"trait"},
{"l":"spire/syntax/SemigroupSyntax.html","n":"semigroupOps","t":"def semigroupOps[A : Semigroup](a: A): SemigroupOps[A]","d":"spire/syntax/SemigroupSyntax","k":"def"},
{"l":"spire/syntax/SemigroupoidOps.html","n":"SemigroupoidOps","t":"class SemigroupoidOps[A](lhs: A)(using ev: Semigroupoid[A])","d":"spire/syntax/SemigroupoidOps","k":"class"},
{"l":"spire/syntax/SemigroupoidOps.html","n":"|+|?","t":"def |+|?(rhs: A): Opt[A]","d":"spire/syntax/SemigroupoidOps","k":"def"},
{"l":"spire/syntax/SemigroupoidOps.html","n":"|+|??","t":"def |+|??(rhs: A): Boolean","d":"spire/syntax/SemigroupoidOps","k":"def"},
{"l":"spire/syntax/SemigroupoidSyntax.html","n":"SemigroupoidSyntax","t":"trait SemigroupoidSyntax","d":"spire/syntax/SemigroupoidSyntax","k":"trait"},
{"l":"spire/syntax/SemigroupoidSyntax.html","n":"semigroupoidOps","t":"def semigroupoidOps[A : Semigroupoid](a: A): SemigroupoidOps[A]","d":"spire/syntax/SemigroupoidSyntax","k":"def"},
{"l":"spire/syntax/SemiringOps.html","n":"SemiringOps","t":"class SemiringOps[A](lhs: A)(using ev: Semiring[A])","d":"spire/syntax/SemiringOps","k":"class"},
{"l":"spire/syntax/SemiringOps.html","n":"**","t":"def **(rhs: Int): A","d":"spire/syntax/SemiringOps","k":"def"},
{"l":"spire/syntax/SemiringOps.html","n":"pow","t":"def pow(rhs: Int): A","d":"spire/syntax/SemiringOps","k":"def"},
{"l":"spire/syntax/SemiringSyntax.html","n":"SemiringSyntax","t":"trait SemiringSyntax extends AdditiveSemigroupSyntax with MultiplicativeSemigroupSyntax","d":"spire/syntax/SemiringSyntax","k":"trait"},
{"l":"spire/syntax/SemiringSyntax.html","n":"semiringOps","t":"def semiringOps[A : Semiring](a: A): SemiringOps[A]","d":"spire/syntax/SemiringSyntax","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"SignedOps","t":"class SignedOps[A](a: A)(using s: Signed[A])","d":"spire/syntax/SignedOps","k":"class"},
{"l":"spire/syntax/SignedOps.html","n":"abs","t":"def abs: A","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"isSignNegative","t":"def isSignNegative: Boolean","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"isSignNonNegative","t":"def isSignNonNegative: Boolean","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"isSignNonPositive","t":"def isSignNonPositive: Boolean","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"isSignNonZero","t":"def isSignNonZero: Boolean","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"isSignPositive","t":"def isSignPositive: Boolean","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"isSignZero","t":"def isSignZero: Boolean","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"sign","t":"def sign: Sign","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedOps.html","n":"signum","t":"def signum: Int","d":"spire/syntax/SignedOps","k":"def"},
{"l":"spire/syntax/SignedSyntax.html","n":"SignedSyntax","t":"trait SignedSyntax extends OrderSyntax","d":"spire/syntax/SignedSyntax","k":"trait"},
{"l":"spire/syntax/SignedSyntax.html","n":"signedOps","t":"def signedOps[A : Signed](a: A): SignedOps[A]","d":"spire/syntax/SignedSyntax","k":"def"},
{"l":"spire/syntax/TorsorPointOps.html","n":"TorsorPointOps","t":"class TorsorPointOps[P](lhs: P) extends AnyVal","d":"spire/syntax/TorsorPointOps","k":"class"},
{"l":"spire/syntax/TorsorPointOps.html","n":"<->","t":"def <->[G](rhs: P)(using ev: AdditiveTorsor[P, G]): G","d":"spire/syntax/TorsorPointOps","k":"def"},
{"l":"spire/syntax/TorsorPointOps.html","n":"</>","t":"def </>[G](rhs: P)(using ev: MultiplicativeTorsor[P, G]): G","d":"spire/syntax/TorsorPointOps","k":"def"},
{"l":"spire/syntax/TorsorSyntax.html","n":"TorsorSyntax","t":"trait TorsorSyntax","d":"spire/syntax/TorsorSyntax","k":"trait"},
{"l":"spire/syntax/TorsorSyntax.html","n":"torsorPointOps","t":"def torsorPointOps[P](p: P): TorsorPointOps[P]","d":"spire/syntax/TorsorSyntax","k":"def"},
{"l":"spire/syntax/TrigOps.html","n":"TrigOps","t":"class TrigOps[A](lhs: A)(implicit ev: Trig[A])","d":"spire/syntax/TrigOps","k":"class"},
{"l":"spire/syntax/TrigOps.html","n":"exp","t":"def exp: A","d":"spire/syntax/TrigOps","k":"def"},
{"l":"spire/syntax/TrigOps.html","n":"log","t":"def log: A","d":"spire/syntax/TrigOps","k":"def"},
{"l":"spire/syntax/TrigOps.html","n":"log","t":"def log(base: Int)(using f: Field[A]): A","d":"spire/syntax/TrigOps","k":"def"},
{"l":"spire/syntax/TrigSyntax.html","n":"TrigSyntax","t":"trait TrigSyntax","d":"spire/syntax/TrigSyntax","k":"trait"},
{"l":"spire/syntax/TrigSyntax.html","n":"trigOps","t":"def trigOps[A : Trig](a: A): TrigOps[A]","d":"spire/syntax/TrigSyntax","k":"def"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"TruncatedDivisionOps","t":"class TruncatedDivisionOps[A](lhs: A)(using ev: TruncatedDivision[A])","d":"spire/syntax/TruncatedDivisionOps","k":"class"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"fmod","t":"def fmod(rhs: A): A","d":"spire/syntax/TruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"fquot","t":"def fquot(rhs: A): A","d":"spire/syntax/TruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"fquotmod","t":"def fquotmod(rhs: A): (A, A)","d":"spire/syntax/TruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"tmod","t":"def tmod(rhs: A): A","d":"spire/syntax/TruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"tquot","t":"def tquot(rhs: A): A","d":"spire/syntax/TruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/TruncatedDivisionOps.html","n":"tquotmod","t":"def tquotmod(rhs: A): (A, A)","d":"spire/syntax/TruncatedDivisionOps","k":"def"},
{"l":"spire/syntax/TruncatedDivisionSyntax.html","n":"TruncatedDivisionSyntax","t":"trait TruncatedDivisionSyntax extends SignedSyntax","d":"spire/syntax/TruncatedDivisionSyntax","k":"trait"},
{"l":"spire/syntax/TruncatedDivisionSyntax.html","n":"literalDoubleTruncatedDivisionOps","t":"def literalDoubleTruncatedDivisionOps(lhs: Double): LiteralDoubleTruncatedDivisionOps","d":"spire/syntax/TruncatedDivisionSyntax","k":"def"},
{"l":"spire/syntax/TruncatedDivisionSyntax.html","n":"literalIntTruncatedDivisionOps","t":"def literalIntTruncatedDivisionOps(lhs: Int): LiteralIntTruncatedDivisionOps","d":"spire/syntax/TruncatedDivisionSyntax","k":"def"},
{"l":"spire/syntax/TruncatedDivisionSyntax.html","n":"literalLongTruncatedDivisionOps","t":"def literalLongTruncatedDivisionOps(lhs: Long): LiteralLongTruncatedDivisionOps","d":"spire/syntax/TruncatedDivisionSyntax","k":"def"},
{"l":"spire/syntax/TruncatedDivisionSyntax.html","n":"truncatedDivisionOps","t":"def truncatedDivisionOps[A : TruncatedDivision](a: A): TruncatedDivisionOps[A]","d":"spire/syntax/TruncatedDivisionSyntax","k":"def"},
{"l":"spire/syntax/UnboundSyntax.html","n":"UnboundSyntax","t":"trait UnboundSyntax","d":"spire/syntax/UnboundSyntax","k":"trait"},
{"l":"spire/syntax/VectorSpaceOps.html","n":"VectorSpaceOps","t":"class VectorSpaceOps[V](x: V) extends AnyVal","d":"spire/syntax/VectorSpaceOps","k":"class"},
{"l":"spire/syntax/VectorSpaceOps.html","n":":/","t":"def :/[F](rhs: F)(using ev: VectorSpace[V, F]): V","d":"spire/syntax/VectorSpaceOps","k":"def"},
{"l":"spire/syntax/VectorSpaceOps.html","n":":/","t":"def :/[F](rhs: Int)(using ev: VectorSpace[V, F]): V","d":"spire/syntax/VectorSpaceOps","k":"def"},
{"l":"spire/syntax/VectorSpaceOps.html","n":":/","t":"def :/[F](rhs: Double)(using ev: VectorSpace[V, F]): V","d":"spire/syntax/VectorSpaceOps","k":"def"},
{"l":"spire/syntax/VectorSpaceSyntax.html","n":"VectorSpaceSyntax","t":"trait VectorSpaceSyntax extends CModuleSyntax with FieldSyntax","d":"spire/syntax/VectorSpaceSyntax","k":"trait"},
{"l":"spire/syntax/VectorSpaceSyntax.html","n":"vectorSpaceOps","t":"def vectorSpaceOps[V](v: V): VectorSpaceOps[V]","d":"spire/syntax/VectorSpaceSyntax","k":"def"},
{"l":"spire/syntax/action$.html","n":"action","t":"object action extends ActionSyntax","d":"spire/syntax/action$","k":"object"},
{"l":"spire/syntax/additiveGroup$.html","n":"additiveGroup","t":"object additiveGroup extends AdditiveGroupSyntax","d":"spire/syntax/additiveGroup$","k":"object"},
{"l":"spire/syntax/additiveMonoid$.html","n":"additiveMonoid","t":"object additiveMonoid extends AdditiveMonoidSyntax","d":"spire/syntax/additiveMonoid$","k":"object"},
{"l":"spire/syntax/additiveSemigroup$.html","n":"additiveSemigroup","t":"object additiveSemigroup extends AdditiveSemigroupSyntax","d":"spire/syntax/additiveSemigroup$","k":"object"},
{"l":"spire/syntax/all$.html","n":"all","t":"object all extends AllSyntax","d":"spire/syntax/all$","k":"object"},
{"l":"spire/syntax/bitString$.html","n":"bitString","t":"object bitString extends BitStringSyntax","d":"spire/syntax/bitString$","k":"object"},
{"l":"spire/syntax/bool$.html","n":"bool","t":"object bool extends BoolSyntax","d":"spire/syntax/bool$","k":"object"},
{"l":"spire/syntax/cModule$.html","n":"cModule","t":"object cModule extends CModuleSyntax","d":"spire/syntax/cModule$","k":"object"},
{"l":"spire/syntax/cfor$.html","n":"cfor","t":"object cfor extends CforSyntax","d":"spire/syntax/cfor$","k":"object"},
{"l":"spire/syntax/convertableFrom$.html","n":"convertableFrom","t":"object convertableFrom extends ConvertableFromSyntax","d":"spire/syntax/convertableFrom$","k":"object"},
{"l":"spire/syntax/coordinateSpace$.html","n":"coordinateSpace","t":"object coordinateSpace extends CoordinateSpaceSyntax","d":"spire/syntax/coordinateSpace$","k":"object"},
{"l":"spire/syntax/eq$.html","n":"eq","t":"object eq extends EqSyntax","d":"spire/syntax/eq$","k":"object"},
{"l":"spire/syntax/euclideanRing$.html","n":"euclideanRing","t":"object euclideanRing extends EuclideanRingSyntax","d":"spire/syntax/euclideanRing$","k":"object"},
{"l":"spire/syntax/fastFor$.html","n":"fastFor","t":"object fastFor extends FastForSyntax","d":"spire/syntax/fastFor$","k":"object"},
{"l":"spire/syntax/field$.html","n":"field","t":"object field extends FieldSyntax","d":"spire/syntax/field$","k":"object"},
{"l":"spire/syntax/fractional$.html","n":"fractional","t":"object fractional extends FractionalSyntax","d":"spire/syntax/fractional$","k":"object"},
{"l":"spire/syntax/gcdRing$.html","n":"gcdRing","t":"object gcdRing extends GCDRingSyntax","d":"spire/syntax/gcdRing$","k":"object"},
{"l":"spire/syntax/group$.html","n":"group","t":"object group extends GroupSyntax","d":"spire/syntax/group$","k":"object"},
{"l":"spire/syntax/groupoid$.html","n":"groupoid","t":"object groupoid extends GroupoidSyntax","d":"spire/syntax/groupoid$","k":"object"},
{"l":"spire/syntax/heyting$.html","n":"heyting","t":"object heyting extends HeytingSyntax","d":"spire/syntax/heyting$","k":"object"},
{"l":"spire/syntax/innerProductSpace$.html","n":"innerProductSpace","t":"object innerProductSpace extends InnerProductSpaceSyntax","d":"spire/syntax/innerProductSpace$","k":"object"},
{"l":"spire/syntax/integral$.html","n":"integral","t":"object integral extends IntegralSyntax","d":"spire/syntax/integral$","k":"object"},
{"l":"spire/syntax/interval$.html","n":"interval","t":"object interval extends IntervalSyntax","d":"spire/syntax/interval$","k":"object"},
{"l":"spire/syntax/involution$.html","n":"involution","t":"object involution extends InvolutionSyntax","d":"spire/syntax/involution$","k":"object"},
{"l":"spire/syntax/isReal$.html","n":"isReal","t":"object isReal extends IsRealSyntax","d":"spire/syntax/isReal$","k":"object"},
{"l":"spire/syntax/lattice$.html","n":"lattice","t":"object lattice extends LatticeSyntax","d":"spire/syntax/lattice$","k":"object"},
{"l":"spire/syntax/leftModule$.html","n":"leftModule","t":"object leftModule extends LeftModuleSyntax","d":"spire/syntax/leftModule$","k":"object"},
{"l":"spire/syntax/literals$.html","n":"literals","t":"object literals extends LiteralsSyntax","d":"spire/syntax/literals$","k":"object"},
{"l":"spire/syntax/logic$.html","n":"logic","t":"object logic extends LogicSyntax","d":"spire/syntax/logic$","k":"object"},
{"l":"spire/syntax/metricSpace$.html","n":"metricSpace","t":"object metricSpace extends MetricSpaceSyntax","d":"spire/syntax/metricSpace$","k":"object"},
{"l":"spire/syntax/monoid$.html","n":"monoid","t":"object monoid extends MonoidSyntax","d":"spire/syntax/monoid$","k":"object"},
{"l":"spire/syntax/multiplicativeGroup$.html","n":"multiplicativeGroup","t":"object multiplicativeGroup extends MultiplicativeGroupSyntax","d":"spire/syntax/multiplicativeGroup$","k":"object"},
{"l":"spire/syntax/multiplicativeMonoid$.html","n":"multiplicativeMonoid","t":"object multiplicativeMonoid extends MultiplicativeMonoidSyntax","d":"spire/syntax/multiplicativeMonoid$","k":"object"},
{"l":"spire/syntax/multiplicativeSemigroup$.html","n":"multiplicativeSemigroup","t":"object multiplicativeSemigroup extends MultiplicativeSemigroupSyntax","d":"spire/syntax/multiplicativeSemigroup$","k":"object"},
{"l":"spire/syntax/normedVectorSpace$.html","n":"normedVectorSpace","t":"object normedVectorSpace extends NormedVectorSpaceSyntax","d":"spire/syntax/normedVectorSpace$","k":"object"},
{"l":"spire/syntax/nroot$.html","n":"nroot","t":"object nroot extends NRootSyntax","d":"spire/syntax/nroot$","k":"object"},
{"l":"spire/syntax/numeric$.html","n":"numeric","t":"object numeric extends NumericSyntax","d":"spire/syntax/numeric$","k":"object"},
{"l":"spire/syntax/order$.html","n":"order","t":"object order extends OrderSyntax","d":"spire/syntax/order$","k":"object"},
{"l":"spire/syntax/partialAction$.html","n":"partialAction","t":"object partialAction extends PartialActionSyntax","d":"spire/syntax/partialAction$","k":"object"},
{"l":"spire/syntax/partialOrder$.html","n":"partialOrder","t":"object partialOrder extends PartialOrderSyntax","d":"spire/syntax/partialOrder$","k":"object"},
{"l":"spire/syntax/rig$.html","n":"rig","t":"object rig extends RigSyntax","d":"spire/syntax/rig$","k":"object"},
{"l":"spire/syntax/rightModule$.html","n":"rightModule","t":"object rightModule extends RightModuleSyntax","d":"spire/syntax/rightModule$","k":"object"},
{"l":"spire/syntax/ring$.html","n":"ring","t":"object ring extends RingSyntax","d":"spire/syntax/ring$","k":"object"},
{"l":"spire/syntax/rng$.html","n":"rng","t":"object rng extends RngSyntax","d":"spire/syntax/rng$","k":"object"},
{"l":"spire/syntax/semigroup$.html","n":"semigroup","t":"object semigroup extends SemigroupSyntax","d":"spire/syntax/semigroup$","k":"object"},
{"l":"spire/syntax/semigroupoid$.html","n":"semigroupoid","t":"object semigroupoid extends SemigroupoidSyntax","d":"spire/syntax/semigroupoid$","k":"object"},
{"l":"spire/syntax/semiring$.html","n":"semiring","t":"object semiring extends SemiringSyntax","d":"spire/syntax/semiring$","k":"object"},
{"l":"spire/syntax/signed$.html","n":"signed","t":"object signed extends SignedSyntax","d":"spire/syntax/signed$","k":"object"},
{"l":"spire/syntax/torsor$.html","n":"torsor","t":"object torsor extends TorsorSyntax","d":"spire/syntax/torsor$","k":"object"},
{"l":"spire/syntax/trig$.html","n":"trig","t":"object trig extends TrigSyntax","d":"spire/syntax/trig$","k":"object"},
{"l":"spire/syntax/truncatedDivision$.html","n":"truncatedDivision","t":"object truncatedDivision extends TruncatedDivisionSyntax","d":"spire/syntax/truncatedDivision$","k":"object"},
{"l":"spire/syntax/unbound$.html","n":"unbound","t":"object unbound extends UnboundSyntax","d":"spire/syntax/unbound$","k":"object"},
{"l":"spire/syntax/vectorSpace$.html","n":"vectorSpace","t":"object vectorSpace extends VectorSpaceSyntax","d":"spire/syntax/vectorSpace$","k":"object"},
{"l":"spire/syntax/macros.html","n":"spire.syntax.macros","t":"package spire.syntax.macros","d":"spire/syntax/macros","k":"package"},
{"l":"spire/syntax/macros.html","n":"byte","t":"def byte(digits: Expr[StringContext])(using Quotes): Expr[Byte]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"euBigDecimal","t":"def euBigDecimal(digits: Expr[StringContext])(using Quotes): Expr[BigDecimal]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"euBigInt","t":"def euBigInt(digits: Expr[StringContext])(using Quotes): Expr[BigInt]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"euInt","t":"def euInt(digits: Expr[StringContext])(using Quotes): Expr[Int]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"euLong","t":"def euLong(digits: Expr[StringContext])(using Quotes): Expr[Long]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"fastForImpl","t":"def fastForImpl[R : Type](init: Expr[R], test: Expr[R => Boolean], next: Expr[R => R], body: Expr[R => Unit])(implicit evidence$1: Type[R], Quotes): Expr[Unit]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"fastForRangeMacroGen","t":"def fastForRangeMacroGen[R <: RangeLike : Type](r: Expr[R], body: Expr[RangeElem[R] => Unit])(implicit evidence$2: Type[R], quotes: Quotes): Expr[Unit]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"formatDecimal","t":"def formatDecimal(s: String, sep: String, dec: String)(using Quotes): String","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"formatWhole","t":"def formatWhole(s: String, sep: String)(using Quotes): String","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"handleBigDecimal","t":"def handleBigDecimal(s: Seq[String], name: String, sep: String, dec: String)(using Quotes): Expr[BigDecimal]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"handleBigInt","t":"def handleBigInt(s: Seq[String], name: String, sep: String)(using Quotes): Expr[BigInt]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"handleInt","t":"def handleInt(s: Seq[String], name: String, sep: String)(using Quotes): Expr[Int]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"handleLong","t":"def handleLong(s: Seq[String], name: String, sep: String)(using Quotes): Expr[Long]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"parseNumber","t":"def parseNumber(s: Seq[String], lower: BigInt, upper: BigInt): Either[String, BigInt]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"rational","t":"def rational(digits: Expr[StringContext])(using Quotes): Expr[Rational]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"short","t":"def short(digits: Expr[StringContext])(using Quotes): Expr[Short]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"siBigDecimal","t":"def siBigDecimal(digits: Expr[StringContext])(using Quotes): Expr[BigDecimal]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"siBigInt","t":"def siBigInt(digits: Expr[StringContext])(using Quotes): Expr[BigInt]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"siInt","t":"def siInt(digits: Expr[StringContext])(using Quotes): Expr[Int]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"siLong","t":"def siLong(digits: Expr[StringContext])(using Quotes): Expr[Long]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"ubyte","t":"def ubyte(digits: Expr[StringContext])(using Quotes): Expr[UByte]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"uint","t":"def uint(digits: Expr[StringContext])(using Quotes): Expr[UInt]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"ulong","t":"def ulong(digits: Expr[StringContext])(using Quotes): Expr[ULong]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"usBigDecimal","t":"def usBigDecimal(digits: Expr[StringContext])(using Quotes): Expr[BigDecimal]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"usBigInt","t":"def usBigInt(digits: Expr[StringContext])(using Quotes): Expr[BigInt]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"usInt","t":"def usInt(digits: Expr[StringContext])(using Quotes): Expr[Int]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"usLong","t":"def usLong(digits: Expr[StringContext])(using Quotes): Expr[Long]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/macros.html","n":"ushort","t":"def ushort(digits: Expr[StringContext])(using Quotes): Expr[UShort]","d":"spire/syntax/macros","k":"def"},
{"l":"spire/syntax/std.html","n":"spire.syntax.std","t":"package spire.syntax.std","d":"spire/syntax/std","k":"package"},
{"l":"spire/syntax/std/ArrayOps.html","n":"ArrayOps","t":"class ArrayOps[@specialized A](arr: Array[A])","d":"spire/syntax/std/ArrayOps","k":"class"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qcombine","t":"def qcombine(implicit ev: Monoid[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qmax","t":"def qmax(implicit ev: Order[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qmean","t":"def qmean(implicit ev: Field[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qmeanWith","t":"def qmeanWith[@specialized(Double) R](f: A => R)(implicit ev: Field[R]): R","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qmin","t":"def qmin(implicit ev: Order[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qnorm","t":"def qnorm(p: Int)(implicit ev: Field[A], s: Signed[A], nr: NRoot[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qnormWith","t":"def qnormWith[@specialized(Double) R](p: Int)(f: A => R)(implicit ev: Field[R], s: Signed[R], nr: NRoot[R]): R","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qproduct","t":"def qproduct(implicit ev: MultiplicativeMonoid[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsampled","t":"def qsampled(n: Int)(implicit gen: Generator, ct: ClassTag[A]): Array[A]","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsearch","t":"def qsearch(a: A)(implicit ev: Order[A]): Int","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qselect","t":"def qselect(k: Int)(implicit ev: Order[A], ct: ClassTag[A]): Unit","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qselected","t":"def qselected(k: Int)(implicit ev: Order[A], ct: ClassTag[A]): Array[A]","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qshuffle","t":"def qshuffle(implicit gen: Generator): Unit","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qshuffled","t":"def qshuffled(implicit gen: Generator): Array[A]","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsort","t":"def qsort(implicit ev: Order[A], ct: ClassTag[A]): Unit","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsortBy","t":"def qsortBy[@specialized B](f: A => B)(implicit ev: Order[B], ct: ClassTag[A]): Unit","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsortWith","t":"def qsortWith(f: (A, A) => Int)(implicit ct: ClassTag[A]): Unit","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsorted","t":"def qsorted(implicit ev: Order[A], ct: ClassTag[A]): Array[A]","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsortedBy","t":"def qsortedBy[@specialized B](f: A => B)(implicit ev: Order[B], ct: ClassTag[A]): Array[A]","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsortedWith","t":"def qsortedWith(f: (A, A) => Int)(implicit ct: ClassTag[A]): Array[A]","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArrayOps.html","n":"qsum","t":"def qsum(implicit ev: AdditiveMonoid[A]): A","d":"spire/syntax/std/ArrayOps","k":"def"},
{"l":"spire/syntax/std/ArraySyntax.html","n":"ArraySyntax","t":"trait ArraySyntax","d":"spire/syntax/std/ArraySyntax","k":"trait"},
{"l":"spire/syntax/std/ArraySyntax.html","n":"arrayOps","t":"def arrayOps[@specialized A](lhs: Array[A]): ArrayOps[A]","d":"spire/syntax/std/ArraySyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"BigIntSyntax","t":"trait BigIntSyntax","d":"spire/syntax/std/BigIntSyntax","k":"trait"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"%","t":"def %(rhs: SafeLong): SafeLong","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"%","t":"def %(rhs: Natural): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"%","t":"def %(rhs: ULong): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"%","t":"def %(rhs: Number): Number","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"*","t":"def *(rhs: SafeLong): SafeLong","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"*","t":"def *(rhs: Natural): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"*","t":"def *(rhs: ULong): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"*","t":"def *(rhs: Number): Number","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"**","t":"def **(rhs: BigInt): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"+","t":"def +(rhs: SafeLong): SafeLong","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"+","t":"def +(rhs: Natural): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"+","t":"def +(rhs: ULong): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"+","t":"def +(rhs: Number): Number","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"-","t":"def -(rhs: SafeLong): SafeLong","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"-","t":"def -(rhs: Natural): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"-","t":"def -(rhs: ULong): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"-","t":"def -(rhs: Number): Number","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/","t":"def /(rhs: SafeLong): SafeLong","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/","t":"def /(rhs: Natural): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/","t":"def /(rhs: ULong): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/","t":"def /(rhs: Number): Number","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/%","t":"def /%(rhs: SafeLong): (SafeLong, SafeLong)","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/%","t":"def /%(rhs: Natural): (BigInt, BigInt)","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/%","t":"def /%(rhs: ULong): (BigInt, BigInt)","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/%","t":"def /%(rhs: Number): (Number, Number)","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/~","t":"def /~(rhs: BigInt): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/~","t":"def /~(rhs: SafeLong): SafeLong","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/~","t":"def /~(rhs: Natural): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/~","t":"def /~(rhs: ULong): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"/~","t":"def /~(rhs: Number): Number","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/BigIntSyntax.html","n":"pow","t":"def pow(rhs: BigInt): BigInt","d":"spire/syntax/std/BigIntSyntax","k":"def"},
{"l":"spire/syntax/std/DoubleSyntax.html","n":"DoubleSyntax","t":"trait DoubleSyntax","d":"spire/syntax/std/DoubleSyntax","k":"trait"},
{"l":"spire/syntax/std/DoubleSyntax.html","n":"**","t":"def **(rhs: Double): Double","d":"spire/syntax/std/DoubleSyntax","k":"def"},
{"l":"spire/syntax/std/DoubleSyntax.html","n":"pow","t":"def pow(rhs: Double): Double","d":"spire/syntax/std/DoubleSyntax","k":"def"},
{"l":"spire/syntax/std/IndexedSeqOps.html","n":"IndexedSeqOps","t":"class IndexedSeqOps[@specialized A, CC <: (IndexedSeq)](as: CC[A])","d":"spire/syntax/std/IndexedSeqOps","k":"class"},
{"l":"spire/syntax/std/IndexedSeqOps.html","n":"qsearch","t":"def qsearch(a: A)(implicit ev: Order[A]): Int","d":"spire/syntax/std/IndexedSeqOps","k":"def"},
{"l":"spire/syntax/std/IntSyntax.html","n":"IntSyntax","t":"trait IntSyntax","d":"spire/syntax/std/IntSyntax","k":"trait"},
{"l":"spire/syntax/std/IntSyntax.html","n":"**","t":"def **(rhs: Int): Int","d":"spire/syntax/std/IntSyntax","k":"def"},
{"l":"spire/syntax/std/IntSyntax.html","n":"/%","t":"def /%(rhs: Int): (Int, Int)","d":"spire/syntax/std/IntSyntax","k":"def"},
{"l":"spire/syntax/std/IntSyntax.html","n":"/~","t":"def /~(rhs: Int): Int","d":"spire/syntax/std/IntSyntax","k":"def"},
{"l":"spire/syntax/std/IntSyntax.html","n":"choose","t":"def choose(rhs: Int): BigInt","d":"spire/syntax/std/IntSyntax","k":"def"},
{"l":"spire/syntax/std/IntSyntax.html","n":"pow","t":"def pow(rhs: Int): Int","d":"spire/syntax/std/IntSyntax","k":"def"},
{"l":"spire/syntax/std/IntSyntax.html","n":"unary_!","t":"def unary_!: BigInt","d":"spire/syntax/std/IntSyntax","k":"def"},
{"l":"spire/syntax/std/LongSyntax.html","n":"LongSyntax","t":"trait LongSyntax","d":"spire/syntax/std/LongSyntax","k":"trait"},
{"l":"spire/syntax/std/LongSyntax.html","n":"**","t":"def **(rhs: Long): Long","d":"spire/syntax/std/LongSyntax","k":"def"},
{"l":"spire/syntax/std/LongSyntax.html","n":"/%","t":"def /%(rhs: Long): (Long, Long)","d":"spire/syntax/std/LongSyntax","k":"def"},
{"l":"spire/syntax/std/LongSyntax.html","n":"/~","t":"def /~(rhs: Long): Long","d":"spire/syntax/std/LongSyntax","k":"def"},
{"l":"spire/syntax/std/LongSyntax.html","n":"choose","t":"def choose(rhs: Long): BigInt","d":"spire/syntax/std/LongSyntax","k":"def"},
{"l":"spire/syntax/std/LongSyntax.html","n":"pow","t":"def pow(rhs: Long): Long","d":"spire/syntax/std/LongSyntax","k":"def"},
{"l":"spire/syntax/std/LongSyntax.html","n":"unary_!","t":"def unary_!: BigInt","d":"spire/syntax/std/LongSyntax","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"SeqOps","t":"class SeqOps[@specialized A, CC <: (Iterable)](as: CC[A])","d":"spire/syntax/std/SeqOps","k":"class"},
{"l":"spire/syntax/std/SeqOps.html","n":"pmax","t":"def pmax(implicit ev: PartialOrder[A]): Seq[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"pmin","t":"def pmin(implicit ev: PartialOrder[A]): Seq[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qchoose","t":"def qchoose(implicit gen: Generator): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qcombine","t":"def qcombine(implicit ev: Monoid[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qmax","t":"def qmax(implicit ev: Order[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qmean","t":"def qmean(implicit ev: Field[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qmeanWith","t":"def qmeanWith[R](f: A => R)(implicit ev: Field[R]): R","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qmin","t":"def qmin(implicit ev: Order[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qnorm","t":"def qnorm(p: Int)(implicit ev: Field[A], s: Signed[A], nr: NRoot[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qnormWith","t":"def qnormWith[R](p: Int)(f: A => R)(implicit ev: Field[R], s: Signed[R], nr: NRoot[R]): R","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qproduct","t":"def qproduct(implicit ev: MultiplicativeMonoid[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qsampled","t":"def qsampled(n: Int)(implicit gen: Generator, ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qselected","t":"def qselected(k: Int)(implicit ev: Order[A], ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qselectk","t":"def qselectk(k: Int)(implicit ev: Order[A], ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qshuffled","t":"def qshuffled(implicit gen: Generator, ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qsorted","t":"def qsorted(implicit ev: Order[A], ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qsortedBy","t":"def qsortedBy[@specialized B](f: A => B)(implicit ev: Order[B], ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qsortedWith","t":"def qsortedWith(f: (A, A) => Int)(implicit ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qsum","t":"def qsum(implicit ev: AdditiveMonoid[A]): A","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqOps.html","n":"qtopk","t":"def qtopk(k: Int)(implicit ev: Order[A], ct: ClassTag[A], cbf: Factory[A, CC[A]]): CC[A]","d":"spire/syntax/std/SeqOps","k":"def"},
{"l":"spire/syntax/std/SeqSyntax.html","n":"SeqSyntax","t":"trait SeqSyntax","d":"spire/syntax/std/SeqSyntax","k":"trait"},
{"l":"spire/syntax/std/SeqSyntax.html","n":"indexedSeqOps","t":"def indexedSeqOps[@specialized A, CC <: (IndexedSeq)](lhs: CC[A]): IndexedSeqOps[A, CC]","d":"spire/syntax/std/SeqSyntax","k":"def"},
{"l":"spire/syntax/std/SeqSyntax.html","n":"seqOps","t":"def seqOps[@specialized A, CC <: (Iterable)](lhs: CC[A]): SeqOps[A, CC]","d":"spire/syntax/std/SeqSyntax","k":"def"},
{"l":"spire/syntax/std/array$.html","n":"array","t":"object array extends ArraySyntax","d":"spire/syntax/std/array$","k":"object"},
{"l":"spire/syntax/std/bigInt$.html","n":"bigInt","t":"object bigInt extends BigIntSyntax","d":"spire/syntax/std/bigInt$","k":"object"},
{"l":"spire/syntax/std/double$.html","n":"double","t":"object double extends DoubleSyntax","d":"spire/syntax/std/double$","k":"object"},
{"l":"spire/syntax/std/int$.html","n":"int","t":"object int extends IntSyntax","d":"spire/syntax/std/int$","k":"object"},
{"l":"spire/syntax/std/long$.html","n":"long","t":"object long extends LongSyntax","d":"spire/syntax/std/long$","k":"object"},
{"l":"spire/syntax/std/seq$.html","n":"seq","t":"object seq extends SeqSyntax","d":"spire/syntax/std/seq$","k":"object"},
{"l":"spire/util.html","n":"spire.util","t":"package spire.util","d":"spire/util","k":"package"},
{"l":"spire/util/Opt$.html","n":"Opt","t":"object Opt","d":"spire/util/Opt$","k":"object"},
{"l":"spire/util/Opt$.html","n":"EqOpt","t":"def EqOpt[A](implicit ev: Eq[A]): Eq[Opt[A]]","d":"spire/util/Opt$","k":"def"},
{"l":"spire/util/Opt$.html","n":"apply","t":"def apply[A](a: A): Opt[A]","d":"spire/util/Opt$","k":"def"},
{"l":"spire/util/Opt$.html","n":"empty","t":"def empty[A]: Opt[A]","d":"spire/util/Opt$","k":"def"},
{"l":"spire/util/Opt$.html","n":"unapply","t":"def unapply[A](n: Opt[A]): Opt[A]","d":"spire/util/Opt$","k":"def"},
{"l":"spire/util/Opt.html","n":"Opt","t":"class Opt[+A](val ref: A) extends AnyVal","d":"spire/util/Opt","k":"class"},
{"l":"spire/util/Opt.html","n":"contains","t":"def contains[A1 >: A](elem: A1): Boolean","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"exists","t":"def exists(p: A => Boolean): Boolean","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"filter","t":"def filter(f: A => Boolean): Opt[A]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"flatMap","t":"def flatMap[B](f: A => Opt[B]): Opt[B]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"fold","t":"def fold[B](b: => B)(f: A => B): B","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"forall","t":"def forall(p: A => Boolean): Boolean","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"foreach","t":"def foreach[U](f: A => U): Unit","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"get","t":"def get: A","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"getOrElse","t":"def getOrElse[B >: A](default: => B): B","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"getOrElseFast","t":"def getOrElseFast[B >: A](default: B): B","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"isDefined","t":"def isDefined: Boolean","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"isEmpty","t":"def isEmpty: Boolean","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"iterator","t":"def iterator: Iterator[A]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"map","t":"def map[B](f: A => B): Opt[B]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"nonEmpty","t":"def nonEmpty: Boolean","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"ref","t":"val ref: A","d":"spire/util/Opt","k":"val"},
{"l":"spire/util/Opt.html","n":"toLeft","t":"def toLeft[X](right: => X): Either[A, X]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"toList","t":"def toList: List[A]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"toOption","t":"def toOption: Option[A]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Opt.html","n":"toRight","t":"def toRight[X](left: => X): Either[X, A]","d":"spire/util/Opt","k":"def"},
{"l":"spire/util/Pack$.html","n":"Pack","t":"object Pack extends PackMacros","d":"spire/util/Pack$","k":"object"},
{"l":"spire/util/Pack$.html","n":"bytesFromByteBuffer","t":"def bytesFromByteBuffer(bb: ByteBuffer, n: Int): Array[Byte]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intFromByteBuffer","t":"def intFromByteBuffer(bb: ByteBuffer): Int","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intFromBytes","t":"def intFromBytes(bytes: Array[Byte]): Int","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intFromBytes","t":"def intFromBytes(b1: Byte, b2: Byte, b3: Byte, b4: Byte): Int","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intToByteRuntime","t":"def intToByteRuntime(n: Int)(index: Int): Byte","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intToBytes","t":"def intToBytes(n: Int): Array[Byte]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intsFromByteBuffer","t":"def intsFromByteBuffer(bb: ByteBuffer, n: Int): Array[Int]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intsFromBytes","t":"def intsFromBytes(bytes: Array[Byte], n: Int): Array[Int]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"intsToBytes","t":"def intsToBytes(ints: Array[Int]): Array[Byte]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longFromByteBuffer","t":"def longFromByteBuffer(bb: ByteBuffer): Long","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longFromBytes","t":"def longFromBytes(bytes: Array[Byte]): Long","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longFromBytes","t":"def longFromBytes(b1: Byte, b2: Byte, b3: Byte, b4: Byte, b5: Byte, b6: Byte, b7: Byte, b8: Byte): Long","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longToByteRuntime","t":"def longToByteRuntime(n: Long)(index: Int): Byte","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longToBytes","t":"def longToBytes(n: Long): Array[Byte]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longsFromByteBuffer","t":"def longsFromByteBuffer(bb: ByteBuffer, n: Int): Array[Long]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longsFromBytes","t":"def longsFromBytes(bytes: Array[Byte], n: Int): Array[Long]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/Pack$.html","n":"longsToBytes","t":"def longsToBytes(longs: Array[Long]): Array[Byte]","d":"spire/util/Pack$","k":"def"},
{"l":"spire/util/PackMacros.html","n":"PackMacros","t":"trait PackMacros","d":"spire/util/PackMacros","k":"trait"},
{"l":"spire/util/PackMacros.html","n":"intToByte","t":"def intToByte(n: Int)(index: Int): Byte","d":"spire/util/PackMacros","k":"def"},
{"l":"spire/util/PackMacros.html","n":"longToByte","t":"def longToByte(n: Long)(index: Int): Byte","d":"spire/util/PackMacros","k":"def"},
{"l":"docs/index.html","n":"docs","t":"docs","d":"","k":"static"}];